/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Thu Apr 25 17:56:14 2024.
 */

#ifndef VEHICLE_H
#define VEHICLE_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

extern struct vehicle_cr_fd1_t g_vehicle_cr_fd1;
extern struct vehicle_acc_fd1_t g_vehicle_acc_fd1;
extern struct vehicle_dct5_t g_vehicle_dct5;
extern struct vehicle_bcm1_t g_vehicle_bcm1;
extern struct vehicle_bcm8_t g_vehicle_bcm8;
extern struct vehicle_peps2_t g_vehicle_peps2;
extern struct vehicle_ac2_t g_vehicle_ac2;
extern struct vehicle_csa1_t g_vehicle_csa1;
extern struct vehicle_csa2_t g_vehicle_csa2;
extern struct vehicle_abm2_t g_vehicle_abm2;
extern struct vehicle_ip2_t g_vehicle_ip2;
extern struct vehicle_hut_fd1_t g_vehicle_hut_fd1;
extern struct vehicle_hut34_t g_vehicle_hut34;
extern struct vehicle_esp_fd2_t g_vehicle_esp_fd2;
extern struct vehicle_esp_fd3_t g_vehicle_esp_fd3;
extern struct vehicle_ecm_fd1_t g_vehicle_ecm_fd1;
extern struct vehicle_ecm_fd2_t g_vehicle_ecm_fd2;
extern struct vehicle_ibooster_fd2_t g_vehicle_ibooster_fd2;
extern struct vehicle_ebooster_fd1_t g_vehicle_ebooster_fd1;
extern struct vehicle_adas_ad1_t g_vehicle_adas_ad1;
extern struct vehicle_diag_func_req_t g_vehicle_diagfuncreq;
extern struct vehicle_fr_phy_req_t g_vehicle_fr_phy_req;
extern struct vehicle_fr_phy_resp_t g_vehicle_fr_phy_resp;
extern struct vehicle_rsds_fd1_t g_vehicle_rsds_fd1;
extern struct vehicle_rsds_fd2_t g_vehicle_rsds_fd2;
extern struct vehicle_trailer1_t g_vehicle_trailer1;
extern struct vehicle_f_pbox1_t g_vehicle_f_pbox1;
extern struct vehicle_ddcm1_t g_vehicle_ddcm1;
extern struct vehicle_pdcm1_t g_vehicle_pdcm1;
extern struct vehicle_r_pbox1_t g_vehicle_r_pbox1;
/* Frame ids. */
#define VEHICLE_CR_FD1_FRAME_ID (0x15eu)
#define VEHICLE_ACC_FD1_FRAME_ID (0x143u)
#define VEHICLE_DCT5_FRAME_ID (0x221u)
#define VEHICLE_BCM1_FRAME_ID (0x319u)
#define VEHICLE_BCM8_FRAME_ID (0x29fu)
#define VEHICLE_PEPS2_FRAME_ID (0x295u)
#define VEHICLE_AC2_FRAME_ID (0x385u)
#define VEHICLE_CSA1_FRAME_ID (0x165u)
#define VEHICLE_CSA2_FRAME_ID (0xa1u)
#define VEHICLE_ABM2_FRAME_ID (0x245u)
#define VEHICLE_IP2_FRAME_ID (0x27fu)
#define VEHICLE_HUT_FD1_FRAME_ID (0x2c3u)
#define VEHICLE_HUT34_FRAME_ID (0x370u)
#define VEHICLE_ESP_FD2_FRAME_ID (0x137u)
#define VEHICLE_ESP_FD3_FRAME_ID (0x13bu)
#define VEHICLE_ECM_FD1_FRAME_ID (0x79u)
#define VEHICLE_ECM_FD2_FRAME_ID (0x103u)
#define VEHICLE_IBOOSTER_FD2_FRAME_ID (0x120u)
#define VEHICLE_EBOOSTER_FD1_FRAME_ID (0x12du)
#define VEHICLE_ADAS_AD1_FRAME_ID (0x470u)
#define VEHICLE_DIAG_FUNC_REQ_FRAME_ID (0x760u)
#define VEHICLE_FR_PHY_REQ_FRAME_ID (0x772u)
#define VEHICLE_FR_PHY_RESP_FRAME_ID (0x7b2u)
#define VEHICLE_RSDS_FD1_FRAME_ID (0x16fu)
#define VEHICLE_RSDS_FD2_FRAME_ID (0x30au)
#define VEHICLE_TRAILER1_FRAME_ID (0x273u)
#define VEHICLE_F_PBOX1_FRAME_ID (0x19bu)
#define VEHICLE_DDCM1_FRAME_ID (0x2cau)
#define VEHICLE_PDCM1_FRAME_ID (0x2cdu)
#define VEHICLE_R_PBOX1_FRAME_ID (0x19cu)

/* Frame lengths in bytes. */
#define VEHICLE_CR_FD1_LENGTH (64u)
#define VEHICLE_ACC_FD1_LENGTH (64u)
#define VEHICLE_DCT5_LENGTH (8u)
#define VEHICLE_BCM1_LENGTH (16u)
#define VEHICLE_BCM8_LENGTH (8u)
#define VEHICLE_PEPS2_LENGTH (8u)
#define VEHICLE_AC2_LENGTH (8u)
#define VEHICLE_CSA1_LENGTH (8u)
#define VEHICLE_CSA2_LENGTH (8u)
#define VEHICLE_ABM2_LENGTH (8u)
#define VEHICLE_IP2_LENGTH (16u)
#define VEHICLE_HUT_FD1_LENGTH (64u)
#define VEHICLE_HUT34_LENGTH (8u)
#define VEHICLE_ESP_FD2_LENGTH (64u)
#define VEHICLE_ESP_FD3_LENGTH (64u)
#define VEHICLE_ECM_FD1_LENGTH (64u)
#define VEHICLE_ECM_FD2_LENGTH (64u)
#define VEHICLE_IBOOSTER_FD2_LENGTH (64u)
#define VEHICLE_EBOOSTER_FD1_LENGTH (64u)
#define VEHICLE_ADAS_AD1_LENGTH (16u)
#define VEHICLE_DIAG_FUNC_REQ_LENGTH (8u)
#define VEHICLE_FR_PHY_REQ_LENGTH (8u)
#define VEHICLE_FR_PHY_RESP_LENGTH (8u)
#define VEHICLE_RSDS_FD1_LENGTH (64u)
#define VEHICLE_RSDS_FD2_LENGTH (64u)
#define VEHICLE_TRAILER1_LENGTH (8u)
#define VEHICLE_F_PBOX1_LENGTH (8u)
#define VEHICLE_DDCM1_LENGTH (8u)
#define VEHICLE_PDCM1_LENGTH (8u)
#define VEHICLE_R_PBOX1_LENGTH (16u)

/* Extended or standard frame types. */
#define VEHICLE_CR_FD1_IS_EXTENDED (0)
#define VEHICLE_ACC_FD1_IS_EXTENDED (0)
#define VEHICLE_DCT5_IS_EXTENDED (0)
#define VEHICLE_BCM1_IS_EXTENDED (0)
#define VEHICLE_BCM8_IS_EXTENDED (0)
#define VEHICLE_PEPS2_IS_EXTENDED (0)
#define VEHICLE_AC2_IS_EXTENDED (0)
#define VEHICLE_CSA1_IS_EXTENDED (0)
#define VEHICLE_CSA2_IS_EXTENDED (0)
#define VEHICLE_ABM2_IS_EXTENDED (0)
#define VEHICLE_IP2_IS_EXTENDED (0)
#define VEHICLE_HUT_FD1_IS_EXTENDED (0)
#define VEHICLE_HUT34_IS_EXTENDED (0)
#define VEHICLE_ESP_FD2_IS_EXTENDED (0)
#define VEHICLE_ESP_FD3_IS_EXTENDED (0)
#define VEHICLE_ECM_FD1_IS_EXTENDED (0)
#define VEHICLE_ECM_FD2_IS_EXTENDED (0)
#define VEHICLE_IBOOSTER_FD2_IS_EXTENDED (0)
#define VEHICLE_EBOOSTER_FD1_IS_EXTENDED (0)
#define VEHICLE_ADAS_AD1_IS_EXTENDED (0)
#define VEHICLE_DIAG_FUNC_REQ_IS_EXTENDED (0)
#define VEHICLE_FR_PHY_REQ_IS_EXTENDED (0)
#define VEHICLE_FR_PHY_RESP_IS_EXTENDED (0)
#define VEHICLE_RSDS_FD1_IS_EXTENDED (0)
#define VEHICLE_RSDS_FD2_IS_EXTENDED (0)
#define VEHICLE_TRAILER1_IS_EXTENDED (0)
#define VEHICLE_F_PBOX1_IS_EXTENDED (0)
#define VEHICLE_DDCM1_IS_EXTENDED (0)
#define VEHICLE_PDCM1_IS_EXTENDED (0)
#define VEHICLE_R_PBOX1_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define VEHICLE_CR_FD1_CYCLE_TIME_MS (20u)
#define VEHICLE_ACC_FD1_CYCLE_TIME_MS (20u)
#define VEHICLE_DCT5_CYCLE_TIME_MS (20u)
#define VEHICLE_BCM1_CYCLE_TIME_MS (50u)
#define VEHICLE_BCM8_CYCLE_TIME_MS (100u)
#define VEHICLE_PEPS2_CYCLE_TIME_MS (50u)
#define VEHICLE_AC2_CYCLE_TIME_MS (100u)
#define VEHICLE_CSA1_CYCLE_TIME_MS (20u)
#define VEHICLE_CSA2_CYCLE_TIME_MS (10u)
#define VEHICLE_ABM2_CYCLE_TIME_MS (20u)
#define VEHICLE_IP2_CYCLE_TIME_MS (50u)
#define VEHICLE_HUT_FD1_CYCLE_TIME_MS (100u)
#define VEHICLE_HUT34_CYCLE_TIME_MS (1000u)
#define VEHICLE_ESP_FD2_CYCLE_TIME_MS (20u)
#define VEHICLE_ESP_FD3_CYCLE_TIME_MS (20u)
#define VEHICLE_ECM_FD1_CYCLE_TIME_MS (10u)
#define VEHICLE_ECM_FD2_CYCLE_TIME_MS (20u)
#define VEHICLE_IBOOSTER_FD2_CYCLE_TIME_MS (20u)
#define VEHICLE_EBOOSTER_FD1_CYCLE_TIME_MS (20u)
#define VEHICLE_ADAS_AD1_CYCLE_TIME_MS (500u)
#define VEHICLE_RSDS_FD1_CYCLE_TIME_MS (20u)
#define VEHICLE_RSDS_FD2_CYCLE_TIME_MS (200u)
#define VEHICLE_TRAILER1_CYCLE_TIME_MS (50u)
#define VEHICLE_F_PBOX1_CYCLE_TIME_MS (50u)
#define VEHICLE_DDCM1_CYCLE_TIME_MS (100u)
#define VEHICLE_PDCM1_CYCLE_TIME_MS (100u)
#define VEHICLE_R_PBOX1_CYCLE_TIME_MS (50u)

/* Signal choices. */
#define VEHICLE_CR_FD1_CHECKSUM_CR_R_1___VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_FCTA_RESP__OFF__CHOICE (0u)
#define VEHICLE_CR_FD1_CR_FCTA_RESP__ON__CHOICE (1u)

#define VEHICLE_CR_FD1_CR_FCTB_RESP__OFF__CHOICE (0u)
#define VEHICLE_CR_FD1_CR_FCTB_RESP__ON__CHOICE (1u)

#define VEHICLE_CR_FD1_FCTA_B_FUNC_STS___NO_DISPLAY___CHOICE (0u)
#define VEHICLE_CR_FD1_FCTA_B_FUNC_STS__ERROR___CHOICE (1u)
#define VEHICLE_CR_FD1_FCTA_B_FUNC_STS__FCTA_B_TEMPORARILY_UNAVAILABLE__CHOICE (2u)
#define VEHICLE_CR_FD1_FCTA_B_FUNC_STS__FCTA_B__PERFORMANCE_DEGRADATION__CHOICE (3u)

#define VEHICLE_CR_FD1_FCTA_WARN___NO_WARNING__CHOICE (0u)
#define VEHICLE_CR_FD1_FCTA_WARN___WARNING__CHOICE (1u)

#define VEHICLE_CR_FD1_CR_ERR_STS___NO__ERROR__CHOICE (0u)
#define VEHICLE_CR_FD1_CR_ERR_STS___ERROR__CHOICE (1u)

#define VEHICLE_CR_FD1_CR_BLI_STS___NO__BLINDNESS__CHOICE (0u)
#define VEHICLE_CR_FD1_CR_BLI_STS___BLINDNESS__CHOICE (1u)

#define VEHICLE_CR_FD1_CR_BRKG_REQ___NO__REQUEST__CHOICE (0u)
#define VEHICLE_CR_FD1_CR_BRKG_REQ___REQUEST__CHOICE (1u)

#define VEHICLE_CR_FD1_FCTB_TRIG___NOT_TIRGGERED__CHOICE (0u)
#define VEHICLE_CR_FD1_FCTB_TRIG__TIRGGERED__CHOICE (1u)

#define VEHICLE_CR_FD1_FCTB_ABA_LEVEL___LEVEL_0__CHOICE (0u)
#define VEHICLE_CR_FD1_FCTB_ABA_LEVEL___LEVEL_1__CHOICE (1u)
#define VEHICLE_CR_FD1_FCTB_ABA_LEVEL___LEVEL_2__CHOICE (2u)
#define VEHICLE_CR_FD1_FCTB_ABA_LEVEL___LEVEL_3__CHOICE (3u)

#define VEHICLE_CR_FD1_FCTB_ABA_REQ___NO__REQUEST__CHOICE (0u)
#define VEHICLE_CR_FD1_FCTB_ABA_REQ___REQUEST__CHOICE (1u)

#define VEHICLE_CR_FD1_CR_BRKG_REQ_VAL___VALID_VALUE__CHOICE (0u)
#define VEHICLE_CR_FD1_CR_BRKG_REQ_VAL___INVALID__CHOICE (65535u)

#define VEHICLE_CR_FD1_FCTB_ABP_REQ___NO__REQUEST__CHOICE (0u)
#define VEHICLE_CR_FD1_FCTB_ABP_REQ___REQUEST__CHOICE (1u)

#define VEHICLE_CR_FD1_FCTA_B_TTC___NO__DISPLAY__CHOICE (0u)
#define VEHICLE_CR_FD1_FCTA_B_TTC__VALID_VALUE__CHOICE (1u)

#define VEHICLE_CR_FD1_ROLLING_COUNTER_CR_R_1___VALID_VALUE__CHOICE (0u)
#define VEHICLE_CR_FD1_ROLLING_COUNTER_CR_R_1___INVALID_VALUE__CHOICE (15u)

#define VEHICLE_CR_FD1_CHECKSUM_CR_R_2___VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_DIST_Y_LE___VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_DIST_X_LE___VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_ID_LE___VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_REL_VEL_X_LE___VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_REL_ACCEL_X_LE___VALID_VALUES__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_STS_LE___TARGET__INVALID__CHOICE (0u)
#define VEHICLE_CR_FD1_CR_OBJ_STS_LE___TARGET__VALID__CHOICE (1u)
#define VEHICLE_CR_FD1_CR_OBJ_STS_LE___NO_TARGET__CHOICE (2u)
#define VEHICLE_CR_FD1_CR_OBJ_STS_LE___RESERVED__CHOICE (3u)

#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_LE__INT__CHOICE (0u)
#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_LE__UNKNOWN__CHOICE (1u)
#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_LE___DRIVE__CHOICE (2u)
#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_LE___STOPPED__CHOICE (3u)
#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_LE___STAND__CHOICE (4u)
#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_LE__RESERVED__5_CHOICE (5u)
#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_LE__RESERVED__6_CHOICE (6u)
#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_LE__RESERVED__7_CHOICE (7u)

#define VEHICLE_CR_FD1_ROLLING_COUNTER_CR_R_2___VALID_VALUE__CHOICE (0u)
#define VEHICLE_CR_FD1_ROLLING_COUNTER_CR_R_2___INVALID_VALUE__CHOICE (15u)

#define VEHICLE_CR_FD1_CHECKSUM_CR_R_3___VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_DIST_Y_RI___VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_DIST_X_RI___VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_ID_RI___VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_REL_VEL_X_RI___VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_REL_ACCEL_X_RI___VALID_VALUES__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_STS_RI___TARGET__INVALID__CHOICE (0u)
#define VEHICLE_CR_FD1_CR_OBJ_STS_RI___TARGET__VALID__CHOICE (1u)
#define VEHICLE_CR_FD1_CR_OBJ_STS_RI___NO_TARGET__CHOICE (2u)
#define VEHICLE_CR_FD1_CR_OBJ_STS_RI___RESERVED__CHOICE (3u)

#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_RI__INT__CHOICE (0u)
#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_RI__UNKNOWN__CHOICE (1u)
#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_RI___DRIVE__CHOICE (2u)
#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_RI___STOPPED__CHOICE (3u)
#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_RI___STAND__CHOICE (4u)
#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_RI__RESERVED__5_CHOICE (5u)
#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_RI__RESERVED__6_CHOICE (6u)
#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_RI__RESERVED__7_CHOICE (7u)

#define VEHICLE_CR_FD1_ROLLING_COUNTER_CR_R_3___VALID_VALUE__CHOICE (0u)
#define VEHICLE_CR_FD1_ROLLING_COUNTER_CR_R_3___INVALID_VALUE__CHOICE (15u)

#define VEHICLE_CR_FD1_CHECKSUM_CR_R_4___VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_REL_ACCEL_Y_RI___VALID_VALUES__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_REL_ACCEL_Y_LE___VALID_VALUES__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_REL_VEL_Y_RI___VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_REL_VEL_Y_LE___VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_ROLLING_COUNTER_CR_R_4___VALID_VALUE__CHOICE (0u)
#define VEHICLE_CR_FD1_ROLLING_COUNTER_CR_R_4___INVALID_VALUE__CHOICE (15u)

#define VEHICLE_CR_FD1_CR_OBJ_DIST_X_STD_LE__VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_DIST_Y_STD_LE__VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_REL_VEL_X_STD_LE__VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_REL_VEL_Y_STD_LE__VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_R_ACCEL_X_STD_LE__VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_R_ACCEL_Y_STD_LE__VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_DIST_X_STD_RI__VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_DIST_Y_STD_RI__VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_REL_VEL_X_STD_RI__VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_REL_VEL_Y_STD_RI__VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_R_ACCEL_X_STD_RI__VALID_VALUE__CHOICE (0u)

#define VEHICLE_CR_FD1_CR_OBJ_R_ACCEL_Y_STD_RI__VALID_VALUE__CHOICE (0u)

#define VEHICLE_ACC_FD1_ACC_CR_INTERFACE___NO__RESPONSE__CHOICE (0u)
#define VEHICLE_ACC_FD1_ACC_CR_INTERFACE___RESPONSE__CHOICE (1u)

#define VEHICLE_DCT5_CURRENT_GEAR_VALID___INVALID___CHOICE (0u)
#define VEHICLE_DCT5_CURRENT_GEAR_VALID___VALID__CHOICE (1u)

#define VEHICLE_DCT5_CURRENT_GEAR___CURRENT_GEAR__N__OR__P___CHOICE (0u)
#define VEHICLE_DCT5_CURRENT_GEAR___CURRENT_GEAR__1___CHOICE (1u)
#define VEHICLE_DCT5_CURRENT_GEAR___CURRENT_GEAR__2___CHOICE (2u)
#define VEHICLE_DCT5_CURRENT_GEAR___CURRENT_GEAR__3___CHOICE (3u)
#define VEHICLE_DCT5_CURRENT_GEAR___CURRENT_GEAR__4___CHOICE (4u)
#define VEHICLE_DCT5_CURRENT_GEAR___CURRENT_GEAR__5___CHOICE (5u)
#define VEHICLE_DCT5_CURRENT_GEAR___CURRENT_GEAR__6___CHOICE (6u)
#define VEHICLE_DCT5_CURRENT_GEAR___CURRENT_GEAR__7___CHOICE (7u)
#define VEHICLE_DCT5_CURRENT_GEAR___CURRENT_GEAR__R___CHOICE (8u)
#define VEHICLE_DCT5_CURRENT_GEAR___CURRENT_GEAR__8___CHOICE (9u)
#define VEHICLE_DCT5_CURRENT_GEAR___CURRENT_GEAR__9___CHOICE (10u)
#define VEHICLE_DCT5_CURRENT_GEAR___RESERVED__CHOICE (11u)

#define VEHICLE_DCT5_TGS_LEVER___SELECT_LEVER_IN_POSITION__P___CHOICE (0u)
#define VEHICLE_DCT5_TGS_LEVER___RESERVED__1_CHOICE (1u)
#define VEHICLE_DCT5_TGS_LEVER___RESERVED__2_CHOICE (2u)
#define VEHICLE_DCT5_TGS_LEVER___RESERVED__3_CHOICE (3u)
#define VEHICLE_DCT5_TGS_LEVER___RESERVED__4_CHOICE (4u)
#define VEHICLE_DCT5_TGS_LEVER___SELECT_LEVER_IN_POSITION__D___CHOICE (5u)
#define VEHICLE_DCT5_TGS_LEVER___SELECT_LEVER_IN_POSITION__N___CHOICE (6u)
#define VEHICLE_DCT5_TGS_LEVER___SELECT_LEVER_IN_POSITION__R___CHOICE (7u)
#define VEHICLE_DCT5_TGS_LEVER___SELECT_LEVER_IN_POSITION__M___CHOICE (8u)
#define VEHICLE_DCT5_TGS_LEVER___RESERVED__9_CHOICE (9u)
#define VEHICLE_DCT5_TGS_LEVER___INVALID___CHOICE (15u)

#define VEHICLE_BCM1_TRUNK_STS___CLOSED__CHOICE (0u)
#define VEHICLE_BCM1_TRUNK_STS___OPEN__CHOICE (1u)

#define VEHICLE_BCM1_DRV_DOOR_STS___CLOSED__CHOICE (0u)
#define VEHICLE_BCM1_DRV_DOOR_STS___OPEN__CHOICE (1u)

#define VEHICLE_BCM1_LR_DOOR_STS___CLOSED__CHOICE (0u)
#define VEHICLE_BCM1_LR_DOOR_STS___OPEN__CHOICE (1u)

#define VEHICLE_BCM1_PASSENGER_DOOR_STS___CLOSED__CHOICE (0u)
#define VEHICLE_BCM1_PASSENGER_DOOR_STS___OPEN__CHOICE (1u)

#define VEHICLE_BCM1_RR_DOOR_STS___CLOSED__CHOICE (0u)
#define VEHICLE_BCM1_RR_DOOR_STS___OPEN__CHOICE (1u)

#define VEHICLE_BCM8_CHECKSUM_BCM8___VALID_VALUES__CHOICE (0u)

#define VEHICLE_BCM8_PAS_WORK_CMD__OFF__CHOICE (0u)
#define VEHICLE_BCM8_PAS_WORK_CMD__ON__CHOICE (1u)

#define VEHICLE_BCM8_R_VIEW_MIRROR_STS___UNFOLD__CHOICE (0u)
#define VEHICLE_BCM8_R_VIEW_MIRROR_STS___FOLD__CHOICE (1u)

#define VEHICLE_BCM8_WIPR_REQ_F_PBOX___WIPER__OFF__CHOICE (0u)
#define VEHICLE_BCM8_WIPR_REQ_F_PBOX___WIPER_ACTION_ONCE__CHOICE (1u)
#define VEHICLE_BCM8_WIPR_REQ_F_PBOX___SPEED1___LO___CHOICE (2u)
#define VEHICLE_BCM8_WIPR_REQ_F_PBOX___SPEED2___HI___CHOICE (3u)
#define VEHICLE_BCM8_WIPR_REQ_F_PBOX___RESERVED__CHOICE (4u)
#define VEHICLE_BCM8_WIPR_REQ_F_PBOX___INVALID__CHOICE (7u)

#define VEHICLE_BCM8_ROLLINGCOUNTER_BCM8___VALID_VALUE__CHOICE (0u)
#define VEHICLE_BCM8_ROLLINGCOUNTER_BCM8___INVALID_VALUE__CHOICE (15u)

#define VEHICLE_PEPS2_SYS_POWER_MOD__OFF__CHOICE (0u)
#define VEHICLE_PEPS2_SYS_POWER_MOD__ACC__RESERVED___CHOICE (1u)
#define VEHICLE_PEPS2_SYS_POWER_MOD__ON__CHOICE (2u)
#define VEHICLE_PEPS2_SYS_POWER_MOD___CRANK__CHOICE (3u)

#define VEHICLE_PEPS2_SYS_POWER_MOD_VLD___INVALID__CHOICE (0u)
#define VEHICLE_PEPS2_SYS_POWER_MOD_VLD___VALID__CHOICE (1u)

#define VEHICLE_AC2_AC_AMB_TEMP___VALID_VALUE__CHOICE (0u)
#define VEHICLE_AC2_AC_AMB_TEMP___INITIAL_VALUE__CHOICE (254u)
#define VEHICLE_AC2_AC_AMB_TEMP___INVALID__VALUE__CHOICE (255u)

#define VEHICLE_CSA1_R_TURN_LMP_SWT_STS__OFF__CHOICE (0u)
#define VEHICLE_CSA1_R_TURN_LMP_SWT_STS__ON__CHOICE (1u)

#define VEHICLE_CSA1_L_TURN_LMP_SWT_STS__OFF__CHOICE (0u)
#define VEHICLE_CSA1_L_TURN_LMP_SWT_STS__ON__CHOICE (1u)

#define VEHICLE_CSA2_CHECKSUM_CSA2___VALID_VALUES__CHOICE (0u)

#define VEHICLE_CSA2_STEER_WHEEL_ANG___VALID_VALUE__CHOICE (0u)
#define VEHICLE_CSA2_STEER_WHEEL_ANG___RESERVED__CHOICE (7801u)
#define VEHICLE_CSA2_STEER_WHEEL_ANG___INVALID__CHOICE (32767u)

#define VEHICLE_CSA2_STEER_WHEEL_ANG_SIGN___LEFT___POSITIVE___CHOICE (0u)
#define VEHICLE_CSA2_STEER_WHEEL_ANG_SIGN___RIGHT___NEGATIVE___CHOICE (1u)

#define VEHICLE_CSA2_STEER_WHEEL_SPD___VALID_VALUE__CHOICE (0u)
#define VEHICLE_CSA2_STEER_WHEEL_SPD___RESERVED__CHOICE (10161u)
#define VEHICLE_CSA2_STEER_WHEEL_SPD___INVALID__CHOICE (32767u)

#define VEHICLE_CSA2_STEER_WHEEL_SPD_SIGN___LEFT___POSITIVE___CHOICE (0u)
#define VEHICLE_CSA2_STEER_WHEEL_SPD_SIGN___RIGHT___NEGATIVE___CHOICE (1u)

#define VEHICLE_CSA2_SAS_STS__SAS__ANGLE__AND__SPEED__CORRECT__CHOICE (0u)
#define VEHICLE_CSA2_SAS_STS__SAS__NOT__CALIBRATED__CHOICE (1u)
#define VEHICLE_CSA2_SAS_STS___INTERMITTENT__ERROR__DETECTED__CHOICE (2u)
#define VEHICLE_CSA2_SAS_STS___PERMANENT__ERROR__DETECTED__CHOICE (3u)

#define VEHICLE_CSA2_ROLLINGCOUNTER_CSA2___VALID_VALUE__CHOICE (0u)
#define VEHICLE_CSA2_ROLLINGCOUNTER_CSA2___INVALID_VALUE__CHOICE (15u)

#define VEHICLE_ABM2_CHECK_SUM_ABM2___VALID_VALUES__CHOICE (0u)

#define VEHICLE_ABM2_VEH_LGT_ACCEL___VALID__VALUE__CHOICE (0u)
#define VEHICLE_ABM2_VEH_LGT_ACCEL___RESERVED__CHOICE (44067u)

#define VEHICLE_ABM2_VEH_LAT_ACCEL___VALID__VALUE__CHOICE (0u)
#define VEHICLE_ABM2_VEH_LAT_ACCEL___RESERVED__CHOICE (44067u)

#define VEHICLE_ABM2_VEH_YAW_RATE___VALID__VALUE__CHOICE (0u)
#define VEHICLE_ABM2_VEH_YAW_RATE___RESERVED__CHOICE (17442u)

#define VEHICLE_ABM2_VEH_LGT_ACCEL_VLD___INVALID__CHOICE (0u)
#define VEHICLE_ABM2_VEH_LGT_ACCEL_VLD___VALID__CHOICE (1u)

#define VEHICLE_ABM2_VEH_LAT_ACCEL_VLD___INVALID__CHOICE (0u)
#define VEHICLE_ABM2_VEH_LAT_ACCEL_VLD___VALID__CHOICE (1u)

#define VEHICLE_ABM2_VEH_DYN_YAW_RATE_VLD___INVALID__CHOICE (0u)
#define VEHICLE_ABM2_VEH_DYN_YAW_RATE_VLD___VALID__CHOICE (1u)

#define VEHICLE_ABM2_ROLLING_COUNTER_ABM2___VALID_VALUE__CHOICE (0u)
#define VEHICLE_ABM2_ROLLING_COUNTER_ABM2___INVALID_VALUE__CHOICE (15u)

#define VEHICLE_IP2_IP_VEH_TOT_DISTANCE__0_9999999_KM__CHOICE (0u)
#define VEHICLE_IP2_IP_VEH_TOT_DISTANCE___RESERVED__CHOICE (10000000u)
#define VEHICLE_IP2_IP_VEH_TOT_DISTANCE___INVALID__CHOICE (16777215u)

#define VEHICLE_IP2_IP_VEH_TOT_DISTANCE_VALID___INVALID__CHOICE (0u)
#define VEHICLE_IP2_IP_VEH_TOT_DISTANCE_VALID___VALID__CHOICE (1u)

#define VEHICLE_HUT_FD1_LCA_SWT_REQ__OFF__CHOICE (0u)
#define VEHICLE_HUT_FD1_LCA_SWT_REQ__ON__CHOICE (1u)

#define VEHICLE_HUT_FD1_RCTA_SWT_REQ__OFF__CHOICE (0u)
#define VEHICLE_HUT_FD1_RCTA_SWT_REQ__ON__CHOICE (1u)

#define VEHICLE_HUT_FD1_RCTA_BRK_SWT_REQ__OFF__CHOICE (0u)
#define VEHICLE_HUT_FD1_RCTA_BRK_SWT_REQ__ON__CHOICE (1u)

#define VEHICLE_HUT_FD1_RCW_SWT_REQ__OFF__CHOICE (0u)
#define VEHICLE_HUT_FD1_RCW_SWT_REQ__ON__CHOICE (1u)

#define VEHICLE_HUT_FD1_FCW_SNVTY_SET___NORMAL__CHOICE (0u)
#define VEHICLE_HUT_FD1_FCW_SNVTY_SET___HIGH_SENSITIVITY__CHOICE (1u)
#define VEHICLE_HUT_FD1_FCW_SNVTY_SET___LOW_SENSITIVITY__CHOICE (2u)
#define VEHICLE_HUT_FD1_FCW_SNVTY_SET___RESERVED__CHOICE (3u)

#define VEHICLE_HUT_FD1_DOW_SWT_REQ__OFF__CHOICE (0u)
#define VEHICLE_HUT_FD1_DOW_SWT_REQ__ON__CHOICE (1u)

#define VEHICLE_HUT_FD1_FCTA_SWT_REQ__OFF__CHOICE (0u)
#define VEHICLE_HUT_FD1_FCTA_SWT_REQ__ON__CHOICE (1u)

#define VEHICLE_HUT_FD1_FCTA_BRK_SWT_REQ__OFF__CHOICE (0u)
#define VEHICLE_HUT_FD1_FCTA_BRK_SWT_REQ__ON__CHOICE (1u)

#define VEHICLE_HUT34_TIME_HOUR___VALID_HOUR__CHOICE (0u)
#define VEHICLE_HUT34_TIME_HOUR___RESERVED__CHOICE (24u)
#define VEHICLE_HUT34_TIME_HOUR___INVALID__CHOICE (31u)

#define VEHICLE_HUT34_TIME_MINUTES___VALID_MINUTE__CHOICE (0u)
#define VEHICLE_HUT34_TIME_MINUTES___RESERVED__CHOICE (60u)
#define VEHICLE_HUT34_TIME_MINUTES___INVALID__CHOICE (63u)

#define VEHICLE_HUT34_TIME_SECOND___VALID_SECOND__CHOICE (0u)
#define VEHICLE_HUT34_TIME_SECOND___RESERVED__CHOICE (60u)
#define VEHICLE_HUT34_TIME_SECOND___INVALID__CHOICE (63u)

#define VEHICLE_HUT34_TIME_YEAR_LEFT___VALID_YEAR__CHOICE (0u)
#define VEHICLE_HUT34_TIME_YEAR_LEFT___RESERVED__CHOICE (10u)
#define VEHICLE_HUT34_TIME_YEAR_LEFT___INVALID__CHOICE (15u)

#define VEHICLE_HUT34_TIME_YEAR_RIGHT___VALID_YEAR__CHOICE (0u)
#define VEHICLE_HUT34_TIME_YEAR_RIGHT___RESERVED__CHOICE (10u)
#define VEHICLE_HUT34_TIME_YEAR_RIGHT___INVALID__CHOICE (15u)

#define VEHICLE_HUT34_TIME_MONTH___INVALID__CHOICE (0u)
#define VEHICLE_HUT34_TIME_MONTH___VALID_MONTH__CHOICE (1u)
#define VEHICLE_HUT34_TIME_MONTH___RESERVED__CHOICE (13u)

#define VEHICLE_HUT34_TIME_DAY___INVALID__CHOICE (0u)
#define VEHICLE_HUT34_TIME_DAY___VALID_DAY__CHOICE (1u)

#define VEHICLE_ESP_FD2_CHECK_SUM_ESP2___VALID_VALUES__CHOICE (0u)

#define VEHICLE_ESP_FD2_VEH_STANDSTILL___NOT_STANDSTILL__CHOICE (0u)
#define VEHICLE_ESP_FD2_VEH_STANDSTILL___STANDSTILL__CHOICE (1u)
#define VEHICLE_ESP_FD2_VEH_STANDSTILL___INVALID__SHORT_UNAVAILABILITY__MA_X_3S___CHOICE (2u)
#define VEHICLE_ESP_FD2_VEH_STANDSTILL___RESERVED__CHOICE (3u)

#define VEHICLE_ESP_FD2_NO_BRK_FORCE__E_XIST_BRAKE_FORCE__CHOICE (0u)
#define VEHICLE_ESP_FD2_NO_BRK_FORCE___NO_BRAKE_FORCE__CHOICE (1u)

#define VEHICLE_ESP_FD2_BRK_DSK_OVRHEATD___NOT_HIGH__CHOICE (0u)
#define VEHICLE_ESP_FD2_BRK_DSK_OVRHEATD___TEMP_TOO_HIGH__CHOICE (1u)

#define VEHICLE_ESP_FD2_ESP_DIAG_ACTV__ESP_DIAGNOSIS_IS_INACTIVE__CHOICE (0u)
#define VEHICLE_ESP_FD2_ESP_DIAG_ACTV__ESP_DIAGNOSIS_IS_ACTIVE__CHOICE (1u)

#define VEHICLE_ESP_FD2_AB_AACTV___NOT_ACTIVE__CHOICE (0u)
#define VEHICLE_ESP_FD2_AB_AACTV___ACTIVE__CHOICE (1u)

#define VEHICLE_ESP_FD2_AB_AAVAILABLE___UNUSABLE__CHOICE (0u)
#define VEHICLE_ESP_FD2_AB_AAVAILABLE___USABLE__CHOICE (1u)

#define VEHICLE_ESP_FD2_HDC_CTRL__OFF__CHOICE (0u)
#define VEHICLE_ESP_FD2_HDC_CTRL___ON_ACTIVE_BRAKING__CHOICE (1u)
#define VEHICLE_ESP_FD2_HDC_CTRL___ON_NOT_ACTIVE_BRAKING__CHOICE (2u)
#define VEHICLE_ESP_FD2_HDC_CTRL___RESERVED__CHOICE (3u)

#define VEHICLE_ESP_FD2_ROLLING_COUNTER_ESP2___VALID_VALUE__CHOICE (0u)
#define VEHICLE_ESP_FD2_ROLLING_COUNTER_ESP2___INVALID_VALUE__CHOICE (15u)

#define VEHICLE_ESP_FD2_CHECK_SUM_ESP1___VALID_VALUES__CHOICE (0u)

#define VEHICLE_ESP_FD2_ESP_FAIL_STS___NO_FAILURE__CHOICE (0u)
#define VEHICLE_ESP_FD2_ESP_FAIL_STS___FAILURE__CHOICE (1u)

#define VEHICLE_ESP_FD2_ESP_FUNC_OFF_STS___AVAILABLE__ON__CHOICE (0u)
#define VEHICLE_ESP_FD2_ESP_FUNC_OFF_STS___UNAVAILABLE__OFF__CHOICE (1u)

#define VEHICLE_ESP_FD2_BTC_ACTV___NOT_ACTIVE__CHOICE (0u)
#define VEHICLE_ESP_FD2_BTC_ACTV___ACTIVE__CHOICE (1u)

#define VEHICLE_ESP_FD2_PTC_ACTV___NOT_ACTIVE__CHOICE (0u)
#define VEHICLE_ESP_FD2_PTC_ACTV___ACTIVE__CHOICE (1u)

#define VEHICLE_ESP_FD2_MSR_ACTV___NOT_ACTIVE__CHOICE (0u)
#define VEHICLE_ESP_FD2_MSR_ACTV___ACTIVE__CHOICE (1u)

#define VEHICLE_ESP_FD2_VDC_ACTV___NOT_ACTIVE__CHOICE (0u)
#define VEHICLE_ESP_FD2_VDC_ACTV___ACTIVE__CHOICE (1u)

#define VEHICLE_ESP_FD2_ESP_MASTER_CYL_BRK_PRESS_VLD___INVALID__CHOICE (0u)
#define VEHICLE_ESP_FD2_ESP_MASTER_CYL_BRK_PRESS_VLD___VALID__CHOICE (1u)

#define VEHICLE_ESP_FD2_ESP_MASTER_CYL_BRK_PRESS___VALID_VALUE__CHOICE (0u)
#define VEHICLE_ESP_FD2_ESP_MASTER_CYL_BRK_PRESS___RESERVED__CHOICE (14961u)

#define VEHICLE_ESP_FD2_ROLLING_COUNTER_ESP1___VALID_VALUE__CHOICE (0u)
#define VEHICLE_ESP_FD2_ROLLING_COUNTER_ESP1___INVALID_VALUE__CHOICE (15u)

#define VEHICLE_ESP_FD2_CHECK_SUM_ABS3___VALID_VALUES__CHOICE (0u)

#define VEHICLE_ESP_FD2_ABS_FAIL_STS___NO_FAILURE__CHOICE (0u)
#define VEHICLE_ESP_FD2_ABS_FAIL_STS___FAILURE__CHOICE (1u)

#define VEHICLE_ESP_FD2_VEH_SPD_VLD___INVALID__CHOICE (0u)
#define VEHICLE_ESP_FD2_VEH_SPD_VLD___VALID__CHOICE (1u)

#define VEHICLE_ESP_FD2_VEH_SPD___VALID_VALUES__CHOICE (0u)
#define VEHICLE_ESP_FD2_VEH_SPD___RESERVED__CHOICE (5334u)

#define VEHICLE_ESP_FD2_ABS_ACTV___NOT_ACTIVE__CHOICE (0u)
#define VEHICLE_ESP_FD2_ABS_ACTV___ACTIVE__CHOICE (1u)

#define VEHICLE_ESP_FD2_ROLLING_COUNTER_ABS3___VALID_VALUE__CHOICE (0u)
#define VEHICLE_ESP_FD2_ROLLING_COUNTER_ABS3___INVALID_VALUE__CHOICE (15u)

#define VEHICLE_ESP_FD3_CHECK_SUM_ABS1___VALID_VALUES__CHOICE (0u)

#define VEHICLE_ESP_FD3_FL_WHEEL_DRIVE_DIRECTION___INVALID__CHOICE (0u)
#define VEHICLE_ESP_FD3_FL_WHEEL_DRIVE_DIRECTION___FORWARD__CHOICE (1u)
#define VEHICLE_ESP_FD3_FL_WHEEL_DRIVE_DIRECTION___BACKWARD__CHOICE (2u)
#define VEHICLE_ESP_FD3_FL_WHEEL_DRIVE_DIRECTION___STOP__CHOICE (3u)

#define VEHICLE_ESP_FD3_FL_WHEEL_SPD_VLD___INVALID__CHOICE (0u)
#define VEHICLE_ESP_FD3_FL_WHEEL_SPD_VLD___VALID__CHOICE (1u)

#define VEHICLE_ESP_FD3_FL_WHEEL_SPD___VALID_VALUES__CHOICE (0u)
#define VEHICLE_ESP_FD3_FL_WHEEL_SPD___RESERVED__CHOICE (5334u)

#define VEHICLE_ESP_FD3_FR_WHEEL_DRIVE_DIRECTION___INVALID__CHOICE (0u)
#define VEHICLE_ESP_FD3_FR_WHEEL_DRIVE_DIRECTION___FORWARD__CHOICE (1u)
#define VEHICLE_ESP_FD3_FR_WHEEL_DRIVE_DIRECTION___BACKWARD__CHOICE (2u)
#define VEHICLE_ESP_FD3_FR_WHEEL_DRIVE_DIRECTION___STOP__CHOICE (3u)

#define VEHICLE_ESP_FD3_FR_WHEEL_SPD_VLD___INVALID__CHOICE (0u)
#define VEHICLE_ESP_FD3_FR_WHEEL_SPD_VLD___VALID__CHOICE (1u)

#define VEHICLE_ESP_FD3_FR_WHEEL_SPD___VALID_VALUES__CHOICE (0u)
#define VEHICLE_ESP_FD3_FR_WHEEL_SPD___RESERVED__CHOICE (5334u)

#define VEHICLE_ESP_FD3_ROLLING_COUNTER_ABS1___VALID_VALUE__CHOICE (0u)
#define VEHICLE_ESP_FD3_ROLLING_COUNTER_ABS1___INVALID_VALUE__CHOICE (15u)

#define VEHICLE_ESP_FD3_EPB_STS___RELEASED__CHOICE (0u)
#define VEHICLE_ESP_FD3_EPB_STS___CLOSED__CHOICE (1u)
#define VEHICLE_ESP_FD3_EPB_STS___IN_PROGRESS__CHOICE (2u)
#define VEHICLE_ESP_FD3_EPB_STS__UNKNOWN__CHOICE (3u)

#define VEHICLE_ESP_FD3_EPB_ERR_STS___UNDEFINED__CHOICE (0u)
#define VEHICLE_ESP_FD3_EPB_ERR_STS___NO__ERROR__CHOICE (1u)
#define VEHICLE_ESP_FD3_EPB_ERR_STS___ERROR__CHOICE (2u)
#define VEHICLE_ESP_FD3_EPB_ERR_STS___DIAGNOSIS__CHOICE (3u)

#define VEHICLE_ESP_FD3_CHECK_SUM_ABS2___VALID_VALUES__CHOICE (0u)

#define VEHICLE_ESP_FD3_RL_WHEEL_DRIVE_DIRECTION___INVALID__CHOICE (0u)
#define VEHICLE_ESP_FD3_RL_WHEEL_DRIVE_DIRECTION___FORWARD__CHOICE (1u)
#define VEHICLE_ESP_FD3_RL_WHEEL_DRIVE_DIRECTION___BACKWARD__CHOICE (2u)
#define VEHICLE_ESP_FD3_RL_WHEEL_DRIVE_DIRECTION___STOP__CHOICE (3u)

#define VEHICLE_ESP_FD3_RL_WHEEL_SPD_VLD___INVALID__CHOICE (0u)
#define VEHICLE_ESP_FD3_RL_WHEEL_SPD_VLD___VALID__CHOICE (1u)

#define VEHICLE_ESP_FD3_RL_WHEEL_SPD___VALID_VALUES__CHOICE (0u)
#define VEHICLE_ESP_FD3_RL_WHEEL_SPD___RESERVED__CHOICE (5334u)

#define VEHICLE_ESP_FD3_RR_WHEEL_DRIVE_DIRECTION___INVALID__CHOICE (0u)
#define VEHICLE_ESP_FD3_RR_WHEEL_DRIVE_DIRECTION___FORWARD__CHOICE (1u)
#define VEHICLE_ESP_FD3_RR_WHEEL_DRIVE_DIRECTION___BACKWARD__CHOICE (2u)
#define VEHICLE_ESP_FD3_RR_WHEEL_DRIVE_DIRECTION___STOP__CHOICE (3u)

#define VEHICLE_ESP_FD3_RR_WHEEL_SPD_VLD___INVALID__CHOICE (0u)
#define VEHICLE_ESP_FD3_RR_WHEEL_SPD_VLD___VALID__CHOICE (1u)

#define VEHICLE_ESP_FD3_RR_WHEEL_SPD___VALID_VALUES__CHOICE (0u)
#define VEHICLE_ESP_FD3_RR_WHEEL_SPD___RESERVED__CHOICE (5334u)

#define VEHICLE_ESP_FD3_ROLLING_COUNTER_ABS2___VALID_VALUE__CHOICE (0u)
#define VEHICLE_ESP_FD3_ROLLING_COUNTER_ABS2___INVALID_VALUE__CHOICE (15u)

#define VEHICLE_ECM_FD1_HCU_POWERTRAIN_STS_P0___SLEEP__CHOICE (0u)
#define VEHICLE_ECM_FD1_HCU_POWERTRAIN_STS_P0___INITIALIZE__MODE__CHOICE (1u)
#define VEHICLE_ECM_FD1_HCU_POWERTRAIN_STS_P0__POWER_UP__CHOICE (2u)
#define VEHICLE_ECM_FD1_HCU_POWERTRAIN_STS_P0__POWER_DOWN__CHOICE (3u)
#define VEHICLE_ECM_FD1_HCU_POWERTRAIN_STS_P0___CELLPHONE_APP__CHOICE (4u)
#define VEHICLE_ECM_FD1_HCU_POWERTRAIN_STS_P0__RUN__CHOICE (5u)
#define VEHICLE_ECM_FD1_HCU_POWERTRAIN_STS_P0___CHARGING__CHOICE (6u)
#define VEHICLE_ECM_FD1_HCU_POWERTRAIN_STS_P0___ERROR__MODE__CHOICE (7u)
#define VEHICLE_ECM_FD1_HCU_POWERTRAIN_STS_P0___LIMPHOME__CHOICE (8u)
#define VEHICLE_ECM_FD1_HCU_POWERTRAIN_STS_P0___EMERGENCY__MODE__CHOICE (9u)
#define VEHICLE_ECM_FD1_HCU_POWERTRAIN_STS_P0___SERVICE__MODE__CHOICE (10u)
#define VEHICLE_ECM_FD1_HCU_POWERTRAIN_STS_P0___PREPARE__SLEEP__CHOICE (11u)
#define VEHICLE_ECM_FD1_HCU_POWERTRAIN_STS_P0___READY__CHOICE (12u)
#define VEHICLE_ECM_FD1_HCU_POWERTRAIN_STS_P0___RESERVED__CHOICE (13u)

#define VEHICLE_ECM_FD1_BRK_PEDAL_STS___NOT_PRESSED__CHOICE (0u)
#define VEHICLE_ECM_FD1_BRK_PEDAL_STS___PRESSED__CHOICE (1u)
#define VEHICLE_ECM_FD1_BRK_PEDAL_STS___RESERVED__CHOICE (2u)
#define VEHICLE_ECM_FD1_BRK_PEDAL_STS___ERROR__CHOICE (3u)

#define VEHICLE_ECM_FD1_ENG_SPD___VALID_VALUES___CHOICE (0u)

#define VEHICLE_ECM_FD1_ENG_SPD_VLDTY___INVALID__CHOICE (0u)
#define VEHICLE_ECM_FD1_ENG_SPD_VLDTY___VALID__CHOICE (1u)
#define VEHICLE_ECM_FD1_ENG_SPD_VLDTY___INITIAL_VALUE__CHOICE (2u)
#define VEHICLE_ECM_FD1_ENG_SPD_VLDTY___RESERVED__CHOICE (3u)

#define VEHICLE_ECM_FD2_ACCEL_PEDL_POSN_DIAGC___VALID_VALUES___CHOICE (0u)

#define VEHICLE_ECM_FD2_ACCEL_PEDAL_POSN_VLDTY___INVALID__CHOICE (0u)
#define VEHICLE_ECM_FD2_ACCEL_PEDAL_POSN_VLDTY___VALID__CHOICE (1u)
#define VEHICLE_ECM_FD2_ACCEL_PEDAL_POSN_VLDTY___INIT_VALUE__CHOICE (2u)
#define VEHICLE_ECM_FD2_ACCEL_PEDAL_POSN_VLDTY___RESERVED__CHOICE (3u)

#define VEHICLE_ECM_FD2_ENG_STATE___STOPPED__CHOICE (0u)
#define VEHICLE_ECM_FD2_ENG_STATE___CRANKING__CHOICE (1u)
#define VEHICLE_ECM_FD2_ENG_STATE___RUNNING__CHOICE (2u)
#define VEHICLE_ECM_FD2_ENG_STATE___STALLING__CHOICE (3u)

#define VEHICLE_IBOOSTER_FD2_IB_BRK_PEDAL_APPLD___NOT_APPLIED__CHOICE (0u)
#define VEHICLE_IBOOSTER_FD2_IB_BRK_PEDAL_APPLD___APPLIED__CHOICE (1u)

#define VEHICLE_IBOOSTER_FD2_IB_BRK_PEDAL_APPLD_VLD___NOT_INITIALIZED__CHOICE (0u)
#define VEHICLE_IBOOSTER_FD2_IB_BRK_PEDAL_APPLD_VLD___NORMAL__CHOICE (1u)
#define VEHICLE_IBOOSTER_FD2_IB_BRK_PEDAL_APPLD_VLD___FAULTY__CHOICE (2u)
#define VEHICLE_IBOOSTER_FD2_IB_BRK_PEDAL_APPLD_VLD___RESERVED__CHOICE (3u)

#define VEHICLE_EBOOSTER_FD1_EB_VEH_STANDSTILL___NOT_STANDSTILL__CHOICE (0u)
#define VEHICLE_EBOOSTER_FD1_EB_VEH_STANDSTILL___STANDSTILL__CHOICE (1u)
#define VEHICLE_EBOOSTER_FD1_EB_VEH_STANDSTILL___INVALID__SHORT_UNAVAILABILITY__MA_X_3S___CHOICE (2u)
#define VEHICLE_EBOOSTER_FD1_EB_VEH_STANDSTILL___RESERVED__CHOICE (3u)

#define VEHICLE_EBOOSTER_FD1_EB_AEBIB_ACTV___NOT_ACTIVE__CHOICE (0u)
#define VEHICLE_EBOOSTER_FD1_EB_AEBIB_ACTV___ACTIVE__CHOICE (1u)

#define VEHICLE_EBOOSTER_FD1_EB_AEBBA_ACTV___NOT_ACTIVE__CHOICE (0u)
#define VEHICLE_EBOOSTER_FD1_EB_AEBBA_ACTV___ACTIVE__CHOICE (1u)

#define VEHICLE_EBOOSTER_FD1_EB_AEB_AVAILABLE___UNUSABLE__CHOICE (0u)
#define VEHICLE_EBOOSTER_FD1_EB_AEB_AVAILABLE___USABLE__CHOICE (1u)

#define VEHICLE_EBOOSTER_FD1_EB_ABP_AVAILABLE___UNUSABLE__CHOICE (0u)
#define VEHICLE_EBOOSTER_FD1_EB_ABP_AVAILABLE___USABLE__CHOICE (1u)

#define VEHICLE_EBOOSTER_FD1_EB_ABP_ACTV___NOT_ACTIVE__CHOICE (0u)
#define VEHICLE_EBOOSTER_FD1_EB_ABP_ACTV___ACTIVE__CHOICE (1u)

#define VEHICLE_EBOOSTER_FD1_EB_CTA_BRK_AVAILABLE___NOT__AVAILABLE__CHOICE (0u)
#define VEHICLE_EBOOSTER_FD1_EB_CTA_BRK_AVAILABLE___AVAILABLE__CHOICE (1u)

#define VEHICLE_EBOOSTER_FD1_EB_CTA_ACTV___NOT_ACTIVE__CHOICE (0u)
#define VEHICLE_EBOOSTER_FD1_EB_CTA_ACTV___ACTIVE__CHOICE (1u)

#define VEHICLE_ADAS_AD1_SYNC_TYPE___VALID_VALUE__CHOICE (0u)

#define VEHICLE_ADAS_AD1_SYNC_CRC___VALID_VALUE__CHOICE (0u)

#define VEHICLE_ADAS_AD1_SYNC_TIME_DOMAIN___VALID_VALUE__CHOICE (0u)

#define VEHICLE_ADAS_AD1_SYNC_COUNTER___VALID_VALUE__CHOICE (0u)

#define VEHICLE_ADAS_AD1_SYNC_RESD___VALID_VALUE__CHOICE (0u)

#define VEHICLE_ADAS_AD1_SYNC_SGW___VALID_VALUE__CHOICE (0u)

#define VEHICLE_ADAS_AD1_SYNC_OVS___VALID_VALUE__CHOICE (0u)

#define VEHICLE_ADAS_AD1_SYNC_SYNC_TIME___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_OBJ_REL_ACCEL_Y_LE___VALID_VALUES__CHOICE (0u)

#define VEHICLE_RSDS_FD1_CHECKSUM_RSDS_R_2___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_BRK_ERR_STS___NO_ERROR___CHOICE (0u)
#define VEHICLE_RSDS_FD1_RSDS_BRK_ERR_STS___ERROR___CHOICE (1u)

#define VEHICLE_RSDS_FD1_RSDS_BRKG_REQ___NO__REQUEST__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RSDS_BRKG_REQ___REQUEST__CHOICE (1u)

#define VEHICLE_RSDS_FD1_RSDS_BRKG_REQ_VAL___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_LED_LIGHT_REQ_LEFT___NO_WARNING__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RSDS_LED_LIGHT_REQ_LEFT___WARNING_LEVEL_1____LED_______________CHOICE (1u)
#define VEHICLE_RSDS_FD1_RSDS_LED_LIGHT_REQ_LEFT___WARNING_LEVEL_2____LED_2_HZ______________CHOICE (2u)
#define VEHICLE_RSDS_FD1_RSDS_LED_LIGHT_REQ_LEFT___WARNING_LEVEL_3____LED_4_HZ______________CHOICE (3u)

#define VEHICLE_RSDS_FD1_RSDS_LED_LIGHT_REQ_RIGHT___NO_WARNING__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RSDS_LED_LIGHT_REQ_RIGHT___WARNING_LEVEL_1____LED_______________CHOICE (1u)
#define VEHICLE_RSDS_FD1_RSDS_LED_LIGHT_REQ_RIGHT___WARNING_LEVEL_2____LED_2_HZ______________CHOICE (2u)
#define VEHICLE_RSDS_FD1_RSDS_LED_LIGHT_REQ_RIGHT___WARNING_LEVEL_3____LED_4_HZ______________CHOICE (3u)

#define VEHICLE_RSDS_FD1_RSDS_IP_SOUND_REQ___NO_WARNING__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RSDS_IP_SOUND_REQ___WARNING_LEVEL_1____2_HZ______________CHOICE (1u)
#define VEHICLE_RSDS_FD1_RSDS_IP_SOUND_REQ___WARNING_LEVEL_2____4_HZ______________CHOICE (2u)
#define VEHICLE_RSDS_FD1_RSDS_IP_SOUND_REQ___WARNING_LEVEL_3__________________CHOICE (3u)

#define VEHICLE_RSDS_FD1_BSD_LCA_WARNING_REQ_RIGHT___NO_WARNING__CHOICE (0u)
#define VEHICLE_RSDS_FD1_BSD_LCA_WARNING_REQ_RIGHT___WARNING_LEVEL_1__CHOICE (1u)
#define VEHICLE_RSDS_FD1_BSD_LCA_WARNING_REQ_RIGHT___WARNING_LEVEL_2__CHOICE (2u)
#define VEHICLE_RSDS_FD1_BSD_LCA_WARNING_REQ_RIGHT___RESERVED__CHOICE (3u)

#define VEHICLE_RSDS_FD1_BSD_LCA_WARNING_REQLEFT___NO_WARNING__CHOICE (0u)
#define VEHICLE_RSDS_FD1_BSD_LCA_WARNING_REQLEFT___WARNING_LEVEL_1__CHOICE (1u)
#define VEHICLE_RSDS_FD1_BSD_LCA_WARNING_REQLEFT___WARNING_LEVEL_2__CHOICE (2u)
#define VEHICLE_RSDS_FD1_BSD_LCA_WARNING_REQLEFT___RESERVED__CHOICE (3u)

#define VEHICLE_RSDS_FD1_DOW_WARNING_REQ_RIGHT___NO_WARNING__CHOICE (0u)
#define VEHICLE_RSDS_FD1_DOW_WARNING_REQ_RIGHT___WARNING_LEVEL_1__CHOICE (1u)
#define VEHICLE_RSDS_FD1_DOW_WARNING_REQ_RIGHT___WARNING_LEVEL_2__CHOICE (2u)
#define VEHICLE_RSDS_FD1_DOW_WARNING_REQ_RIGHT___RESERVED__CHOICE (3u)

#define VEHICLE_RSDS_FD1_DOW_WARNING_REQLEFT___NO_WARNING__CHOICE (0u)
#define VEHICLE_RSDS_FD1_DOW_WARNING_REQLEFT___WARNING_LEVEL_1__CHOICE (1u)
#define VEHICLE_RSDS_FD1_DOW_WARNING_REQLEFT___WARNING_LEVEL_2__CHOICE (2u)
#define VEHICLE_RSDS_FD1_DOW_WARNING_REQLEFT___RESERVED__CHOICE (3u)

#define VEHICLE_RSDS_FD1_RSDS_RCW_TRIGGER___NO_WARNING__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RSDS_RCW_TRIGGER__RCW_LEVEL_1__CHOICE (1u)
#define VEHICLE_RSDS_FD1_RSDS_RCW_TRIGGER__RCW_LEVEL_2__CHOICE (2u)
#define VEHICLE_RSDS_FD1_RSDS_RCW_TRIGGER___RESERVED__CHOICE (3u)

#define VEHICLE_RSDS_FD1_RSDS_ERR_STS___NO__ERROR__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RSDS_ERR_STS___ERROR__CHOICE (1u)

#define VEHICLE_RSDS_FD1_RSDS_BRKG_TRIG___NOT_TIRGGERED__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RSDS_BRKG_TRIG___TRIGGERED__CHOICE (1u)

#define VEHICLE_RSDS_FD1_RSDS_BLI_STS___NO__BLINDNESS__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RSDS_BLI_STS___BLINDNESS__CHOICE (1u)

#define VEHICLE_RSDS_FD1_RSDS_TRAILER_STS___NONE__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RSDS_TRAILER_STS___TRAILER__CHOICE (1u)

#define VEHICLE_RSDS_FD1_RSDS_LCA_RESP__OFF__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RSDS_LCA_RESP__ON__CHOICE (1u)

#define VEHICLE_RSDS_FD1_RSDS_DOW_RESP__OFF__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RSDS_DOW_RESP__ON__CHOICE (1u)

#define VEHICLE_RSDS_FD1_RSDS_RCW_RESP__OFF__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RSDS_RCW_RESP__ON__CHOICE (1u)

#define VEHICLE_RSDS_FD1_RSDS_RCTA_RESP__OFF__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RSDS_RCTA_RESP__ON__CHOICE (1u)

#define VEHICLE_RSDS_FD1_RSDS_RCTA_BRK_RESP__OFF__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RSDS_RCTA_BRK_RESP__ON__CHOICE (1u)

#define VEHICLE_RSDS_FD1_RSDS_CTA_ACTV___NOT_ACTIVE__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RSDS_CTA_ACTV___ACTIVE__CHOICE (1u)

#define VEHICLE_RSDS_FD1_RCTA_WARNING_REQ_RIGHT___NO_WARNING__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RCTA_WARNING_REQ_RIGHT___WARNING_LEVEL_2__CHOICE (1u)

#define VEHICLE_RSDS_FD1_RCTA_WARNING_REQ_LEFT___NO_WARNING__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RCTA_WARNING_REQ_LEFT___WARNING_LEVEL_2__CHOICE (1u)

#define VEHICLE_RSDS_FD1_ROLLING_COUNTER_RSDS_R_2___VALID_VALUE__CHOICE (0u)
#define VEHICLE_RSDS_FD1_ROLLING_COUNTER_RSDS_R_2___INVALID_VALUE__CHOICE (15u)

#define VEHICLE_RSDS_FD1_CHECKSUM_RSDS_R_3___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_LE_TAR_STS___TARGET__INVALID__CHOICE (0u)
#define VEHICLE_RSDS_FD1_LE_TAR_STS___TARGET__VALID__CHOICE (1u)
#define VEHICLE_RSDS_FD1_LE_TAR_STS___NO_TARGET__CHOICE (2u)
#define VEHICLE_RSDS_FD1_LE_TAR_STS___RESERVED__CHOICE (3u)

#define VEHICLE_RSDS_FD1_OBJ_ID_LE___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_OBJ_LGT_POSN_CURV_LE___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_OBJ_LAT_POSN_CURV_LE___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_OBJ_LGT_SPD_CURV_LE___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_OBJ_LAT_SPD_CURV_LE___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_OBJ_TTC_LE___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_ROLLING_COUNTER_RSDS_R_3___VALID_VALUE__CHOICE (0u)
#define VEHICLE_RSDS_FD1_ROLLING_COUNTER_RSDS_R_3___INVALID_VALUE__CHOICE (15u)

#define VEHICLE_RSDS_FD1_CHECKSUM_RSDS_R_4___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_OBJ_LEN_LE___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_OBJ_WIDTH_LE___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_OBJ_STATY_LE___STATIONARY__CHOICE (0u)
#define VEHICLE_RSDS_FD1_OBJ_STATY_LE___NOT__STATIONARY__CHOICE (1u)

#define VEHICLE_RSDS_FD1_ZONE_IND_LE___NO__OBJECT_IN_THE__ZONE__CHOICE (0u)
#define VEHICLE_RSDS_FD1_ZONE_IND_LE___OBJECT_IN_BSW__ZONE__CHOICE (1u)
#define VEHICLE_RSDS_FD1_ZONE_IND_LE___OBJECT_IN_CVW__ZONE__CHOICE (2u)
#define VEHICLE_RSDS_FD1_ZONE_IND_LE___OBJECT_IN_THE__SHARED__ZONE__CHOICE (3u)

#define VEHICLE_RSDS_FD1_OBJ_STS_LE___INVALID__CHOICE (0u)
#define VEHICLE_RSDS_FD1_OBJ_STS_LE___NEW______________CHOICE (1u)
#define VEHICLE_RSDS_FD1_OBJ_STS_LE___MATURE__________________CHOICE (2u)
#define VEHICLE_RSDS_FD1_OBJ_STS_LE___COASTED______________CHOICE (3u)

#define VEHICLE_RSDS_FD1_OBJ_RIN_RI___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_OBJ_WIDTH_RI___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_OBJ_STATY_RI___STATIONARY__CHOICE (0u)
#define VEHICLE_RSDS_FD1_OBJ_STATY_RI___NOT__STATIONARY__CHOICE (1u)

#define VEHICLE_RSDS_FD1_ZONE_IND_RI___NO__OBJECT_IN_THE__ZONE__CHOICE (0u)
#define VEHICLE_RSDS_FD1_ZONE_IND_RI___OBJECT_IN_BSW__ZONE__CHOICE (1u)
#define VEHICLE_RSDS_FD1_ZONE_IND_RI___OBJECT_IN_CVW__ZONE__CHOICE (2u)
#define VEHICLE_RSDS_FD1_ZONE_IND_RI___OBJECT_IN_THE__SHARED__ZONE__CHOICE (3u)

#define VEHICLE_RSDS_FD1_OBJ_STS_RI___INVALID__CHOICE (0u)
#define VEHICLE_RSDS_FD1_OBJ_STS_RI___NEW__CHOICE (1u)
#define VEHICLE_RSDS_FD1_OBJ_STS_RI___MATURE__CHOICE (2u)
#define VEHICLE_RSDS_FD1_OBJ_STS_RI___COASTED__CHOICE (3u)

#define VEHICLE_RSDS_FD1_ROLLING_COUNTER_RSDS_R_4___VALID_VALUE__CHOICE (0u)
#define VEHICLE_RSDS_FD1_ROLLING_COUNTER_RSDS_R_4___INVALID_VALUE__CHOICE (15u)

#define VEHICLE_RSDS_FD1_CHECKSUM_RSDS_R_5___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RI_TAR_STS___TARGET__INVALID__CHOICE (0u)
#define VEHICLE_RSDS_FD1_RI_TAR_STS___TARGET__VALID__CHOICE (1u)
#define VEHICLE_RSDS_FD1_RI_TAR_STS___NO_TARGET__CHOICE (2u)
#define VEHICLE_RSDS_FD1_RI_TAR_STS___RESERVED__CHOICE (3u)

#define VEHICLE_RSDS_FD1_OBJ_ID_RI___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_OBJ_LGT_POSN_CURV_RI___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_OBJ_LAT_POSN_CURV_RI___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_OBJ_LGT_SPD_CURV_RI___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_OBJ_LAT_SPD_CURV_RI___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_OBJ_TTC_RI___VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_ROLLING_COUNTER_RSDS_R_5___VALID_VALUE__CHOICE (0u)
#define VEHICLE_RSDS_FD1_ROLLING_COUNTER_RSDS_R_5___INVALID_VALUE__CHOICE (15u)

#define VEHICLE_RSDS_FD1_RSDS_OBJ_DIST_X_STD_LE__VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_OBJ_DIST_Y_STD_LE__VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_OBJ_REL_VEL_X_STD_LE__VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_OBJ_REL_VEL_Y_STD_LE__VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_OBJ_R_ACCEL_X_STD_LE__VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_OBJ_R_ACCEL_Y_STD_LE__VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_OBJ_DIST_X_STD_RI__VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_OBJ_DIST_Y_STD_RI__VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_OBJ_REL_VEL_X_STD_RI__VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_OBJ_REL_VEL_Y_STD_RI__VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_OBJ_R_ACCEL_X_STD_RI__VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_OBJ_R_ACCEL_Y_STD_RI__VALID_VALUE__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_OBJ_REL_ACCEL_X_LE___VALID_VALUES__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_OBJ_REL_ACCEL_X_RI___VALID_VALUES__CHOICE (0u)

#define VEHICLE_RSDS_FD1_RSDS_OBJ_REL_ACCEL_Y_RI___VALID_VALUES__CHOICE (0u)

#define VEHICLE_RSDS_FD2_RCTA_B_TTC___NO__DISPLAY__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RCTA_B_TTC__VALID_VALUE__CHOICE (1u)

#define VEHICLE_RSDS_FD2_BSD_LCA_LEFT_TTC___NO__DISPLAY__CHOICE (0u)
#define VEHICLE_RSDS_FD2_BSD_LCA_LEFT_TTC__VALID_VALUE__CHOICE (1u)

#define VEHICLE_RSDS_FD2_BSD_LCA_RIGHT_TTC___NO__DISPLAY__CHOICE (0u)
#define VEHICLE_RSDS_FD2_BSD_LCA_RIGHT_TTC__VALID_VALUE__CHOICE (1u)

#define VEHICLE_RSDS_FD2_RCW_TTC___NO__DISPLAY__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RCW_TTC__VALID_VALUE__CHOICE (1u)

#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_01___NO_TARGET__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_01__TARGET_DETECTED__CHOICE (1u)

#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_01_DY___VALID__VALUE__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_01_DY___RESERVED__CHOICE (81u)

#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_01_DX___VALID__VALUE__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_01_DX___RESERVED__CHOICE (951u)

#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_02___NO_TARGET__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_02__TARGET_DETECTED__CHOICE (1u)

#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_02_DX___VALID__VALUE__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_02_DX___RESERVED__CHOICE (951u)

#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_02_DY___VALID__VALUE__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_02_DY___RESERVED__CHOICE (81u)

#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_01___NO_TARGET__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_01__TARGET_DETECTED__CHOICE (1u)

#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_01_DX___VALID__VALUE__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_01_DX___RESERVED__CHOICE (951u)

#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_01_DY___VALID__VALUE__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_01_DY___RESERVED__CHOICE (81u)

#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_02___NO_TARGET__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_02__TARGET_DETECTED__CHOICE (1u)

#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_02_DX___VALID__VALUE__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_02_DX___RESERVED__CHOICE (951u)

#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_02_DY___VALID__VALUE__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_02_DY___RESERVED__CHOICE (81u)

#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_01___NO_TARGET__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_01__TARGET_DETECTED__CHOICE (1u)

#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_01_DX___VALID__VALUE__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_01_DX___RESERVED__CHOICE (951u)

#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_01_DY___VALID__VALUE__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_01_DY___RESERVED__CHOICE (81u)

#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_02___NO_TARGET__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_02__TARGET_DETECTED__CHOICE (1u)

#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_02_DX___VALID__VALUE__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_02_DX___RESERVED__CHOICE (951u)

#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_02_DY___VALID__VALUE__CHOICE (0u)
#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_02_DY___RESERVED__CHOICE (81u)

#define VEHICLE_TRAILER1_TRAILER_STS___TRAILER_OFF__CHOICE (0u)
#define VEHICLE_TRAILER1_TRAILER_STS___TRAILER_ON__CHOICE (1u)

#define VEHICLE_F_PBOX1_HI_BEAM_STS_F_PBOX___OFF__CHOICE (0u)
#define VEHICLE_F_PBOX1_HI_BEAM_STS_F_PBOX___ON__CHOICE (1u)

#define VEHICLE_F_PBOX1_LOW_BEAM_STS_F_PBOX___OFF__CHOICE (0u)
#define VEHICLE_F_PBOX1_LOW_BEAM_STS_F_PBOX___ON__CHOICE (1u)

#define VEHICLE_F_PBOX1_F_FOG_LMP_STS_F_PBOX___OFF__CHOICE (0u)
#define VEHICLE_F_PBOX1_F_FOG_LMP_STS_F_PBOX___ON__CHOICE (1u)

#define VEHICLE_DDCM1_RSDS_DRIVER_LED_STS__NO_ERROR__CHOICE (0u)
#define VEHICLE_DDCM1_RSDS_DRIVER_LED_STS__ERROR__CHOICE (1u)

#define VEHICLE_PDCM1_RSDS_PASS_LED_STS__NO_ERROR__CHOICE (0u)
#define VEHICLE_PDCM1_RSDS_PASS_LED_STS__ERROR__CHOICE (1u)

#define VEHICLE_R_PBOX1_HI_POSN_BRK_LMP_FAIL_STS___NO_FAILURE__CHOICE (0u)
#define VEHICLE_R_PBOX1_HI_POSN_BRK_LMP_FAIL_STS__FAILURE__CHOICE (1u)

#define VEHICLE_R_PBOX1_L_BRK_LMP_FAIL_STS___NO_FAILURE__CHOICE (0u)
#define VEHICLE_R_PBOX1_L_BRK_LMP_FAIL_STS__FAILURE__CHOICE (1u)

#define VEHICLE_R_PBOX1_R_BRK_LMP_FAIL_STS___NO_FAILURE__CHOICE (0u)
#define VEHICLE_R_PBOX1_R_BRK_LMP_FAIL_STS__FAILURE__CHOICE (1u)

#define VEHICLE_R_PBOX1_POSN_LMP_OUTP_STS_R_PBOX__OFF__CHOICE (0u)
#define VEHICLE_R_PBOX1_POSN_LMP_OUTP_STS_R_PBOX__ON__CHOICE (1u)

#define VEHICLE_R_PBOX1_L_TURN_LMP_STS_R_PBOX___OFF__CHOICE (0u)
#define VEHICLE_R_PBOX1_L_TURN_LMP_STS_R_PBOX___ON__CHOICE (1u)

#define VEHICLE_R_PBOX1_R_TURN_LMP_STS_R_PBOX___OFF__CHOICE (0u)
#define VEHICLE_R_PBOX1_R_TURN_LMP_STS_R_PBOX___ON__CHOICE (1u)

#define VEHICLE_R_PBOX1_R_FOG_LMP_FAIL_STS_R_PBOX___NO_FAILURE__CHOICE (0u)
#define VEHICLE_R_PBOX1_R_FOG_LMP_FAIL_STS_R_PBOX__FAILURE__CHOICE (1u)

#define VEHICLE_R_PBOX1_R_FOG_LMP_STS_R_PBOX___OFF__CHOICE (0u)
#define VEHICLE_R_PBOX1_R_FOG_LMP_STS_R_PBOX___ON__CHOICE (1u)

/* Frame Names. */
#define VEHICLE_CR_FD1_NAME "CR_FD1"
#define VEHICLE_ACC_FD1_NAME "ACC_FD1"
#define VEHICLE_DCT5_NAME "DCT5"
#define VEHICLE_BCM1_NAME "BCM1"
#define VEHICLE_BCM8_NAME "BCM8"
#define VEHICLE_PEPS2_NAME "PEPS2"
#define VEHICLE_AC2_NAME "AC2"
#define VEHICLE_CSA1_NAME "CSA1"
#define VEHICLE_CSA2_NAME "CSA2"
#define VEHICLE_ABM2_NAME "ABM2"
#define VEHICLE_IP2_NAME "IP2"
#define VEHICLE_HUT_FD1_NAME "HUT_FD1"
#define VEHICLE_HUT34_NAME "HUT34"
#define VEHICLE_ESP_FD2_NAME "ESP_FD2"
#define VEHICLE_ESP_FD3_NAME "ESP_FD3"
#define VEHICLE_ECM_FD1_NAME "ECM_FD1"
#define VEHICLE_ECM_FD2_NAME "ECM_FD2"
#define VEHICLE_IBOOSTER_FD2_NAME "Ibooster_FD2"
#define VEHICLE_EBOOSTER_FD1_NAME "EBOOSTER_FD1"
#define VEHICLE_ADAS_AD1_NAME "ADAS_AD1"
#define VEHICLE_DIAG_FUNC_REQ_NAME "DiagFuncReq"
#define VEHICLE_FR_PHY_REQ_NAME "FR_Phy_Req"
#define VEHICLE_FR_PHY_RESP_NAME "FR_Phy_Resp"
#define VEHICLE_RSDS_FD1_NAME "RSDS_FD1"
#define VEHICLE_RSDS_FD2_NAME "RSDS_FD2"
#define VEHICLE_TRAILER1_NAME "Trailer1"
#define VEHICLE_F_PBOX1_NAME "F_PBOX1"
#define VEHICLE_DDCM1_NAME "DDCM1"
#define VEHICLE_PDCM1_NAME "PDCM1"
#define VEHICLE_R_PBOX1_NAME "R_PBOX1"

/* Signal Names. */
#define VEHICLE_CR_FD1_CHECKSUM_CR_R_1_NAME "Checksum_CR_R_1"
#define VEHICLE_CR_FD1_CR_FCTA_RESP_NAME "CR_FCTA_Resp"
#define VEHICLE_CR_FD1_CR_FCTB_RESP_NAME "CR_FCTB_Resp"
#define VEHICLE_CR_FD1_FCTA_B_FUNC_STS_NAME "FCTA_B_FuncSts"
#define VEHICLE_CR_FD1_FCTA_WARN_NAME "FCTA_Warn"
#define VEHICLE_CR_FD1_CR_ERR_STS_NAME "CR_ErrSts"
#define VEHICLE_CR_FD1_CR_BLI_STS_NAME "CR_BliSts"
#define VEHICLE_CR_FD1_CR_BRKG_REQ_NAME "CR_BrkgReq"
#define VEHICLE_CR_FD1_FCTB_TRIG_NAME "FCTBTrig"
#define VEHICLE_CR_FD1_FCTB_ABA_LEVEL_NAME "FCTB_ABA_Level"
#define VEHICLE_CR_FD1_FCTB_ABA_REQ_NAME "FCTB_ABA_Req"
#define VEHICLE_CR_FD1_CR_BRKG_REQ_VAL_NAME "CR_BrkgReqVal"
#define VEHICLE_CR_FD1_FCTB_ABP_REQ_NAME "FCTB_ABP_Req"
#define VEHICLE_CR_FD1_FCTA_B_TTC_NAME "FCTA_B_TTC"
#define VEHICLE_CR_FD1_ROLLING_COUNTER_CR_R_1_NAME "RollingCounter_CR_R_1"
#define VEHICLE_CR_FD1_CHECKSUM_CR_R_2_NAME "Checksum_CR_R_2"
#define VEHICLE_CR_FD1_CR_OBJ_DIST_Y_LE_NAME "CR_ObjDistY_Le"
#define VEHICLE_CR_FD1_CR_OBJ_DIST_X_LE_NAME "CR_ObjDistX_Le"
#define VEHICLE_CR_FD1_CR_OBJ_ID_LE_NAME "CR_ObjID_Le"
#define VEHICLE_CR_FD1_CR_OBJ_REL_VEL_X_LE_NAME "CR_ObjRelVelX_Le"
#define VEHICLE_CR_FD1_CR_OBJ_REL_ACCEL_X_LE_NAME "CR_ObjRelAccelX_Le"
#define VEHICLE_CR_FD1_CR_OBJ_STS_LE_NAME "CR_ObjSts_Le"
#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_LE_NAME "CR_ObjMotionType_Le"
#define VEHICLE_CR_FD1_ROLLING_COUNTER_CR_R_2_NAME "RollingCounter_CR_R_2"
#define VEHICLE_CR_FD1_CHECKSUM_CR_R_3_NAME "Checksum_CR_R_3"
#define VEHICLE_CR_FD1_CR_OBJ_DIST_Y_RI_NAME "CR_ObjDistY_Ri"
#define VEHICLE_CR_FD1_CR_OBJ_DIST_X_RI_NAME "CR_ObjDistX_Ri"
#define VEHICLE_CR_FD1_CR_OBJ_ID_RI_NAME "CR_ObjID_Ri"
#define VEHICLE_CR_FD1_CR_OBJ_REL_VEL_X_RI_NAME "CR_ObjRelVelX_Ri"
#define VEHICLE_CR_FD1_CR_OBJ_REL_ACCEL_X_RI_NAME "CR_ObjRelAccelX_Ri"
#define VEHICLE_CR_FD1_CR_OBJ_STS_RI_NAME "CR_ObjSts_Ri"
#define VEHICLE_CR_FD1_CR_OBJ_MOTION_TYPE_RI_NAME "CR_ObjMotionType_Ri"
#define VEHICLE_CR_FD1_ROLLING_COUNTER_CR_R_3_NAME "RollingCounter_CR_R_3"
#define VEHICLE_CR_FD1_CHECKSUM_CR_R_4_NAME "Checksum_CR_R_4"
#define VEHICLE_CR_FD1_CR_OBJ_REL_ACCEL_Y_RI_NAME "CR_ObjRelAccelY_Ri"
#define VEHICLE_CR_FD1_CR_OBJ_REL_ACCEL_Y_LE_NAME "CR_ObjRelAccelY_Le"
#define VEHICLE_CR_FD1_CR_OBJ_REL_VEL_Y_RI_NAME "CR_ObjRelVelY_Ri"
#define VEHICLE_CR_FD1_CR_OBJ_REL_VEL_Y_LE_NAME "CR_ObjRelVelY_Le"
#define VEHICLE_CR_FD1_ROLLING_COUNTER_CR_R_4_NAME "RollingCounter_CR_R_4"
#define VEHICLE_CR_FD1_CR_OBJ_DIST_X_STD_LE_NAME "CR_ObjDistXStd_Le"
#define VEHICLE_CR_FD1_CR_OBJ_DIST_Y_STD_LE_NAME "CR_ObjDistYStd_Le"
#define VEHICLE_CR_FD1_CR_OBJ_REL_VEL_X_STD_LE_NAME "CR_ObjRelVelXStd_Le"
#define VEHICLE_CR_FD1_CR_OBJ_REL_VEL_Y_STD_LE_NAME "CR_ObjRelVelYStd_Le"
#define VEHICLE_CR_FD1_CR_OBJ_R_ACCEL_X_STD_LE_NAME "CR_ObjRAccelXStd_Le"
#define VEHICLE_CR_FD1_CR_OBJ_R_ACCEL_Y_STD_LE_NAME "CR_ObjRAccelYStd_Le"
#define VEHICLE_CR_FD1_CR_OBJ_DIST_X_STD_RI_NAME "CR_ObjDistXStd_Ri"
#define VEHICLE_CR_FD1_CR_OBJ_DIST_Y_STD_RI_NAME "CR_ObjDistYStd_Ri"
#define VEHICLE_CR_FD1_CR_OBJ_REL_VEL_X_STD_RI_NAME "CR_ObjRelVelXStd_Ri"
#define VEHICLE_CR_FD1_CR_OBJ_REL_VEL_Y_STD_RI_NAME "CR_ObjRelVelYStd_Ri"
#define VEHICLE_CR_FD1_CR_OBJ_R_ACCEL_X_STD_RI_NAME "CR_ObjRAccelXStd_Ri"
#define VEHICLE_CR_FD1_CR_OBJ_R_ACCEL_Y_STD_RI_NAME "CR_ObjRAccelYStd_Ri"
#define VEHICLE_ACC_FD1_ACC_CR_INTERFACE_NAME "ACC_CRInterface"
#define VEHICLE_DCT5_CURRENT_GEAR_VALID_NAME "CurrentGearValid"
#define VEHICLE_DCT5_CURRENT_GEAR_NAME "CURRENT_GEAR"
#define VEHICLE_DCT5_TGS_LEVER_NAME "TGS_LEVER"
#define VEHICLE_BCM1_TRUNK_STS_NAME "TrunkSts"
#define VEHICLE_BCM1_DRV_DOOR_STS_NAME "DrvDoorSts"
#define VEHICLE_BCM1_LR_DOOR_STS_NAME "LRDoorSts"
#define VEHICLE_BCM1_PASSENGER_DOOR_STS_NAME "PassengerDoorSts"
#define VEHICLE_BCM1_RR_DOOR_STS_NAME "RRDoorSts"
#define VEHICLE_BCM8_CHECKSUM_BCM8_NAME "Checksum_BCM8"
#define VEHICLE_BCM8_PAS_WORK_CMD_NAME "PASWorkCmd"
#define VEHICLE_BCM8_R_VIEW_MIRROR_STS_NAME "RViewMirrorSts"
#define VEHICLE_BCM8_WIPR_REQ_F_PBOX_NAME "WiprReq_F_PBOX"
#define VEHICLE_BCM8_ROLLINGCOUNTER_BCM8_NAME "Rollingcounter_BCM8"
#define VEHICLE_PEPS2_SYS_POWER_MOD_NAME "SysPowerMod"
#define VEHICLE_PEPS2_SYS_POWER_MOD_VLD_NAME "SysPowerModVld"
#define VEHICLE_AC2_AC_AMB_TEMP_NAME "ACAmbTemp"
#define VEHICLE_CSA1_R_TURN_LMP_SWT_STS_NAME "RTurnLmpSwtSts"
#define VEHICLE_CSA1_L_TURN_LMP_SWT_STS_NAME "LTurnLmpSwtSts"
#define VEHICLE_CSA2_CHECKSUM_CSA2_NAME "Checksum_CSA2"
#define VEHICLE_CSA2_STEER_WHEEL_ANG_NAME "SteerWheelAng"
#define VEHICLE_CSA2_STEER_WHEEL_ANG_SIGN_NAME "SteerWheelAngSign"
#define VEHICLE_CSA2_STEER_WHEEL_SPD_NAME "SteerWheelSpd"
#define VEHICLE_CSA2_STEER_WHEEL_SPD_SIGN_NAME "SteerWheelSpdSign"
#define VEHICLE_CSA2_SAS_STS_NAME "SAS_Sts"
#define VEHICLE_CSA2_ROLLINGCOUNTER_CSA2_NAME "Rollingcounter_CSA2"
#define VEHICLE_ABM2_CHECK_SUM_ABM2_NAME "CheckSum_ABM2"
#define VEHICLE_ABM2_VEH_LGT_ACCEL_NAME "VehLgtAccel"
#define VEHICLE_ABM2_VEH_LAT_ACCEL_NAME "VehLatAccel"
#define VEHICLE_ABM2_VEH_YAW_RATE_NAME "VehYawRate"
#define VEHICLE_ABM2_VEH_LGT_ACCEL_VLD_NAME "VehLgtAccelVld"
#define VEHICLE_ABM2_VEH_LAT_ACCEL_VLD_NAME "VehLatAccelVld"
#define VEHICLE_ABM2_VEH_DYN_YAW_RATE_VLD_NAME "VehDynYawRateVld"
#define VEHICLE_ABM2_ROLLING_COUNTER_ABM2_NAME "RollingCounter_ABM2"
#define VEHICLE_IP2_IP_VEH_TOT_DISTANCE_NAME "IP_VehTotDistance"
#define VEHICLE_IP2_IP_VEH_TOT_DISTANCE_VALID_NAME "IP_VehTotDistanceValid"
#define VEHICLE_HUT_FD1_LCA_SWT_REQ_NAME "LCASwtReq"
#define VEHICLE_HUT_FD1_RCTA_SWT_REQ_NAME "RCTASwtReq"
#define VEHICLE_HUT_FD1_RCTA_BRK_SWT_REQ_NAME "RCTABrkSwtReq"
#define VEHICLE_HUT_FD1_RCW_SWT_REQ_NAME "RCWSwtReq"
#define VEHICLE_HUT_FD1_FCW_SNVTY_SET_NAME "FCW_SnvtySet"
#define VEHICLE_HUT_FD1_DOW_SWT_REQ_NAME "DOWSwtReq"
#define VEHICLE_HUT_FD1_FCTA_SWT_REQ_NAME "FCTASwtReq"
#define VEHICLE_HUT_FD1_FCTA_BRK_SWT_REQ_NAME "FCTABrkSwtReq"
#define VEHICLE_HUT34_TIME_HOUR_NAME "Time_Hour"
#define VEHICLE_HUT34_TIME_MINUTES_NAME "Time_Minutes"
#define VEHICLE_HUT34_TIME_SECOND_NAME "Time_Second"
#define VEHICLE_HUT34_TIME_YEAR_LEFT_NAME "Time_Year_Left"
#define VEHICLE_HUT34_TIME_YEAR_RIGHT_NAME "Time_Year_Right"
#define VEHICLE_HUT34_TIME_MONTH_NAME "Time_Month"
#define VEHICLE_HUT34_TIME_DAY_NAME "Time_Day"
#define VEHICLE_ESP_FD2_CHECK_SUM_ESP2_NAME "CheckSum_ESP2"
#define VEHICLE_ESP_FD2_VEH_STANDSTILL_NAME "VehStandstill"
#define VEHICLE_ESP_FD2_NO_BRK_FORCE_NAME "NoBrkForce"
#define VEHICLE_ESP_FD2_BRK_DSK_OVRHEATD_NAME "BrkDskOvrheatd"
#define VEHICLE_ESP_FD2_ESP_DIAG_ACTV_NAME "ESP_DiagActv"
#define VEHICLE_ESP_FD2_AB_AACTV_NAME "ABAactv"
#define VEHICLE_ESP_FD2_AB_AAVAILABLE_NAME "ABAavailable"
#define VEHICLE_ESP_FD2_HDC_CTRL_NAME "HDCCtrl"
#define VEHICLE_ESP_FD2_ROLLING_COUNTER_ESP2_NAME "RollingCounter_ESP2"
#define VEHICLE_ESP_FD2_CHECK_SUM_ESP1_NAME "CheckSum_ESP1"
#define VEHICLE_ESP_FD2_ESP_FAIL_STS_NAME "ESPFailSts"
#define VEHICLE_ESP_FD2_ESP_FUNC_OFF_STS_NAME "ESPFuncOffSts"
#define VEHICLE_ESP_FD2_BTC_ACTV_NAME "BTCActv"
#define VEHICLE_ESP_FD2_PTC_ACTV_NAME "PTCActv"
#define VEHICLE_ESP_FD2_MSR_ACTV_NAME "MSRActv"
#define VEHICLE_ESP_FD2_VDC_ACTV_NAME "VDCActv"
#define VEHICLE_ESP_FD2_ESP_MASTER_CYL_BRK_PRESS_VLD_NAME "ESP_MasterCylBrkPressVld"
#define VEHICLE_ESP_FD2_ESP_MASTER_CYL_BRK_PRESS_NAME "ESP_MasterCylBrkPress"
#define VEHICLE_ESP_FD2_ROLLING_COUNTER_ESP1_NAME "RollingCounter_ESP1"
#define VEHICLE_ESP_FD2_CHECK_SUM_ABS3_NAME "CheckSum_ABS3"
#define VEHICLE_ESP_FD2_ABS_FAIL_STS_NAME "ABSFailSts"
#define VEHICLE_ESP_FD2_VEH_SPD_VLD_NAME "VehSpdVld"
#define VEHICLE_ESP_FD2_VEH_SPD_NAME "VehSpd"
#define VEHICLE_ESP_FD2_ABS_ACTV_NAME "ABSActv"
#define VEHICLE_ESP_FD2_ROLLING_COUNTER_ABS3_NAME "RollingCounter_ABS3"
#define VEHICLE_ESP_FD3_CHECK_SUM_ABS1_NAME "CheckSum_ABS1"
#define VEHICLE_ESP_FD3_FL_WHEEL_DRIVE_DIRECTION_NAME "FLWheelDriveDirection"
#define VEHICLE_ESP_FD3_FL_WHEEL_SPD_VLD_NAME "FLWheelSpdVld"
#define VEHICLE_ESP_FD3_FL_WHEEL_SPD_NAME "FLWheelSpd"
#define VEHICLE_ESP_FD3_FR_WHEEL_DRIVE_DIRECTION_NAME "FRWheelDriveDirection"
#define VEHICLE_ESP_FD3_FR_WHEEL_SPD_VLD_NAME "FRWheelSpdVld"
#define VEHICLE_ESP_FD3_FR_WHEEL_SPD_NAME "FRWheelSpd"
#define VEHICLE_ESP_FD3_ROLLING_COUNTER_ABS1_NAME "RollingCounter_ABS1"
#define VEHICLE_ESP_FD3_EPB_STS_NAME "EPBSts"
#define VEHICLE_ESP_FD3_EPB_ERR_STS_NAME "EPBErrSts"
#define VEHICLE_ESP_FD3_CHECK_SUM_ABS2_NAME "CheckSum_ABS2"
#define VEHICLE_ESP_FD3_RL_WHEEL_DRIVE_DIRECTION_NAME "RLWheelDriveDirection"
#define VEHICLE_ESP_FD3_RL_WHEEL_SPD_VLD_NAME "RLWheelSpdVld"
#define VEHICLE_ESP_FD3_RL_WHEEL_SPD_NAME "RLWheelSpd"
#define VEHICLE_ESP_FD3_RR_WHEEL_DRIVE_DIRECTION_NAME "RRWheelDriveDirection"
#define VEHICLE_ESP_FD3_RR_WHEEL_SPD_VLD_NAME "RRWheelSpdVld"
#define VEHICLE_ESP_FD3_RR_WHEEL_SPD_NAME "RRWheelSpd"
#define VEHICLE_ESP_FD3_ROLLING_COUNTER_ABS2_NAME "RollingCounter_ABS2"
#define VEHICLE_ECM_FD1_HCU_POWERTRAIN_STS_P0_NAME "HCU_PowertrainSts_P0"
#define VEHICLE_ECM_FD1_BRK_PEDAL_STS_NAME "BrkPedalSts"
#define VEHICLE_ECM_FD1_ENG_SPD_NAME "EngSpd"
#define VEHICLE_ECM_FD1_ENG_SPD_VLDTY_NAME "EngSpdVldty"
#define VEHICLE_ECM_FD2_ACCEL_PEDL_POSN_DIAGC_NAME "AccelPedlPosnDiagc"
#define VEHICLE_ECM_FD2_ACCEL_PEDAL_POSN_VLDTY_NAME "AccelPedalPosnVldty"
#define VEHICLE_ECM_FD2_ENG_STATE_NAME "EngState"
#define VEHICLE_IBOOSTER_FD2_IB_BRK_PEDAL_APPLD_NAME "IB_BrkPedalAppld"
#define VEHICLE_IBOOSTER_FD2_IB_BRK_PEDAL_APPLD_VLD_NAME "IB_BrkPedalAppldVld"
#define VEHICLE_EBOOSTER_FD1_EB_VEH_STANDSTILL_NAME "EB_VehStandstill"
#define VEHICLE_EBOOSTER_FD1_EB_AEBIB_ACTV_NAME "EB_AEBIBActv"
#define VEHICLE_EBOOSTER_FD1_EB_AEBBA_ACTV_NAME "EB_AEBBAActv"
#define VEHICLE_EBOOSTER_FD1_EB_AEB_AVAILABLE_NAME "EB_AEBAvailable"
#define VEHICLE_EBOOSTER_FD1_EB_ABP_AVAILABLE_NAME "EB_ABPAvailable"
#define VEHICLE_EBOOSTER_FD1_EB_ABP_ACTV_NAME "EB_ABPActv"
#define VEHICLE_EBOOSTER_FD1_EB_CTA_BRK_AVAILABLE_NAME "EB_CTABrkAvailable"
#define VEHICLE_EBOOSTER_FD1_EB_CTA_ACTV_NAME "EB_CTAActv"
#define VEHICLE_ADAS_AD1_SYNC_TYPE_NAME "Sync_Type"
#define VEHICLE_ADAS_AD1_SYNC_CRC_NAME "Sync_CRC"
#define VEHICLE_ADAS_AD1_SYNC_TIME_DOMAIN_NAME "Sync_TimeDomain"
#define VEHICLE_ADAS_AD1_SYNC_COUNTER_NAME "Sync_Counter"
#define VEHICLE_ADAS_AD1_SYNC_RESD_NAME "Sync_Resd"
#define VEHICLE_ADAS_AD1_SYNC_SGW_NAME "Sync_SGW"
#define VEHICLE_ADAS_AD1_SYNC_OVS_NAME "Sync_OVS"
#define VEHICLE_ADAS_AD1_SYNC_SYNC_TIME_NAME "Sync_SyncTime"
#define VEHICLE_DIAG_FUNC_REQ_DIAG_FUNC_REQ_NAME "DiagFuncReq"
#define VEHICLE_FR_PHY_REQ_FR_PHY_REQ_NAME "FR_Phy_Req"
#define VEHICLE_FR_PHY_RESP_FR_PHY_RESP_NAME "FR_Phy_Resp"
#define VEHICLE_RSDS_FD1_RSDS_OBJ_REL_ACCEL_Y_LE_NAME "RSDS_ObjRelAccelY_Le"
#define VEHICLE_RSDS_FD1_CHECKSUM_RSDS_R_2_NAME "Checksum_RSDS_R_2"
#define VEHICLE_RSDS_FD1_RSDS_BRK_ERR_STS_NAME "RSDS_Brk_ErrSts"
#define VEHICLE_RSDS_FD1_RSDS_BRKG_REQ_NAME "RSDS_BrkgReq"
#define VEHICLE_RSDS_FD1_RSDS_BRKG_REQ_VAL_NAME "RSDS_BrkgReqVal"
#define VEHICLE_RSDS_FD1_RSDS_LED_LIGHT_REQ_LEFT_NAME "RSDS_LEDLightReqLeft"
#define VEHICLE_RSDS_FD1_RSDS_LED_LIGHT_REQ_RIGHT_NAME "RSDS_LEDLightReqRight"
#define VEHICLE_RSDS_FD1_RSDS_IP_SOUND_REQ_NAME "RSDS_IPSoundReq"
#define VEHICLE_RSDS_FD1_BSD_LCA_WARNING_REQ_RIGHT_NAME "BSD_LCA_warningReqRight"
#define VEHICLE_RSDS_FD1_BSD_LCA_WARNING_REQLEFT_NAME "BSD_LCA_warningReqleft"
#define VEHICLE_RSDS_FD1_DOW_WARNING_REQ_RIGHT_NAME "DOW_warningReqRight"
#define VEHICLE_RSDS_FD1_DOW_WARNING_REQLEFT_NAME "DOW_warningReqleft"
#define VEHICLE_RSDS_FD1_RSDS_RCW_TRIGGER_NAME "RSDS_RCW_Trigger"
#define VEHICLE_RSDS_FD1_RSDS_ERR_STS_NAME "RSDS_ErrSts"
#define VEHICLE_RSDS_FD1_RSDS_BRKG_TRIG_NAME "RSDS_BrkgTrig"
#define VEHICLE_RSDS_FD1_RSDS_BLI_STS_NAME "RSDS_BliSts"
#define VEHICLE_RSDS_FD1_RSDS_TRAILER_STS_NAME "RSDS_TrailerSts"
#define VEHICLE_RSDS_FD1_RSDS_LCA_RESP_NAME "RSDS_LCAResp"
#define VEHICLE_RSDS_FD1_RSDS_DOW_RESP_NAME "RSDS_DOWResp"
#define VEHICLE_RSDS_FD1_RSDS_RCW_RESP_NAME "RSDS_RCWResp"
#define VEHICLE_RSDS_FD1_RSDS_RCTA_RESP_NAME "RSDS_RCTAResp"
#define VEHICLE_RSDS_FD1_RSDS_RCTA_BRK_RESP_NAME "RSDS_RCTABrkResp"
#define VEHICLE_RSDS_FD1_RSDS_CTA_ACTV_NAME "RSDS_CTA_Actv"
#define VEHICLE_RSDS_FD1_RCTA_WARNING_REQ_RIGHT_NAME "RCTA_warningReqRight"
#define VEHICLE_RSDS_FD1_RCTA_WARNING_REQ_LEFT_NAME "RCTA_warningReqLeft"
#define VEHICLE_RSDS_FD1_ROLLING_COUNTER_RSDS_R_2_NAME "RollingCounter_RSDS_R_2"
#define VEHICLE_RSDS_FD1_CHECKSUM_RSDS_R_3_NAME "Checksum_RSDS_R_3"
#define VEHICLE_RSDS_FD1_LE_TAR_STS_NAME "LeTarSts"
#define VEHICLE_RSDS_FD1_OBJ_ID_LE_NAME "ObjIDLe"
#define VEHICLE_RSDS_FD1_OBJ_LGT_POSN_CURV_LE_NAME "ObjLgtPosnCurvLe"
#define VEHICLE_RSDS_FD1_OBJ_LAT_POSN_CURV_LE_NAME "ObjLatPosnCurvLe"
#define VEHICLE_RSDS_FD1_OBJ_LGT_SPD_CURV_LE_NAME "ObjLgtSpdCurvLe"
#define VEHICLE_RSDS_FD1_OBJ_LAT_SPD_CURV_LE_NAME "ObjLatSpdCurvLe"
#define VEHICLE_RSDS_FD1_OBJ_TTC_LE_NAME "ObjTTCLe"
#define VEHICLE_RSDS_FD1_ROLLING_COUNTER_RSDS_R_3_NAME "RollingCounter_RSDS_R_3"
#define VEHICLE_RSDS_FD1_CHECKSUM_RSDS_R_4_NAME "Checksum_RSDS_R_4"
#define VEHICLE_RSDS_FD1_OBJ_LEN_LE_NAME "ObjLenLe"
#define VEHICLE_RSDS_FD1_OBJ_WIDTH_LE_NAME "ObjWidthLe"
#define VEHICLE_RSDS_FD1_OBJ_STATY_LE_NAME "ObjStatyLe"
#define VEHICLE_RSDS_FD1_ZONE_IND_LE_NAME "ZoneIndLe"
#define VEHICLE_RSDS_FD1_OBJ_STS_LE_NAME "ObjStsLe"
#define VEHICLE_RSDS_FD1_OBJ_RIN_RI_NAME "ObjRinRi"
#define VEHICLE_RSDS_FD1_OBJ_WIDTH_RI_NAME "ObjWidthRi"
#define VEHICLE_RSDS_FD1_OBJ_STATY_RI_NAME "ObjStatyRi"
#define VEHICLE_RSDS_FD1_ZONE_IND_RI_NAME "ZoneIndRi"
#define VEHICLE_RSDS_FD1_OBJ_STS_RI_NAME "ObjStsRi"
#define VEHICLE_RSDS_FD1_ROLLING_COUNTER_RSDS_R_4_NAME "RollingCounter_RSDS_R_4"
#define VEHICLE_RSDS_FD1_CHECKSUM_RSDS_R_5_NAME "Checksum_RSDS_R_5"
#define VEHICLE_RSDS_FD1_RI_TAR_STS_NAME "RiTarSts"
#define VEHICLE_RSDS_FD1_OBJ_ID_RI_NAME "ObjIDRi"
#define VEHICLE_RSDS_FD1_OBJ_LGT_POSN_CURV_RI_NAME "ObjLgtPosnCurvRi"
#define VEHICLE_RSDS_FD1_OBJ_LAT_POSN_CURV_RI_NAME "ObjLatPosnCurvRi"
#define VEHICLE_RSDS_FD1_OBJ_LGT_SPD_CURV_RI_NAME "ObjLgtSpdCurvRi"
#define VEHICLE_RSDS_FD1_OBJ_LAT_SPD_CURV_RI_NAME "ObjLatSpdCurvRi"
#define VEHICLE_RSDS_FD1_OBJ_TTC_RI_NAME "ObjTTCRi"
#define VEHICLE_RSDS_FD1_ROLLING_COUNTER_RSDS_R_5_NAME "RollingCounter_RSDS_R_5"
#define VEHICLE_RSDS_FD1_RSDS_OBJ_DIST_X_STD_LE_NAME "RSDS_ObjDistXStd_Le"
#define VEHICLE_RSDS_FD1_RSDS_OBJ_DIST_Y_STD_LE_NAME "RSDS_ObjDistYStd_Le"
#define VEHICLE_RSDS_FD1_RSDS_OBJ_REL_VEL_X_STD_LE_NAME "RSDS_ObjRelVelXStd_Le"
#define VEHICLE_RSDS_FD1_RSDS_OBJ_REL_VEL_Y_STD_LE_NAME "RSDS_ObjRelVelYStd_Le"
#define VEHICLE_RSDS_FD1_RSDS_OBJ_R_ACCEL_X_STD_LE_NAME "RSDS_ObjRAccelXStd_Le"
#define VEHICLE_RSDS_FD1_RSDS_OBJ_R_ACCEL_Y_STD_LE_NAME "RSDS_ObjRAccelYStd_Le"
#define VEHICLE_RSDS_FD1_RSDS_OBJ_DIST_X_STD_RI_NAME "RSDS_ObjDistXStd_Ri"
#define VEHICLE_RSDS_FD1_RSDS_OBJ_DIST_Y_STD_RI_NAME "RSDS_ObjDistYStd_Ri"
#define VEHICLE_RSDS_FD1_RSDS_OBJ_REL_VEL_X_STD_RI_NAME "RSDS_ObjRelVelXStd_Ri"
#define VEHICLE_RSDS_FD1_RSDS_OBJ_REL_VEL_Y_STD_RI_NAME "RSDS_ObjRelVelYStd_Ri"
#define VEHICLE_RSDS_FD1_RSDS_OBJ_R_ACCEL_X_STD_RI_NAME "RSDS_ObjRAccelXStd_Ri"
#define VEHICLE_RSDS_FD1_RSDS_OBJ_R_ACCEL_Y_STD_RI_NAME "RSDS_ObjRAccelYStd_Ri"
#define VEHICLE_RSDS_FD1_RSDS_OBJ_REL_ACCEL_X_LE_NAME "RSDS_ObjRelAccelX_Le"
#define VEHICLE_RSDS_FD1_RSDS_OBJ_REL_ACCEL_X_RI_NAME "RSDS_ObjRelAccelX_Ri"
#define VEHICLE_RSDS_FD1_RSDS_OBJ_REL_ACCEL_Y_RI_NAME "RSDS_ObjRelAccelY_Ri"
#define VEHICLE_RSDS_FD2_RCTA_B_TTC_NAME "RCTA_B_TTC"
#define VEHICLE_RSDS_FD2_BSD_LCA_LEFT_TTC_NAME "BSD_LCA_Left_TTC"
#define VEHICLE_RSDS_FD2_BSD_LCA_RIGHT_TTC_NAME "BSD_LCA_Right_TTC"
#define VEHICLE_RSDS_FD2_RCW_TTC_NAME "RCW_TTC"
#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_01_NAME "RSDS_LeTgt_01"
#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_01_DY_NAME "RSDS_LeTgt_01_dy"
#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_01_DX_NAME "RSDS_LeTgt_01_dx"
#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_02_NAME "RSDS_LeTgt_02"
#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_02_DX_NAME "RSDS_LeTgt_02_dx"
#define VEHICLE_RSDS_FD2_RSDS_LE_TGT_02_DY_NAME "RSDS_LeTgt_02_dy"
#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_01_NAME "RSDS_RiTgt_01"
#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_01_DX_NAME "RSDS_RiTgt_01_dx"
#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_01_DY_NAME "RSDS_RiTgt_01_dy"
#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_02_NAME "RSDS_RiTgt_02"
#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_02_DX_NAME "RSDS_RiTgt_02_dx"
#define VEHICLE_RSDS_FD2_RSDS_RI_TGT_02_DY_NAME "RSDS_RiTgt_02_dy"
#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_01_NAME "RSDS_MidTgt_01"
#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_01_DX_NAME "RSDS_MidTgt_01_dx"
#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_01_DY_NAME "RSDS_MidTgt_01_dy"
#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_02_NAME "RSDS_MidTgt_02"
#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_02_DX_NAME "RSDS_MidTgt_02_dx"
#define VEHICLE_RSDS_FD2_RSDS_MID_TGT_02_DY_NAME "RSDS_MidTgt_02_dy"
#define VEHICLE_TRAILER1_TRAILER_STS_NAME "TrailerSts"
#define VEHICLE_F_PBOX1_HI_BEAM_STS_F_PBOX_NAME "HiBeamSts_F_PBOX"
#define VEHICLE_F_PBOX1_LOW_BEAM_STS_F_PBOX_NAME "LowBeamSts_F_PBOX"
#define VEHICLE_F_PBOX1_F_FOG_LMP_STS_F_PBOX_NAME "FFogLmpSts_F_PBOX"
#define VEHICLE_DDCM1_RSDS_DRIVER_LED_STS_NAME "RSDS_Driver_LED_Sts"
#define VEHICLE_PDCM1_RSDS_PASS_LED_STS_NAME "RSDS_Pass_LED_Sts"
#define VEHICLE_R_PBOX1_HI_POSN_BRK_LMP_FAIL_STS_NAME "HiPosnBrkLmpFailSts"
#define VEHICLE_R_PBOX1_L_BRK_LMP_FAIL_STS_NAME "LBrkLmpFailSts"
#define VEHICLE_R_PBOX1_R_BRK_LMP_FAIL_STS_NAME "RBrkLmpFailSts"
#define VEHICLE_R_PBOX1_POSN_LMP_OUTP_STS_R_PBOX_NAME "PosnLmpOutpSts_R_PBOX"
#define VEHICLE_R_PBOX1_L_TURN_LMP_STS_R_PBOX_NAME "LTurnLmpSts_R_PBOX"
#define VEHICLE_R_PBOX1_R_TURN_LMP_STS_R_PBOX_NAME "RTurnLmpSts_R_PBOX"
#define VEHICLE_R_PBOX1_R_FOG_LMP_FAIL_STS_R_PBOX_NAME "RFogLmpFailSts_R_PBOX"
#define VEHICLE_R_PBOX1_R_FOG_LMP_STS_R_PBOX_NAME "RFogLmpSts_R_PBOX"

/**
 * Signals in message CR_FD1.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_cr_fd1_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_cr_r_1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cr_fcta_resp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cr_fctb_resp;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fcta_b_func_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fcta_warn;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cr_err_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cr_bli_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cr_brkg_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fctb_trig;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fctb_aba_level;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fctb_aba_req;

    /**
     * Range: 0..65574 (-16..16 -)
     * Scale: 0.000488
     * Offset: -16
     */
    uint16_t cr_brkg_req_val;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fctb_abp_req;

    /**
     * Range: 0..63 (0..6.3 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t fcta_b_ttc;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter_cr_r_1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_cr_r_2;

    /**
     * Range: 0..255 (-12.8..12.7 -)
     * Scale: 0.1
     * Offset: -12.8
     */
    uint8_t cr_obj_dist_y_le;

    /**
     * Range: 0..1023 (-10..92.3 -)
     * Scale: 0.1
     * Offset: -10
     */
    uint16_t cr_obj_dist_x_le;

    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cr_obj_id_le;

    /**
     * Range: 0..1023 (-60..42.3 -)
     * Scale: 0.1
     * Offset: -60
     */
    uint16_t cr_obj_rel_vel_x_le;

    /**
     * Range: 0..1023 (-16..15.9688 -)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t cr_obj_rel_accel_x_le;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cr_obj_sts_le;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cr_obj_motion_type_le;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter_cr_r_2;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_cr_r_3;

    /**
     * Range: 0..255 (-12.8..12.7 -)
     * Scale: 0.1
     * Offset: -12.8
     */
    uint8_t cr_obj_dist_y_ri;

    /**
     * Range: 0..1023 (-10..92.3 -)
     * Scale: 0.1
     * Offset: -10
     */
    uint16_t cr_obj_dist_x_ri;

    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cr_obj_id_ri;

    /**
     * Range: 0..1023 (-60..42.3 -)
     * Scale: 0.1
     * Offset: -60
     */
    uint16_t cr_obj_rel_vel_x_ri;

    /**
     * Range: 0..1023 (-16..15.9688 -)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t cr_obj_rel_accel_x_ri;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cr_obj_sts_ri;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cr_obj_motion_type_ri;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter_cr_r_3;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_cr_r_4;

    /**
     * Range: 0..1023 (-16..15.9688 -)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t cr_obj_rel_accel_y_ri;

    /**
     * Range: 0..1023 (-16..15.9688 -)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t cr_obj_rel_accel_y_le;

    /**
     * Range: 0..127 (-6.4..6.3 -)
     * Scale: 0.1
     * Offset: -6.4
     */
    uint8_t cr_obj_rel_vel_y_ri;

    /**
     * Range: 0..127 (-6.4..6.3 -)
     * Scale: 0.1
     * Offset: -6.4
     */
    uint8_t cr_obj_rel_vel_y_le;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter_cr_r_4;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t cr_obj_dist_x_std_le;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t cr_obj_dist_y_std_le;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t cr_obj_rel_vel_x_std_le;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t cr_obj_rel_vel_y_std_le;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t cr_obj_r_accel_x_std_le;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t cr_obj_r_accel_y_std_le;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t cr_obj_dist_x_std_ri;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t cr_obj_dist_y_std_ri;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t cr_obj_rel_vel_x_std_ri;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t cr_obj_rel_vel_y_std_ri;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t cr_obj_r_accel_x_std_ri;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t cr_obj_r_accel_y_std_ri;
};

/**
 * Signals in message ACC_FD1.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_acc_fd1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_cr_interface;
};

/**
 * Signals in message DCT5.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_dct5_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t current_gear_valid;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t current_gear;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tgs_lever;
};

/**
 * Signals in message BCM1.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_bcm1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trunk_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drv_door_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lr_door_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t passenger_door_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_door_sts;
};

/**
 * Signals in message BCM8.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_bcm8_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_bcm8;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pas_work_cmd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_view_mirror_sts;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wipr_req_f_pbox;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rollingcounter_bcm8;
};

/**
 * Signals in message PEPS2.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_peps2_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sys_power_mod;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sys_power_mod_vld;
};

/**
 * Signals in message AC2.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_ac2_t {
    /**
     * Range: 0..253 (-40..86.5 -)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t ac_amb_temp;
};

/**
 * Signals in message CSA1.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_csa1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_turn_lmp_swt_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t l_turn_lmp_swt_sts;
};

/**
 * Signals in message CSA2.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_csa2_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_csa2;

    /**
     * Range: 0..7800 (0..780 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t steer_wheel_ang;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t steer_wheel_ang_sign;

    /**
     * Range: 0..10160 (0..1016 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t steer_wheel_spd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t steer_wheel_spd_sign;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sas_sts;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rollingcounter_csa2;
};

/**
 * Signals in message ABM2.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_abm2_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t check_sum_abm2;

    /**
     * Range: 0..44065 (-21.592..21.592 -)
     * Scale: 0.00098
     * Offset: -21.592
     */
    uint16_t veh_lgt_accel;

    /**
     * Range: 0..44065 (-21.592..21.592 -)
     * Scale: 0.00098
     * Offset: -21.592
     */
    uint16_t veh_lat_accel;

    /**
     * Range: 0..17442 (-2.093..2.093 -)
     * Scale: 0.00024
     * Offset: -2.093
     */
    uint16_t veh_yaw_rate;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_lgt_accel_vld;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_lat_accel_vld;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_dyn_yaw_rate_vld;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter_abm2;
};

/**
 * Signals in message IP2.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_ip2_t {
    /**
     * Range: 0..9999999 (0..999999.9 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t ip_veh_tot_distance;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ip_veh_tot_distance_valid;
};

/**
 * Signals in message HUT_FD1.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_hut_fd1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lca_swt_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rcta_swt_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rcta_brk_swt_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rcw_swt_req;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fcw_snvty_set;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dow_swt_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fcta_swt_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fcta_brk_swt_req;
};

/**
 * Signals in message HUT34.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_hut34_t {
    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t time_hour;

    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t time_minutes;

    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t time_second;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t time_year_left;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t time_year_right;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t time_month;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t time_day;
};

/**
 * Signals in message ESP_FD2.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_esp_fd2_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t check_sum_esp2;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_standstill;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t no_brk_force;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk_dsk_ovrheatd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_diag_actv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ab_aactv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ab_aavailable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hdc_ctrl;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter_esp2;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t check_sum_esp1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_fail_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_func_off_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t btc_actv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ptc_actv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t msr_actv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vdc_actv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_master_cyl_brk_press_vld;

    /**
     * Range: 0..14960 (-42.5..425 -)
     * Scale: 0.03125
     * Offset: -42.5
     */
    uint16_t esp_master_cyl_brk_press;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter_esp1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t check_sum_abs3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_fail_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_spd_vld;

    /**
     * Range: 0..5333 (0..299.98125 -)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t veh_spd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_actv;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter_abs3;
};

/**
 * Signals in message ESP_FD3.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_esp_fd3_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t check_sum_abs1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fl_wheel_drive_direction;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fl_wheel_spd_vld;

    /**
     * Range: 0..5333 (0..299.98125 -)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t fl_wheel_spd;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_wheel_drive_direction;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_wheel_spd_vld;

    /**
     * Range: 0..5333 (0..299.98125 -)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t fr_wheel_spd;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter_abs1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_sts;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_err_sts;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t check_sum_abs2;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rl_wheel_drive_direction;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rl_wheel_spd_vld;

    /**
     * Range: 0..5333 (0..299.98125 -)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t rl_wheel_spd;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_wheel_drive_direction;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_wheel_spd_vld;

    /**
     * Range: 0..5333 (0..299.98125 -)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t rr_wheel_spd;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter_abs2;
};

/**
 * Signals in message ECM_FD1.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_ecm_fd1_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hcu_powertrain_sts_p0;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk_pedal_sts;

    /**
     * Range: 0..65535 (0..8191.875 -)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t eng_spd;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eng_spd_vldty;
};

/**
 * Signals in message ECM_FD2.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_ecm_fd2_t {
    /**
     * Range: 0..255 (0..100.3935 -)
     * Scale: 0.3937
     * Offset: 0
     */
    uint8_t accel_pedl_posn_diagc;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t accel_pedal_posn_vldty;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eng_state;
};

/**
 * Signals in message Ibooster_FD2.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_ibooster_fd2_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ib_brk_pedal_appld;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ib_brk_pedal_appld_vld;
};

/**
 * Signals in message EBOOSTER_FD1.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_ebooster_fd1_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eb_veh_standstill;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eb_aebib_actv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eb_aebba_actv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eb_aeb_available;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eb_abp_available;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eb_abp_actv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eb_cta_brk_available;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eb_cta_actv;
};

/**
 * Signals in message ADAS_AD1.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_adas_ad1_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sync_type;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sync_crc;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sync_time_domain;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sync_counter;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sync_resd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sync_sgw;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sync_ovs;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t sync_sync_time;
};

/**
 * Signals in message DiagFuncReq.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_diag_func_req_t {
    /**
     * Range: 0..18446744073709600768 (0..1.84467440737096e+19 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t diag_func_req;
};

/**
 * Signals in message FR_Phy_Req.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_fr_phy_req_t {
    /**
     * Range: 0..18446744073709600768 (0..1.84467440737096e+19 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t fr_phy_req;
};

/**
 * Signals in message FR_Phy_Resp.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_fr_phy_resp_t {
    /**
     * Range: 0..18446744073709600768 (0..1.84467440737096e+19 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t fr_phy_resp;
};

/**
 * Signals in message RSDS_FD1.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_rsds_fd1_t {
    /**
     * Range: 0..1023 (-16..15.9688 -)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t rsds_obj_rel_accel_y_le;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_rsds_r_2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_brk_err_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_brkg_req;

    /**
     * Range: 0..255 (-10..2.75 -)
     * Scale: 0.05
     * Offset: -10
     */
    uint8_t rsds_brkg_req_val;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_led_light_req_left;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_led_light_req_right;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_ip_sound_req;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bsd_lca_warning_req_right;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bsd_lca_warning_reqleft;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dow_warning_req_right;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dow_warning_reqleft;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_rcw_trigger;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_err_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_brkg_trig;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_bli_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_trailer_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_lca_resp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_dow_resp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_rcw_resp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_rcta_resp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_rcta_brk_resp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_cta_actv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rcta_warning_req_right;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rcta_warning_req_left;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter_rsds_r_2;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_rsds_r_3;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t le_tar_sts;

    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_id_le;

    /**
     * Range: 0..1023 (-92.3..10 -)
     * Scale: 0.1
     * Offset: -92.3
     */
    uint16_t obj_lgt_posn_curv_le;

    /**
     * Range: 0..255 (-12.8..12.7 -)
     * Scale: 0.1
     * Offset: -12.8
     */
    uint8_t obj_lat_posn_curv_le;

    /**
     * Range: 0..1023 (-10..92.3 -)
     * Scale: 0.1
     * Offset: -10
     */
    uint16_t obj_lgt_spd_curv_le;

    /**
     * Range: 0..127 (-6.4..6.3 -)
     * Scale: 0.1
     * Offset: -6.4
     */
    uint8_t obj_lat_spd_curv_le;

    /**
     * Range: 0..127 (0..12.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t obj_ttc_le;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter_rsds_r_3;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_rsds_r_4;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_len_le;

    /**
     * Range: 0..7 (0..3.5 -)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t obj_width_le;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_staty_le;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t zone_ind_le;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_sts_le;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_rin_ri;

    /**
     * Range: 0..7 (0..3.5 -)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t obj_width_ri;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_staty_ri;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t zone_ind_ri;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_sts_ri;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter_rsds_r_4;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_rsds_r_5;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ri_tar_sts;

    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_id_ri;

    /**
     * Range: 0..1023 (-92.3..10 -)
     * Scale: 0.1
     * Offset: -92.3
     */
    uint16_t obj_lgt_posn_curv_ri;

    /**
     * Range: 0..255 (-12.8..12.7 -)
     * Scale: 0.1
     * Offset: -12.8
     */
    uint8_t obj_lat_posn_curv_ri;

    /**
     * Range: 0..1023 (-10..92.3 -)
     * Scale: 0.1
     * Offset: -10
     */
    uint16_t obj_lgt_spd_curv_ri;

    /**
     * Range: 0..127 (-6.4..6.3 -)
     * Scale: 0.1
     * Offset: -6.4
     */
    uint8_t obj_lat_spd_curv_ri;

    /**
     * Range: 0..127 (0..12.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t obj_ttc_ri;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rolling_counter_rsds_r_5;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t rsds_obj_dist_x_std_le;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t rsds_obj_dist_y_std_le;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t rsds_obj_rel_vel_x_std_le;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t rsds_obj_rel_vel_y_std_le;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t rsds_obj_r_accel_x_std_le;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t rsds_obj_r_accel_y_std_le;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t rsds_obj_dist_x_std_ri;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t rsds_obj_dist_y_std_ri;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t rsds_obj_rel_vel_x_std_ri;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t rsds_obj_rel_vel_y_std_ri;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t rsds_obj_r_accel_x_std_ri;

    /**
     * Range: 0..31 (0..11.625 -)
     * Scale: 0.375
     * Offset: 0
     */
    uint8_t rsds_obj_r_accel_y_std_ri;

    /**
     * Range: 0..1023 (-16..15.9688 -)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t rsds_obj_rel_accel_x_le;

    /**
     * Range: 0..1023 (-16..15.9688 -)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t rsds_obj_rel_accel_x_ri;

    /**
     * Range: 0..1023 (-16..15.9688 -)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t rsds_obj_rel_accel_y_ri;
};

/**
 * Signals in message RSDS_FD2.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_rsds_fd2_t {
    /**
     * Range: 0..63 (0..6.3 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t rcta_b_ttc;

    /**
     * Range: 0..63 (0..6.3 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bsd_lca_left_ttc;

    /**
     * Range: 0..63 (0..6.3 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bsd_lca_right_ttc;

    /**
     * Range: 0..63 (0..6.3 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t rcw_ttc;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_le_tgt_01;

    /**
     * Range: 0..80 (0..8 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t rsds_le_tgt_01_dy;

    /**
     * Range: 0..950 (-90..5 -)
     * Scale: 0.1
     * Offset: -90
     */
    uint16_t rsds_le_tgt_01_dx;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_le_tgt_02;

    /**
     * Range: 0..950 (-90..5 -)
     * Scale: 0.1
     * Offset: -90
     */
    uint16_t rsds_le_tgt_02_dx;

    /**
     * Range: 0..80 (0..8 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t rsds_le_tgt_02_dy;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_ri_tgt_01;

    /**
     * Range: 0..950 (-90..5 -)
     * Scale: 0.1
     * Offset: -90
     */
    uint16_t rsds_ri_tgt_01_dx;

    /**
     * Range: 0..80 (-8..0 -)
     * Scale: 0.1
     * Offset: -8
     */
    uint8_t rsds_ri_tgt_01_dy;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_ri_tgt_02;

    /**
     * Range: 0..950 (-90..5 -)
     * Scale: 0.1
     * Offset: -90
     */
    uint16_t rsds_ri_tgt_02_dx;

    /**
     * Range: 0..80 (-8..0 -)
     * Scale: 0.1
     * Offset: -8
     */
    uint8_t rsds_ri_tgt_02_dy;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_mid_tgt_01;

    /**
     * Range: 0..950 (-90..5 -)
     * Scale: 0.1
     * Offset: -90
     */
    uint16_t rsds_mid_tgt_01_dx;

    /**
     * Range: 0..80 (-4..4 -)
     * Scale: 0.1
     * Offset: -4
     */
    uint8_t rsds_mid_tgt_01_dy;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_mid_tgt_02;

    /**
     * Range: 0..950 (-90..5 -)
     * Scale: 0.1
     * Offset: -90
     */
    uint16_t rsds_mid_tgt_02_dx;

    /**
     * Range: 0..80 (-4..4 -)
     * Scale: 0.1
     * Offset: -4
     */
    uint8_t rsds_mid_tgt_02_dy;
};

/**
 * Signals in message Trailer1.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_trailer1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trailer_sts;
};

/**
 * Signals in message F_PBOX1.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_f_pbox1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hi_beam_sts_f_pbox;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t low_beam_sts_f_pbox;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t f_fog_lmp_sts_f_pbox;
};

/**
 * Signals in message DDCM1.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_ddcm1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_driver_led_sts;
};

/**
 * Signals in message PDCM1.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_pdcm1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rsds_pass_led_sts;
};

/**
 * Signals in message R_PBOX1.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_r_pbox1_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hi_posn_brk_lmp_fail_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t l_brk_lmp_fail_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_brk_lmp_fail_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t posn_lmp_outp_sts_r_pbox;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t l_turn_lmp_sts_r_pbox;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_turn_lmp_sts_r_pbox;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_fog_lmp_fail_sts_r_pbox;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_fog_lmp_sts_r_pbox;
};

/**
 * Pack message CR_FD1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_cr_fd1_pack(
    uint8_t *dst_p,
    const struct vehicle_cr_fd1_t *src_p,
    size_t size);

/**
 * Unpack message CR_FD1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_cr_fd1_unpack(
    struct vehicle_cr_fd1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CR_FD1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_cr_fd1_init(struct vehicle_cr_fd1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_checksum_cr_r_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_checksum_cr_r_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_checksum_cr_r_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_fcta_resp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_fcta_resp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_fcta_resp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_fctb_resp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_fctb_resp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_fctb_resp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_fcta_b_func_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_fcta_b_func_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_fcta_b_func_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_fcta_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_fcta_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_fcta_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_err_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_err_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_err_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_bli_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_bli_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_bli_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_brkg_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_brkg_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_brkg_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_fctb_trig_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_fctb_trig_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_fctb_trig_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_fctb_aba_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_fctb_aba_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_fctb_aba_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_fctb_aba_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_fctb_aba_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_fctb_aba_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_cr_fd1_cr_brkg_req_val_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_brkg_req_val_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_brkg_req_val_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_fctb_abp_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_fctb_abp_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_fctb_abp_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_fcta_b_ttc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_fcta_b_ttc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_fcta_b_ttc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_rolling_counter_cr_r_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_rolling_counter_cr_r_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_rolling_counter_cr_r_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_checksum_cr_r_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_checksum_cr_r_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_checksum_cr_r_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_dist_y_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_dist_y_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_dist_y_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_cr_fd1_cr_obj_dist_x_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_dist_x_le_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_dist_x_le_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_id_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_id_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_id_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_cr_fd1_cr_obj_rel_vel_x_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_rel_vel_x_le_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_rel_vel_x_le_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_cr_fd1_cr_obj_rel_accel_x_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_rel_accel_x_le_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_rel_accel_x_le_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_sts_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_sts_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_sts_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_motion_type_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_motion_type_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_motion_type_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_rolling_counter_cr_r_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_rolling_counter_cr_r_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_rolling_counter_cr_r_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_checksum_cr_r_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_checksum_cr_r_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_checksum_cr_r_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_dist_y_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_dist_y_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_dist_y_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_cr_fd1_cr_obj_dist_x_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_dist_x_ri_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_dist_x_ri_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_id_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_id_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_id_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_cr_fd1_cr_obj_rel_vel_x_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_rel_vel_x_ri_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_rel_vel_x_ri_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_cr_fd1_cr_obj_rel_accel_x_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_rel_accel_x_ri_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_rel_accel_x_ri_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_sts_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_sts_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_sts_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_motion_type_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_motion_type_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_motion_type_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_rolling_counter_cr_r_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_rolling_counter_cr_r_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_rolling_counter_cr_r_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_checksum_cr_r_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_checksum_cr_r_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_checksum_cr_r_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_cr_fd1_cr_obj_rel_accel_y_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_rel_accel_y_ri_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_rel_accel_y_ri_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_cr_fd1_cr_obj_rel_accel_y_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_rel_accel_y_le_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_rel_accel_y_le_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_rel_vel_y_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_rel_vel_y_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_rel_vel_y_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_rel_vel_y_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_rel_vel_y_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_rel_vel_y_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_rolling_counter_cr_r_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_rolling_counter_cr_r_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_rolling_counter_cr_r_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_dist_x_std_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_dist_x_std_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_dist_x_std_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_dist_y_std_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_dist_y_std_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_dist_y_std_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_rel_vel_x_std_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_rel_vel_x_std_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_rel_vel_x_std_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_rel_vel_y_std_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_rel_vel_y_std_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_rel_vel_y_std_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_r_accel_x_std_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_r_accel_x_std_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_r_accel_x_std_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_r_accel_y_std_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_r_accel_y_std_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_r_accel_y_std_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_dist_x_std_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_dist_x_std_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_dist_x_std_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_dist_y_std_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_dist_y_std_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_dist_y_std_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_rel_vel_x_std_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_rel_vel_x_std_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_rel_vel_x_std_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_rel_vel_y_std_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_rel_vel_y_std_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_rel_vel_y_std_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_r_accel_x_std_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_r_accel_x_std_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_r_accel_x_std_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_cr_fd1_cr_obj_r_accel_y_std_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_cr_fd1_cr_obj_r_accel_y_std_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_cr_fd1_cr_obj_r_accel_y_std_ri_is_in_range(uint8_t value);

/**
 * Pack message ACC_FD1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_acc_fd1_pack(
    uint8_t *dst_p,
    const struct vehicle_acc_fd1_t *src_p,
    size_t size);

/**
 * Unpack message ACC_FD1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_acc_fd1_unpack(
    struct vehicle_acc_fd1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_FD1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_acc_fd1_init(struct vehicle_acc_fd1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_acc_fd1_acc_cr_interface_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_acc_fd1_acc_cr_interface_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_acc_fd1_acc_cr_interface_is_in_range(uint8_t value);

/**
 * Pack message DCT5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_dct5_pack(
    uint8_t *dst_p,
    const struct vehicle_dct5_t *src_p,
    size_t size);

/**
 * Unpack message DCT5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_dct5_unpack(
    struct vehicle_dct5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DCT5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_dct5_init(struct vehicle_dct5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_dct5_current_gear_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_dct5_current_gear_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_dct5_current_gear_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_dct5_current_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_dct5_current_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_dct5_current_gear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_dct5_tgs_lever_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_dct5_tgs_lever_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_dct5_tgs_lever_is_in_range(uint8_t value);

/**
 * Pack message BCM1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_bcm1_pack(
    uint8_t *dst_p,
    const struct vehicle_bcm1_t *src_p,
    size_t size);

/**
 * Unpack message BCM1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_bcm1_unpack(
    struct vehicle_bcm1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BCM1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_bcm1_init(struct vehicle_bcm1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_bcm1_trunk_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_bcm1_trunk_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_bcm1_trunk_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_bcm1_drv_door_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_bcm1_drv_door_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_bcm1_drv_door_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_bcm1_lr_door_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_bcm1_lr_door_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_bcm1_lr_door_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_bcm1_passenger_door_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_bcm1_passenger_door_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_bcm1_passenger_door_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_bcm1_rr_door_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_bcm1_rr_door_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_bcm1_rr_door_sts_is_in_range(uint8_t value);

/**
 * Pack message BCM8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_bcm8_pack(
    uint8_t *dst_p,
    const struct vehicle_bcm8_t *src_p,
    size_t size);

/**
 * Unpack message BCM8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_bcm8_unpack(
    struct vehicle_bcm8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BCM8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_bcm8_init(struct vehicle_bcm8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_bcm8_checksum_bcm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_bcm8_checksum_bcm8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_bcm8_checksum_bcm8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_bcm8_pas_work_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_bcm8_pas_work_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_bcm8_pas_work_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_bcm8_r_view_mirror_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_bcm8_r_view_mirror_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_bcm8_r_view_mirror_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_bcm8_wipr_req_f_pbox_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_bcm8_wipr_req_f_pbox_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_bcm8_wipr_req_f_pbox_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_bcm8_rollingcounter_bcm8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_bcm8_rollingcounter_bcm8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_bcm8_rollingcounter_bcm8_is_in_range(uint8_t value);

/**
 * Pack message PEPS2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_peps2_pack(
    uint8_t *dst_p,
    const struct vehicle_peps2_t *src_p,
    size_t size);

/**
 * Unpack message PEPS2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_peps2_unpack(
    struct vehicle_peps2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PEPS2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_peps2_init(struct vehicle_peps2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_peps2_sys_power_mod_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_peps2_sys_power_mod_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_peps2_sys_power_mod_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_peps2_sys_power_mod_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_peps2_sys_power_mod_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_peps2_sys_power_mod_vld_is_in_range(uint8_t value);

/**
 * Pack message AC2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_ac2_pack(
    uint8_t *dst_p,
    const struct vehicle_ac2_t *src_p,
    size_t size);

/**
 * Unpack message AC2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_ac2_unpack(
    struct vehicle_ac2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AC2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_ac2_init(struct vehicle_ac2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ac2_ac_amb_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ac2_ac_amb_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ac2_ac_amb_temp_is_in_range(uint8_t value);

/**
 * Pack message CSA1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_csa1_pack(
    uint8_t *dst_p,
    const struct vehicle_csa1_t *src_p,
    size_t size);

/**
 * Unpack message CSA1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_csa1_unpack(
    struct vehicle_csa1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CSA1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_csa1_init(struct vehicle_csa1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_csa1_r_turn_lmp_swt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_csa1_r_turn_lmp_swt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_csa1_r_turn_lmp_swt_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_csa1_l_turn_lmp_swt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_csa1_l_turn_lmp_swt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_csa1_l_turn_lmp_swt_sts_is_in_range(uint8_t value);

/**
 * Pack message CSA2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_csa2_pack(
    uint8_t *dst_p,
    const struct vehicle_csa2_t *src_p,
    size_t size);

/**
 * Unpack message CSA2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_csa2_unpack(
    struct vehicle_csa2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CSA2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_csa2_init(struct vehicle_csa2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_csa2_checksum_csa2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_csa2_checksum_csa2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_csa2_checksum_csa2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_csa2_steer_wheel_ang_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_csa2_steer_wheel_ang_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_csa2_steer_wheel_ang_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_csa2_steer_wheel_ang_sign_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_csa2_steer_wheel_ang_sign_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_csa2_steer_wheel_ang_sign_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_csa2_steer_wheel_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_csa2_steer_wheel_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_csa2_steer_wheel_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_csa2_steer_wheel_spd_sign_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_csa2_steer_wheel_spd_sign_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_csa2_steer_wheel_spd_sign_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_csa2_sas_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_csa2_sas_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_csa2_sas_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_csa2_rollingcounter_csa2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_csa2_rollingcounter_csa2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_csa2_rollingcounter_csa2_is_in_range(uint8_t value);

/**
 * Pack message ABM2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_abm2_pack(
    uint8_t *dst_p,
    const struct vehicle_abm2_t *src_p,
    size_t size);

/**
 * Unpack message ABM2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_abm2_unpack(
    struct vehicle_abm2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ABM2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_abm2_init(struct vehicle_abm2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_abm2_check_sum_abm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_abm2_check_sum_abm2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_abm2_check_sum_abm2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_abm2_veh_lgt_accel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_abm2_veh_lgt_accel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_abm2_veh_lgt_accel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_abm2_veh_lat_accel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_abm2_veh_lat_accel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_abm2_veh_lat_accel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_abm2_veh_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_abm2_veh_yaw_rate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_abm2_veh_yaw_rate_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_abm2_veh_lgt_accel_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_abm2_veh_lgt_accel_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_abm2_veh_lgt_accel_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_abm2_veh_lat_accel_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_abm2_veh_lat_accel_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_abm2_veh_lat_accel_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_abm2_veh_dyn_yaw_rate_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_abm2_veh_dyn_yaw_rate_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_abm2_veh_dyn_yaw_rate_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_abm2_rolling_counter_abm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_abm2_rolling_counter_abm2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_abm2_rolling_counter_abm2_is_in_range(uint8_t value);

/**
 * Pack message IP2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_ip2_pack(
    uint8_t *dst_p,
    const struct vehicle_ip2_t *src_p,
    size_t size);

/**
 * Unpack message IP2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_ip2_unpack(
    struct vehicle_ip2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from IP2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_ip2_init(struct vehicle_ip2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t vehicle_ip2_ip_veh_tot_distance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ip2_ip_veh_tot_distance_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ip2_ip_veh_tot_distance_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ip2_ip_veh_tot_distance_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ip2_ip_veh_tot_distance_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ip2_ip_veh_tot_distance_valid_is_in_range(uint8_t value);

/**
 * Pack message HUT_FD1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_hut_fd1_pack(
    uint8_t *dst_p,
    const struct vehicle_hut_fd1_t *src_p,
    size_t size);

/**
 * Unpack message HUT_FD1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_hut_fd1_unpack(
    struct vehicle_hut_fd1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HUT_FD1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_hut_fd1_init(struct vehicle_hut_fd1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_hut_fd1_lca_swt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_hut_fd1_lca_swt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_hut_fd1_lca_swt_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_hut_fd1_rcta_swt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_hut_fd1_rcta_swt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_hut_fd1_rcta_swt_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_hut_fd1_rcta_brk_swt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_hut_fd1_rcta_brk_swt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_hut_fd1_rcta_brk_swt_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_hut_fd1_rcw_swt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_hut_fd1_rcw_swt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_hut_fd1_rcw_swt_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_hut_fd1_fcw_snvty_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_hut_fd1_fcw_snvty_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_hut_fd1_fcw_snvty_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_hut_fd1_dow_swt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_hut_fd1_dow_swt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_hut_fd1_dow_swt_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_hut_fd1_fcta_swt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_hut_fd1_fcta_swt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_hut_fd1_fcta_swt_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_hut_fd1_fcta_brk_swt_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_hut_fd1_fcta_brk_swt_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_hut_fd1_fcta_brk_swt_req_is_in_range(uint8_t value);

/**
 * Pack message HUT34.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_hut34_pack(
    uint8_t *dst_p,
    const struct vehicle_hut34_t *src_p,
    size_t size);

/**
 * Unpack message HUT34.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_hut34_unpack(
    struct vehicle_hut34_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HUT34.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_hut34_init(struct vehicle_hut34_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_hut34_time_hour_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_hut34_time_hour_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_hut34_time_hour_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_hut34_time_minutes_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_hut34_time_minutes_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_hut34_time_minutes_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_hut34_time_second_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_hut34_time_second_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_hut34_time_second_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_hut34_time_year_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_hut34_time_year_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_hut34_time_year_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_hut34_time_year_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_hut34_time_year_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_hut34_time_year_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_hut34_time_month_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_hut34_time_month_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_hut34_time_month_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_hut34_time_day_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_hut34_time_day_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_hut34_time_day_is_in_range(uint8_t value);

/**
 * Pack message ESP_FD2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_esp_fd2_pack(
    uint8_t *dst_p,
    const struct vehicle_esp_fd2_t *src_p,
    size_t size);

/**
 * Unpack message ESP_FD2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_esp_fd2_unpack(
    struct vehicle_esp_fd2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ESP_FD2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_esp_fd2_init(struct vehicle_esp_fd2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_check_sum_esp2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_check_sum_esp2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_check_sum_esp2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_veh_standstill_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_veh_standstill_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_veh_standstill_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_no_brk_force_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_no_brk_force_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_no_brk_force_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_brk_dsk_ovrheatd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_brk_dsk_ovrheatd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_brk_dsk_ovrheatd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_esp_diag_actv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_esp_diag_actv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_esp_diag_actv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_ab_aactv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_ab_aactv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_ab_aactv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_ab_aavailable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_ab_aavailable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_ab_aavailable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_hdc_ctrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_hdc_ctrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_hdc_ctrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_rolling_counter_esp2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_rolling_counter_esp2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_rolling_counter_esp2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_check_sum_esp1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_check_sum_esp1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_check_sum_esp1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_esp_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_esp_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_esp_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_esp_func_off_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_esp_func_off_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_esp_func_off_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_btc_actv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_btc_actv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_btc_actv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_ptc_actv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_ptc_actv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_ptc_actv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_msr_actv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_msr_actv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_msr_actv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_vdc_actv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_vdc_actv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_vdc_actv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_esp_master_cyl_brk_press_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_esp_master_cyl_brk_press_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_esp_master_cyl_brk_press_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_esp_fd2_esp_master_cyl_brk_press_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_esp_master_cyl_brk_press_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_esp_master_cyl_brk_press_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_rolling_counter_esp1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_rolling_counter_esp1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_rolling_counter_esp1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_check_sum_abs3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_check_sum_abs3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_check_sum_abs3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_abs_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_abs_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_abs_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_veh_spd_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_veh_spd_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_veh_spd_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_esp_fd2_veh_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_veh_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_veh_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_abs_actv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_abs_actv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_abs_actv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd2_rolling_counter_abs3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd2_rolling_counter_abs3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd2_rolling_counter_abs3_is_in_range(uint8_t value);

/**
 * Pack message ESP_FD3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_esp_fd3_pack(
    uint8_t *dst_p,
    const struct vehicle_esp_fd3_t *src_p,
    size_t size);

/**
 * Unpack message ESP_FD3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_esp_fd3_unpack(
    struct vehicle_esp_fd3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ESP_FD3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_esp_fd3_init(struct vehicle_esp_fd3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd3_check_sum_abs1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_check_sum_abs1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_check_sum_abs1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd3_fl_wheel_drive_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_fl_wheel_drive_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_fl_wheel_drive_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd3_fl_wheel_spd_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_fl_wheel_spd_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_fl_wheel_spd_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_esp_fd3_fl_wheel_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_fl_wheel_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_fl_wheel_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd3_fr_wheel_drive_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_fr_wheel_drive_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_fr_wheel_drive_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd3_fr_wheel_spd_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_fr_wheel_spd_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_fr_wheel_spd_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_esp_fd3_fr_wheel_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_fr_wheel_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_fr_wheel_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd3_rolling_counter_abs1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_rolling_counter_abs1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_rolling_counter_abs1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd3_epb_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_epb_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_epb_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd3_epb_err_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_epb_err_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_epb_err_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd3_check_sum_abs2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_check_sum_abs2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_check_sum_abs2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd3_rl_wheel_drive_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_rl_wheel_drive_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_rl_wheel_drive_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd3_rl_wheel_spd_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_rl_wheel_spd_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_rl_wheel_spd_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_esp_fd3_rl_wheel_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_rl_wheel_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_rl_wheel_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd3_rr_wheel_drive_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_rr_wheel_drive_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_rr_wheel_drive_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd3_rr_wheel_spd_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_rr_wheel_spd_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_rr_wheel_spd_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_esp_fd3_rr_wheel_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_rr_wheel_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_rr_wheel_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_esp_fd3_rolling_counter_abs2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_esp_fd3_rolling_counter_abs2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_esp_fd3_rolling_counter_abs2_is_in_range(uint8_t value);

/**
 * Pack message ECM_FD1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_ecm_fd1_pack(
    uint8_t *dst_p,
    const struct vehicle_ecm_fd1_t *src_p,
    size_t size);

/**
 * Unpack message ECM_FD1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_ecm_fd1_unpack(
    struct vehicle_ecm_fd1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ECM_FD1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_ecm_fd1_init(struct vehicle_ecm_fd1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ecm_fd1_hcu_powertrain_sts_p0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ecm_fd1_hcu_powertrain_sts_p0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ecm_fd1_hcu_powertrain_sts_p0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ecm_fd1_brk_pedal_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ecm_fd1_brk_pedal_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ecm_fd1_brk_pedal_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_ecm_fd1_eng_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ecm_fd1_eng_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ecm_fd1_eng_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ecm_fd1_eng_spd_vldty_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ecm_fd1_eng_spd_vldty_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ecm_fd1_eng_spd_vldty_is_in_range(uint8_t value);

/**
 * Pack message ECM_FD2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_ecm_fd2_pack(
    uint8_t *dst_p,
    const struct vehicle_ecm_fd2_t *src_p,
    size_t size);

/**
 * Unpack message ECM_FD2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_ecm_fd2_unpack(
    struct vehicle_ecm_fd2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ECM_FD2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_ecm_fd2_init(struct vehicle_ecm_fd2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ecm_fd2_accel_pedl_posn_diagc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ecm_fd2_accel_pedl_posn_diagc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ecm_fd2_accel_pedl_posn_diagc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ecm_fd2_accel_pedal_posn_vldty_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ecm_fd2_accel_pedal_posn_vldty_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ecm_fd2_accel_pedal_posn_vldty_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ecm_fd2_eng_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ecm_fd2_eng_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ecm_fd2_eng_state_is_in_range(uint8_t value);

/**
 * Pack message Ibooster_FD2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_ibooster_fd2_pack(
    uint8_t *dst_p,
    const struct vehicle_ibooster_fd2_t *src_p,
    size_t size);

/**
 * Unpack message Ibooster_FD2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_ibooster_fd2_unpack(
    struct vehicle_ibooster_fd2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Ibooster_FD2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_ibooster_fd2_init(struct vehicle_ibooster_fd2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ibooster_fd2_ib_brk_pedal_appld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ibooster_fd2_ib_brk_pedal_appld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ibooster_fd2_ib_brk_pedal_appld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ibooster_fd2_ib_brk_pedal_appld_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ibooster_fd2_ib_brk_pedal_appld_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ibooster_fd2_ib_brk_pedal_appld_vld_is_in_range(uint8_t value);

/**
 * Pack message EBOOSTER_FD1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_ebooster_fd1_pack(
    uint8_t *dst_p,
    const struct vehicle_ebooster_fd1_t *src_p,
    size_t size);

/**
 * Unpack message EBOOSTER_FD1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_ebooster_fd1_unpack(
    struct vehicle_ebooster_fd1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EBOOSTER_FD1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_ebooster_fd1_init(struct vehicle_ebooster_fd1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ebooster_fd1_eb_veh_standstill_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ebooster_fd1_eb_veh_standstill_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ebooster_fd1_eb_veh_standstill_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ebooster_fd1_eb_aebib_actv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ebooster_fd1_eb_aebib_actv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ebooster_fd1_eb_aebib_actv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ebooster_fd1_eb_aebba_actv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ebooster_fd1_eb_aebba_actv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ebooster_fd1_eb_aebba_actv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ebooster_fd1_eb_aeb_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ebooster_fd1_eb_aeb_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ebooster_fd1_eb_aeb_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ebooster_fd1_eb_abp_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ebooster_fd1_eb_abp_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ebooster_fd1_eb_abp_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ebooster_fd1_eb_abp_actv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ebooster_fd1_eb_abp_actv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ebooster_fd1_eb_abp_actv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ebooster_fd1_eb_cta_brk_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ebooster_fd1_eb_cta_brk_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ebooster_fd1_eb_cta_brk_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ebooster_fd1_eb_cta_actv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ebooster_fd1_eb_cta_actv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ebooster_fd1_eb_cta_actv_is_in_range(uint8_t value);

/**
 * Pack message ADAS_AD1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_adas_ad1_pack(
    uint8_t *dst_p,
    const struct vehicle_adas_ad1_t *src_p,
    size_t size);

/**
 * Unpack message ADAS_AD1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_adas_ad1_unpack(
    struct vehicle_adas_ad1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ADAS_AD1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_adas_ad1_init(struct vehicle_adas_ad1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_adas_ad1_sync_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_adas_ad1_sync_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_adas_ad1_sync_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_adas_ad1_sync_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_adas_ad1_sync_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_adas_ad1_sync_crc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_adas_ad1_sync_time_domain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_adas_ad1_sync_time_domain_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_adas_ad1_sync_time_domain_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_adas_ad1_sync_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_adas_ad1_sync_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_adas_ad1_sync_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_adas_ad1_sync_resd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_adas_ad1_sync_resd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_adas_ad1_sync_resd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_adas_ad1_sync_sgw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_adas_ad1_sync_sgw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_adas_ad1_sync_sgw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_adas_ad1_sync_ovs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_adas_ad1_sync_ovs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_adas_ad1_sync_ovs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t vehicle_adas_ad1_sync_sync_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_adas_ad1_sync_sync_time_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_adas_ad1_sync_sync_time_is_in_range(uint32_t value);

/**
 * Pack message DiagFuncReq.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_diag_func_req_pack(
    uint8_t *dst_p,
    const struct vehicle_diag_func_req_t *src_p,
    size_t size);

/**
 * Unpack message DiagFuncReq.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_diag_func_req_unpack(
    struct vehicle_diag_func_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DiagFuncReq.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_diag_func_req_init(struct vehicle_diag_func_req_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t vehicle_diag_func_req_diag_func_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_diag_func_req_diag_func_req_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_diag_func_req_diag_func_req_is_in_range(uint64_t value);

/**
 * Pack message FR_Phy_Req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_fr_phy_req_pack(
    uint8_t *dst_p,
    const struct vehicle_fr_phy_req_t *src_p,
    size_t size);

/**
 * Unpack message FR_Phy_Req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_fr_phy_req_unpack(
    struct vehicle_fr_phy_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FR_Phy_Req.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_fr_phy_req_init(struct vehicle_fr_phy_req_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t vehicle_fr_phy_req_fr_phy_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_fr_phy_req_fr_phy_req_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_fr_phy_req_fr_phy_req_is_in_range(uint64_t value);

/**
 * Pack message FR_Phy_Resp.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_fr_phy_resp_pack(
    uint8_t *dst_p,
    const struct vehicle_fr_phy_resp_t *src_p,
    size_t size);

/**
 * Unpack message FR_Phy_Resp.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_fr_phy_resp_unpack(
    struct vehicle_fr_phy_resp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FR_Phy_Resp.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_fr_phy_resp_init(struct vehicle_fr_phy_resp_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t vehicle_fr_phy_resp_fr_phy_resp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_fr_phy_resp_fr_phy_resp_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_fr_phy_resp_fr_phy_resp_is_in_range(uint64_t value);

/**
 * Pack message RSDS_FD1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_rsds_fd1_pack(
    uint8_t *dst_p,
    const struct vehicle_rsds_fd1_t *src_p,
    size_t size);

/**
 * Unpack message RSDS_FD1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rsds_fd1_unpack(
    struct vehicle_rsds_fd1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RSDS_FD1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_rsds_fd1_init(struct vehicle_rsds_fd1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_rsds_fd1_rsds_obj_rel_accel_y_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_obj_rel_accel_y_le_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_obj_rel_accel_y_le_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_checksum_rsds_r_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_checksum_rsds_r_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_checksum_rsds_r_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_brk_err_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_brk_err_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_brk_err_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_brkg_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_brkg_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_brkg_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_brkg_req_val_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_brkg_req_val_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_brkg_req_val_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_led_light_req_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_led_light_req_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_led_light_req_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_led_light_req_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_led_light_req_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_led_light_req_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_ip_sound_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_ip_sound_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_ip_sound_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_bsd_lca_warning_req_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_bsd_lca_warning_req_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_bsd_lca_warning_req_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_bsd_lca_warning_reqleft_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_bsd_lca_warning_reqleft_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_bsd_lca_warning_reqleft_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_dow_warning_req_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_dow_warning_req_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_dow_warning_req_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_dow_warning_reqleft_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_dow_warning_reqleft_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_dow_warning_reqleft_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_rcw_trigger_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_rcw_trigger_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_rcw_trigger_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_err_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_err_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_err_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_brkg_trig_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_brkg_trig_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_brkg_trig_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_bli_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_bli_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_bli_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_trailer_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_trailer_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_trailer_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_lca_resp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_lca_resp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_lca_resp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_dow_resp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_dow_resp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_dow_resp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_rcw_resp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_rcw_resp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_rcw_resp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_rcta_resp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_rcta_resp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_rcta_resp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_rcta_brk_resp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_rcta_brk_resp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_rcta_brk_resp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_cta_actv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_cta_actv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_cta_actv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rcta_warning_req_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rcta_warning_req_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rcta_warning_req_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rcta_warning_req_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rcta_warning_req_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rcta_warning_req_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rolling_counter_rsds_r_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rolling_counter_rsds_r_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rolling_counter_rsds_r_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_checksum_rsds_r_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_checksum_rsds_r_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_checksum_rsds_r_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_le_tar_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_le_tar_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_le_tar_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_obj_id_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_id_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_id_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_rsds_fd1_obj_lgt_posn_curv_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_lgt_posn_curv_le_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_lgt_posn_curv_le_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_obj_lat_posn_curv_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_lat_posn_curv_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_lat_posn_curv_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_rsds_fd1_obj_lgt_spd_curv_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_lgt_spd_curv_le_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_lgt_spd_curv_le_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_obj_lat_spd_curv_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_lat_spd_curv_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_lat_spd_curv_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_obj_ttc_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_ttc_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_ttc_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rolling_counter_rsds_r_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rolling_counter_rsds_r_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rolling_counter_rsds_r_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_checksum_rsds_r_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_checksum_rsds_r_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_checksum_rsds_r_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_obj_len_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_len_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_len_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_obj_width_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_width_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_width_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_obj_staty_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_staty_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_staty_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_zone_ind_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_zone_ind_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_zone_ind_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_obj_sts_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_sts_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_sts_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_obj_rin_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_rin_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_rin_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_obj_width_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_width_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_width_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_obj_staty_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_staty_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_staty_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_zone_ind_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_zone_ind_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_zone_ind_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_obj_sts_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_sts_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_sts_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rolling_counter_rsds_r_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rolling_counter_rsds_r_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rolling_counter_rsds_r_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_checksum_rsds_r_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_checksum_rsds_r_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_checksum_rsds_r_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_ri_tar_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_ri_tar_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_ri_tar_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_obj_id_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_id_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_id_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_rsds_fd1_obj_lgt_posn_curv_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_lgt_posn_curv_ri_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_lgt_posn_curv_ri_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_obj_lat_posn_curv_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_lat_posn_curv_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_lat_posn_curv_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_rsds_fd1_obj_lgt_spd_curv_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_lgt_spd_curv_ri_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_lgt_spd_curv_ri_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_obj_lat_spd_curv_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_lat_spd_curv_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_lat_spd_curv_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_obj_ttc_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_obj_ttc_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_obj_ttc_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rolling_counter_rsds_r_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rolling_counter_rsds_r_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rolling_counter_rsds_r_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_obj_dist_x_std_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_obj_dist_x_std_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_obj_dist_x_std_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_obj_dist_y_std_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_obj_dist_y_std_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_obj_dist_y_std_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_obj_rel_vel_x_std_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_obj_rel_vel_x_std_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_obj_rel_vel_x_std_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_obj_rel_vel_y_std_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_obj_rel_vel_y_std_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_obj_rel_vel_y_std_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_obj_r_accel_x_std_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_obj_r_accel_x_std_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_obj_r_accel_x_std_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_obj_r_accel_y_std_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_obj_r_accel_y_std_le_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_obj_r_accel_y_std_le_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_obj_dist_x_std_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_obj_dist_x_std_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_obj_dist_x_std_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_obj_dist_y_std_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_obj_dist_y_std_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_obj_dist_y_std_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_obj_rel_vel_x_std_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_obj_rel_vel_x_std_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_obj_rel_vel_x_std_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_obj_rel_vel_y_std_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_obj_rel_vel_y_std_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_obj_rel_vel_y_std_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_obj_r_accel_x_std_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_obj_r_accel_x_std_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_obj_r_accel_x_std_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd1_rsds_obj_r_accel_y_std_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_obj_r_accel_y_std_ri_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_obj_r_accel_y_std_ri_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_rsds_fd1_rsds_obj_rel_accel_x_le_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_obj_rel_accel_x_le_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_obj_rel_accel_x_le_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_rsds_fd1_rsds_obj_rel_accel_x_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_obj_rel_accel_x_ri_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_obj_rel_accel_x_ri_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_rsds_fd1_rsds_obj_rel_accel_y_ri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd1_rsds_obj_rel_accel_y_ri_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd1_rsds_obj_rel_accel_y_ri_is_in_range(uint16_t value);

/**
 * Pack message RSDS_FD2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_rsds_fd2_pack(
    uint8_t *dst_p,
    const struct vehicle_rsds_fd2_t *src_p,
    size_t size);

/**
 * Unpack message RSDS_FD2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rsds_fd2_unpack(
    struct vehicle_rsds_fd2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RSDS_FD2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_rsds_fd2_init(struct vehicle_rsds_fd2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd2_rcta_b_ttc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rcta_b_ttc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rcta_b_ttc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd2_bsd_lca_left_ttc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_bsd_lca_left_ttc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_bsd_lca_left_ttc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd2_bsd_lca_right_ttc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_bsd_lca_right_ttc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_bsd_lca_right_ttc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd2_rcw_ttc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rcw_ttc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rcw_ttc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd2_rsds_le_tgt_01_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_le_tgt_01_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_le_tgt_01_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd2_rsds_le_tgt_01_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_le_tgt_01_dy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_le_tgt_01_dy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_rsds_fd2_rsds_le_tgt_01_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_le_tgt_01_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_le_tgt_01_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd2_rsds_le_tgt_02_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_le_tgt_02_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_le_tgt_02_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_rsds_fd2_rsds_le_tgt_02_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_le_tgt_02_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_le_tgt_02_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd2_rsds_le_tgt_02_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_le_tgt_02_dy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_le_tgt_02_dy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd2_rsds_ri_tgt_01_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_ri_tgt_01_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_ri_tgt_01_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_rsds_fd2_rsds_ri_tgt_01_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_ri_tgt_01_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_ri_tgt_01_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd2_rsds_ri_tgt_01_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_ri_tgt_01_dy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_ri_tgt_01_dy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd2_rsds_ri_tgt_02_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_ri_tgt_02_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_ri_tgt_02_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_rsds_fd2_rsds_ri_tgt_02_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_ri_tgt_02_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_ri_tgt_02_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd2_rsds_ri_tgt_02_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_ri_tgt_02_dy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_ri_tgt_02_dy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd2_rsds_mid_tgt_01_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_mid_tgt_01_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_mid_tgt_01_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_rsds_fd2_rsds_mid_tgt_01_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_mid_tgt_01_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_mid_tgt_01_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd2_rsds_mid_tgt_01_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_mid_tgt_01_dy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_mid_tgt_01_dy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd2_rsds_mid_tgt_02_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_mid_tgt_02_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_mid_tgt_02_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t vehicle_rsds_fd2_rsds_mid_tgt_02_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_mid_tgt_02_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_mid_tgt_02_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_rsds_fd2_rsds_mid_tgt_02_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_rsds_fd2_rsds_mid_tgt_02_dy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_rsds_fd2_rsds_mid_tgt_02_dy_is_in_range(uint8_t value);

/**
 * Pack message Trailer1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_trailer1_pack(
    uint8_t *dst_p,
    const struct vehicle_trailer1_t *src_p,
    size_t size);

/**
 * Unpack message Trailer1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_trailer1_unpack(
    struct vehicle_trailer1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Trailer1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_trailer1_init(struct vehicle_trailer1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_trailer1_trailer_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_trailer1_trailer_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_trailer1_trailer_sts_is_in_range(uint8_t value);

/**
 * Pack message F_PBOX1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_f_pbox1_pack(
    uint8_t *dst_p,
    const struct vehicle_f_pbox1_t *src_p,
    size_t size);

/**
 * Unpack message F_PBOX1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_f_pbox1_unpack(
    struct vehicle_f_pbox1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from F_PBOX1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_f_pbox1_init(struct vehicle_f_pbox1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_f_pbox1_hi_beam_sts_f_pbox_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_f_pbox1_hi_beam_sts_f_pbox_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_f_pbox1_hi_beam_sts_f_pbox_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_f_pbox1_low_beam_sts_f_pbox_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_f_pbox1_low_beam_sts_f_pbox_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_f_pbox1_low_beam_sts_f_pbox_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_f_pbox1_f_fog_lmp_sts_f_pbox_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_f_pbox1_f_fog_lmp_sts_f_pbox_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_f_pbox1_f_fog_lmp_sts_f_pbox_is_in_range(uint8_t value);

/**
 * Pack message DDCM1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_ddcm1_pack(
    uint8_t *dst_p,
    const struct vehicle_ddcm1_t *src_p,
    size_t size);

/**
 * Unpack message DDCM1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_ddcm1_unpack(
    struct vehicle_ddcm1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DDCM1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_ddcm1_init(struct vehicle_ddcm1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_ddcm1_rsds_driver_led_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_ddcm1_rsds_driver_led_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_ddcm1_rsds_driver_led_sts_is_in_range(uint8_t value);

/**
 * Pack message PDCM1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_pdcm1_pack(
    uint8_t *dst_p,
    const struct vehicle_pdcm1_t *src_p,
    size_t size);

/**
 * Unpack message PDCM1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_pdcm1_unpack(
    struct vehicle_pdcm1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PDCM1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_pdcm1_init(struct vehicle_pdcm1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_pdcm1_rsds_pass_led_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_pdcm1_rsds_pass_led_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_pdcm1_rsds_pass_led_sts_is_in_range(uint8_t value);

/**
 * Pack message R_PBOX1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_r_pbox1_pack(
    uint8_t *dst_p,
    const struct vehicle_r_pbox1_t *src_p,
    size_t size);

/**
 * Unpack message R_PBOX1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_r_pbox1_unpack(
    struct vehicle_r_pbox1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from R_PBOX1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_r_pbox1_init(struct vehicle_r_pbox1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_r_pbox1_hi_posn_brk_lmp_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_r_pbox1_hi_posn_brk_lmp_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_r_pbox1_hi_posn_brk_lmp_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_r_pbox1_l_brk_lmp_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_r_pbox1_l_brk_lmp_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_r_pbox1_l_brk_lmp_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_r_pbox1_r_brk_lmp_fail_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_r_pbox1_r_brk_lmp_fail_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_r_pbox1_r_brk_lmp_fail_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_r_pbox1_posn_lmp_outp_sts_r_pbox_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_r_pbox1_posn_lmp_outp_sts_r_pbox_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_r_pbox1_posn_lmp_outp_sts_r_pbox_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_r_pbox1_l_turn_lmp_sts_r_pbox_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_r_pbox1_l_turn_lmp_sts_r_pbox_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_r_pbox1_l_turn_lmp_sts_r_pbox_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_r_pbox1_r_turn_lmp_sts_r_pbox_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_r_pbox1_r_turn_lmp_sts_r_pbox_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_r_pbox1_r_turn_lmp_sts_r_pbox_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_r_pbox1_r_fog_lmp_fail_sts_r_pbox_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_r_pbox1_r_fog_lmp_fail_sts_r_pbox_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_r_pbox1_r_fog_lmp_fail_sts_r_pbox_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t vehicle_r_pbox1_r_fog_lmp_sts_r_pbox_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_r_pbox1_r_fog_lmp_sts_r_pbox_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_r_pbox1_r_fog_lmp_sts_r_pbox_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
