/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Thu Apr 25 17:56:11 2024.
 */

#ifndef ECU_H
#define ECU_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

extern struct ecu_acc_382_t g_ecu_acc_382;
extern struct ecu_gw_2_a4_t g_ecu_gw_2a4;
extern struct ecu_gw_765_t g_ecu_gw_765;
extern struct ecu_acc_76_d_t g_ecu_acc_76d;
extern struct ecu_gw_791_t g_ecu_gw_791;
extern struct ecu_acc_799_t g_ecu_acc_799;
extern struct ecu_gw_752_t g_ecu_gw_752;
extern struct ecu_las_75_a_t g_ecu_las_75a;
extern struct ecu_gw_763_t g_ecu_gw_763;
extern struct ecu_las_76_b_t g_ecu_las_76b;
extern struct ecu_las_592_t g_ecu_las_592;
extern struct ecu_acc_594_t g_ecu_acc_594;
extern struct ecu_gw_50_t g_ecu_gw_50;
extern struct ecu_gw_170_t g_ecu_gw_170;
extern struct ecu_gw_180_t g_ecu_gw_180;
extern struct ecu_acc_244_t g_ecu_acc_244;
extern struct ecu_gw_278_t g_ecu_gw_278;
extern struct ecu_gw_298_t g_ecu_gw_298;
extern struct ecu_acc_307_t g_ecu_acc_307;
extern struct ecu_acc_312_t g_ecu_acc_312;
extern struct ecu_gw_340_t g_ecu_gw_340;
extern struct ecu_gw_347_t g_ecu_gw_347;
extern struct ecu_gw_365_t g_ecu_gw_365;
extern struct ecu_gw_366_t g_ecu_gw_366;
extern struct ecu_gw_387_t g_ecu_gw_387;
extern struct ecu_gw_390_t g_ecu_gw_390;
extern struct ecu_gw_396_t g_ecu_gw_396;
extern struct ecu_gw_507_t g_ecu_gw_507;
extern struct ecu_gw_516_t g_ecu_gw_516;
extern struct ecu_gw_530_t g_ecu_gw_530;
extern struct ecu_gw_187_t g_ecu_gw_187;
extern struct ecu_gw_197_t g_ecu_gw_197;
extern struct ecu_gw_194_t g_ecu_gw_194;
extern struct ecu_gw_17_d_t g_ecu_gw_17d;
extern struct ecu_gw_17_e_t g_ecu_gw_17e;
extern struct ecu_acc_1_ba_t g_ecu_acc_1ba;
extern struct ecu_gw_20_b_t g_ecu_gw_20b;
extern struct ecu_gw_24_f_t g_ecu_gw_24f;
extern struct ecu_gw_28_b_t g_ecu_gw_28b;
extern struct ecu_gw_2_d1_t g_ecu_gw_2d1;
extern struct ecu_gw_2_de_t g_ecu_gw_2de;
extern struct ecu_gw_2_e6_t g_ecu_gw_2e6;
extern struct ecu_acc_31_a_t g_ecu_acc_31a;
extern struct ecu_gw_355_t g_ecu_gw_355;
extern struct ecu_gw_3_af_t g_ecu_gw_3af;
extern struct ecu_gw_3_b3_t g_ecu_gw_3b3;
extern struct ecu_gw_3_bd_t g_ecu_gw_3bd;
extern struct ecu_gw_3_c4_t g_ecu_gw_3c4;
extern struct ecu_gw_3_fd_t g_ecu_gw_3fd;
extern struct ecu_gw_3_ff_t g_ecu_gw_3ff;
extern struct ecu_gw_51_e_t g_ecu_gw_51e;
extern struct ecu_acc_693_t g_ecu_acc_693;
extern struct ecu_las_694_t g_ecu_las_694;
extern struct ecu_las_452_t g_ecu_las_452;
extern struct ecu_gw_28_c_t g_ecu_gw_28c;
extern struct ecu_gw_331_t g_ecu_gw_331;
extern struct ecu_gw_1_af_t g_ecu_gw_1af;
extern struct ecu_gw_320_t g_ecu_gw_320;
extern struct ecu_las_39_a_t g_ecu_las_39a;
extern struct ecu_gw_310_t g_ecu_gw_310;
extern struct ecu_gw_3_e8_t g_ecu_gw_3e8;
extern struct ecu_gw_3_e7_t g_ecu_gw_3e7;
extern struct ecu_gw_38_a_t g_ecu_gw_38a;
extern struct ecu_gw_249_t g_ecu_gw_249;
extern struct ecu_gw_262_t g_ecu_gw_262;
extern struct ecu_gw_334_t g_ecu_gw_334;
extern struct ecu_gw_395_t g_ecu_gw_395;
extern struct ecu_gw_18_a_t g_ecu_gw_18a;
extern struct ecu_gw_24_a_t g_ecu_gw_24a;
extern struct ecu_gw_25_c_t g_ecu_gw_25c;
extern struct ecu_gw_2_d7_t g_ecu_gw_2d7;
extern struct ecu_gw_341_t g_ecu_gw_341;
extern struct ecu_gw_3_d6_t g_ecu_gw_3d6;
extern struct ecu_gw_3_d8_t g_ecu_gw_3d8;
extern struct ecu_gw_3_de_t g_ecu_gw_3de;
extern struct ecu_gw_3_ee_t g_ecu_gw_3ee;
extern struct ecu_gw_6_b0_t g_ecu_gw_6b0;
extern struct ecu_acc_2_d3_t g_ecu_acc_2d3;
extern struct ecu_acc_301_t g_ecu_acc_301;
extern struct ecu_las_30_c_t g_ecu_las_30c;
extern struct ecu_gw_2_e2_t g_ecu_gw_2e2;
extern struct ecu_gw_2_e3_t g_ecu_gw_2e3;
extern struct ecu_gw_2_c9_t g_ecu_gw_2c9;
extern struct ecu_gw_761_t g_ecu_gw_761;
extern struct ecu_gw_57_d_t g_ecu_gw_57d;
extern struct ecu_gw_518_t g_ecu_gw_518;
extern struct ecu_gw_2_ae_t g_ecu_gw_2ae;
extern struct ecu_las_3_d9_t g_ecu_las_3d9;
extern struct ecu_las_3_db_t g_ecu_las_3db;
extern struct ecu_gw_371_t g_ecu_gw_371;
extern struct ecu_gw_31_c_t g_ecu_gw_31c;
extern struct ecu_gw_10_a_t g_ecu_gw_10a;
extern struct ecu_bdc_400_t g_ecu_bdc_400;
extern struct ecu_acc_453_t g_ecu_acc_453;
extern struct ecu_gw_7_df_t g_ecu_gw_7df;
extern struct ecu_gw_15_d_t g_ecu_gw_15d;
extern struct ecu_gw_10_f_t g_ecu_gw_10f;
extern struct ecu_gw_32_a_t g_ecu_gw_32a;
extern struct ecu_gw_3_be_t g_ecu_gw_3be;
extern struct ecu_gw_37_a_t g_ecu_gw_37a;
/* Frame ids. */
#define ECU_ACC_382_FRAME_ID (0x382u)
#define ECU_GW_2_A4_FRAME_ID (0x2a4u)
#define ECU_GW_765_FRAME_ID (0x765u)
#define ECU_ACC_76_D_FRAME_ID (0x76du)
#define ECU_GW_791_FRAME_ID (0x791u)
#define ECU_ACC_799_FRAME_ID (0x799u)
#define ECU_GW_752_FRAME_ID (0x752u)
#define ECU_LAS_75_A_FRAME_ID (0x75au)
#define ECU_GW_763_FRAME_ID (0x763u)
#define ECU_LAS_76_B_FRAME_ID (0x76bu)
#define ECU_LAS_592_FRAME_ID (0x592u)
#define ECU_ACC_594_FRAME_ID (0x594u)
#define ECU_GW_50_FRAME_ID (0x50u)
#define ECU_GW_170_FRAME_ID (0x170u)
#define ECU_GW_180_FRAME_ID (0x180u)
#define ECU_ACC_244_FRAME_ID (0x244u)
#define ECU_GW_278_FRAME_ID (0x278u)
#define ECU_GW_298_FRAME_ID (0x298u)
#define ECU_ACC_307_FRAME_ID (0x307u)
#define ECU_ACC_312_FRAME_ID (0x312u)
#define ECU_GW_340_FRAME_ID (0x340u)
#define ECU_GW_347_FRAME_ID (0x347u)
#define ECU_GW_365_FRAME_ID (0x365u)
#define ECU_GW_366_FRAME_ID (0x366u)
#define ECU_GW_387_FRAME_ID (0x387u)
#define ECU_GW_390_FRAME_ID (0x390u)
#define ECU_GW_396_FRAME_ID (0x396u)
#define ECU_GW_507_FRAME_ID (0x507u)
#define ECU_GW_516_FRAME_ID (0x516u)
#define ECU_GW_530_FRAME_ID (0x530u)
#define ECU_GW_187_FRAME_ID (0x187u)
#define ECU_GW_197_FRAME_ID (0x197u)
#define ECU_GW_194_FRAME_ID (0x194u)
#define ECU_GW_17_D_FRAME_ID (0x17du)
#define ECU_GW_17_E_FRAME_ID (0x17eu)
#define ECU_ACC_1_BA_FRAME_ID (0x1bau)
#define ECU_GW_20_B_FRAME_ID (0x20bu)
#define ECU_GW_24_F_FRAME_ID (0x24fu)
#define ECU_GW_28_B_FRAME_ID (0x28bu)
#define ECU_GW_2_D1_FRAME_ID (0x2d1u)
#define ECU_GW_2_DE_FRAME_ID (0x2deu)
#define ECU_GW_2_E6_FRAME_ID (0x2e6u)
#define ECU_ACC_31_A_FRAME_ID (0x31au)
#define ECU_GW_355_FRAME_ID (0x355u)
#define ECU_GW_3_AF_FRAME_ID (0x3afu)
#define ECU_GW_3_B3_FRAME_ID (0x3b3u)
#define ECU_GW_3_BD_FRAME_ID (0x3bdu)
#define ECU_GW_3_C4_FRAME_ID (0x3c4u)
#define ECU_GW_3_FD_FRAME_ID (0x3fdu)
#define ECU_GW_3_FF_FRAME_ID (0x3ffu)
#define ECU_GW_51_E_FRAME_ID (0x51eu)
#define ECU_ACC_693_FRAME_ID (0x693u)
#define ECU_LAS_694_FRAME_ID (0x694u)
#define ECU_LAS_452_FRAME_ID (0x452u)
#define ECU_GW_28_C_FRAME_ID (0x28cu)
#define ECU_GW_331_FRAME_ID (0x331u)
#define ECU_GW_1_AF_FRAME_ID (0x1afu)
#define ECU_GW_320_FRAME_ID (0x320u)
#define ECU_LAS_39_A_FRAME_ID (0x39au)
#define ECU_GW_310_FRAME_ID (0x310u)
#define ECU_GW_3_E8_FRAME_ID (0x3e8u)
#define ECU_GW_3_E7_FRAME_ID (0x3e7u)
#define ECU_GW_38_A_FRAME_ID (0x38au)
#define ECU_GW_249_FRAME_ID (0x249u)
#define ECU_GW_262_FRAME_ID (0x262u)
#define ECU_GW_334_FRAME_ID (0x334u)
#define ECU_GW_395_FRAME_ID (0x395u)
#define ECU_GW_18_A_FRAME_ID (0x18au)
#define ECU_GW_24_A_FRAME_ID (0x24au)
#define ECU_GW_25_C_FRAME_ID (0x25cu)
#define ECU_GW_2_D7_FRAME_ID (0x2d7u)
#define ECU_GW_341_FRAME_ID (0x341u)
#define ECU_GW_3_D6_FRAME_ID (0x3d6u)
#define ECU_GW_3_D8_FRAME_ID (0x3d8u)
#define ECU_GW_3_DE_FRAME_ID (0x3deu)
#define ECU_GW_3_EE_FRAME_ID (0x3eeu)
#define ECU_GW_6_B0_FRAME_ID (0x6b0u)
#define ECU_ACC_2_D3_FRAME_ID (0x2d3u)
#define ECU_ACC_301_FRAME_ID (0x301u)
#define ECU_LAS_30_C_FRAME_ID (0x30cu)
#define ECU_GW_2_E2_FRAME_ID (0x2e2u)
#define ECU_GW_2_E3_FRAME_ID (0x2e3u)
#define ECU_GW_2_C9_FRAME_ID (0x2c9u)
#define ECU_GW_761_FRAME_ID (0x761u)
#define ECU_GW_57_D_FRAME_ID (0x57du)
#define ECU_GW_518_FRAME_ID (0x518u)
#define ECU_GW_2_AE_FRAME_ID (0x2aeu)
#define ECU_LAS_3_D9_FRAME_ID (0x3d9u)
#define ECU_LAS_3_DB_FRAME_ID (0x3dbu)
#define ECU_GW_371_FRAME_ID (0x371u)
#define ECU_GW_31_C_FRAME_ID (0x31cu)
#define ECU_GW_10_A_FRAME_ID (0x10au)
#define ECU_BDC_400_FRAME_ID (0x400u)
#define ECU_ACC_453_FRAME_ID (0x453u)
#define ECU_GW_7_DF_FRAME_ID (0x7dfu)
#define ECU_GW_15_D_FRAME_ID (0x15du)
#define ECU_GW_10_F_FRAME_ID (0x10fu)
#define ECU_GW_32_A_FRAME_ID (0x32au)
#define ECU_GW_3_BE_FRAME_ID (0x3beu)
#define ECU_GW_37_A_FRAME_ID (0x37au)

/* Frame lengths in bytes. */
#define ECU_ACC_382_LENGTH (64u)
#define ECU_GW_2_A4_LENGTH (64u)
#define ECU_GW_765_LENGTH (64u)
#define ECU_ACC_76_D_LENGTH (64u)
#define ECU_GW_791_LENGTH (8u)
#define ECU_ACC_799_LENGTH (8u)
#define ECU_GW_752_LENGTH (64u)
#define ECU_LAS_75_A_LENGTH (64u)
#define ECU_GW_763_LENGTH (8u)
#define ECU_LAS_76_B_LENGTH (8u)
#define ECU_LAS_592_LENGTH (8u)
#define ECU_ACC_594_LENGTH (8u)
#define ECU_GW_50_LENGTH (8u)
#define ECU_GW_170_LENGTH (8u)
#define ECU_GW_180_LENGTH (8u)
#define ECU_ACC_244_LENGTH (64u)
#define ECU_GW_278_LENGTH (8u)
#define ECU_GW_298_LENGTH (8u)
#define ECU_ACC_307_LENGTH (64u)
#define ECU_ACC_312_LENGTH (64u)
#define ECU_GW_340_LENGTH (8u)
#define ECU_GW_347_LENGTH (8u)
#define ECU_GW_365_LENGTH (32u)
#define ECU_GW_366_LENGTH (8u)
#define ECU_GW_387_LENGTH (8u)
#define ECU_GW_390_LENGTH (8u)
#define ECU_GW_396_LENGTH (8u)
#define ECU_GW_507_LENGTH (64u)
#define ECU_GW_516_LENGTH (32u)
#define ECU_GW_530_LENGTH (8u)
#define ECU_GW_187_LENGTH (8u)
#define ECU_GW_197_LENGTH (8u)
#define ECU_GW_194_LENGTH (8u)
#define ECU_GW_17_D_LENGTH (64u)
#define ECU_GW_17_E_LENGTH (8u)
#define ECU_ACC_1_BA_LENGTH (32u)
#define ECU_GW_20_B_LENGTH (64u)
#define ECU_GW_24_F_LENGTH (8u)
#define ECU_GW_28_B_LENGTH (8u)
#define ECU_GW_2_D1_LENGTH (8u)
#define ECU_GW_2_DE_LENGTH (8u)
#define ECU_GW_2_E6_LENGTH (8u)
#define ECU_ACC_31_A_LENGTH (64u)
#define ECU_GW_355_LENGTH (8u)
#define ECU_GW_3_AF_LENGTH (64u)
#define ECU_GW_3_B3_LENGTH (8u)
#define ECU_GW_3_BD_LENGTH (64u)
#define ECU_GW_3_C4_LENGTH (64u)
#define ECU_GW_3_FD_LENGTH (8u)
#define ECU_GW_3_FF_LENGTH (8u)
#define ECU_GW_51_E_LENGTH (8u)
#define ECU_ACC_693_LENGTH (8u)
#define ECU_LAS_694_LENGTH (8u)
#define ECU_LAS_452_LENGTH (8u)
#define ECU_GW_28_C_LENGTH (8u)
#define ECU_GW_331_LENGTH (8u)
#define ECU_GW_1_AF_LENGTH (8u)
#define ECU_GW_320_LENGTH (8u)
#define ECU_LAS_39_A_LENGTH (64u)
#define ECU_GW_310_LENGTH (8u)
#define ECU_GW_3_E8_LENGTH (8u)
#define ECU_GW_3_E7_LENGTH (8u)
#define ECU_GW_38_A_LENGTH (8u)
#define ECU_GW_249_LENGTH (8u)
#define ECU_GW_262_LENGTH (8u)
#define ECU_GW_334_LENGTH (8u)
#define ECU_GW_395_LENGTH (64u)
#define ECU_GW_18_A_LENGTH (8u)
#define ECU_GW_24_A_LENGTH (8u)
#define ECU_GW_25_C_LENGTH (8u)
#define ECU_GW_2_D7_LENGTH (8u)
#define ECU_GW_341_LENGTH (8u)
#define ECU_GW_3_D6_LENGTH (8u)
#define ECU_GW_3_D8_LENGTH (8u)
#define ECU_GW_3_DE_LENGTH (8u)
#define ECU_GW_3_EE_LENGTH (8u)
#define ECU_GW_6_B0_LENGTH (8u)
#define ECU_ACC_2_D3_LENGTH (64u)
#define ECU_ACC_301_LENGTH (8u)
#define ECU_LAS_30_C_LENGTH (8u)
#define ECU_GW_2_E2_LENGTH (64u)
#define ECU_GW_2_E3_LENGTH (64u)
#define ECU_GW_2_C9_LENGTH (8u)
#define ECU_GW_761_LENGTH (64u)
#define ECU_GW_57_D_LENGTH (8u)
#define ECU_GW_518_LENGTH (8u)
#define ECU_GW_2_AE_LENGTH (8u)
#define ECU_LAS_3_D9_LENGTH (64u)
#define ECU_LAS_3_DB_LENGTH (64u)
#define ECU_GW_371_LENGTH (8u)
#define ECU_GW_31_C_LENGTH (8u)
#define ECU_GW_10_A_LENGTH (8u)
#define ECU_BDC_400_LENGTH (8u)
#define ECU_ACC_453_LENGTH (8u)
#define ECU_GW_7_DF_LENGTH (8u)
#define ECU_GW_15_D_LENGTH (8u)
#define ECU_GW_10_F_LENGTH (8u)
#define ECU_GW_32_A_LENGTH (8u)
#define ECU_GW_3_BE_LENGTH (8u)
#define ECU_GW_37_A_LENGTH (64u)

/* Extended or standard frame types. */
#define ECU_ACC_382_IS_EXTENDED (0)
#define ECU_GW_2_A4_IS_EXTENDED (0)
#define ECU_GW_765_IS_EXTENDED (0)
#define ECU_ACC_76_D_IS_EXTENDED (0)
#define ECU_GW_791_IS_EXTENDED (0)
#define ECU_ACC_799_IS_EXTENDED (0)
#define ECU_GW_752_IS_EXTENDED (0)
#define ECU_LAS_75_A_IS_EXTENDED (0)
#define ECU_GW_763_IS_EXTENDED (0)
#define ECU_LAS_76_B_IS_EXTENDED (0)
#define ECU_LAS_592_IS_EXTENDED (0)
#define ECU_ACC_594_IS_EXTENDED (0)
#define ECU_GW_50_IS_EXTENDED (0)
#define ECU_GW_170_IS_EXTENDED (0)
#define ECU_GW_180_IS_EXTENDED (0)
#define ECU_ACC_244_IS_EXTENDED (0)
#define ECU_GW_278_IS_EXTENDED (0)
#define ECU_GW_298_IS_EXTENDED (0)
#define ECU_ACC_307_IS_EXTENDED (0)
#define ECU_ACC_312_IS_EXTENDED (0)
#define ECU_GW_340_IS_EXTENDED (0)
#define ECU_GW_347_IS_EXTENDED (0)
#define ECU_GW_365_IS_EXTENDED (0)
#define ECU_GW_366_IS_EXTENDED (0)
#define ECU_GW_387_IS_EXTENDED (0)
#define ECU_GW_390_IS_EXTENDED (0)
#define ECU_GW_396_IS_EXTENDED (0)
#define ECU_GW_507_IS_EXTENDED (0)
#define ECU_GW_516_IS_EXTENDED (0)
#define ECU_GW_530_IS_EXTENDED (0)
#define ECU_GW_187_IS_EXTENDED (0)
#define ECU_GW_197_IS_EXTENDED (0)
#define ECU_GW_194_IS_EXTENDED (0)
#define ECU_GW_17_D_IS_EXTENDED (0)
#define ECU_GW_17_E_IS_EXTENDED (0)
#define ECU_ACC_1_BA_IS_EXTENDED (0)
#define ECU_GW_20_B_IS_EXTENDED (0)
#define ECU_GW_24_F_IS_EXTENDED (0)
#define ECU_GW_28_B_IS_EXTENDED (0)
#define ECU_GW_2_D1_IS_EXTENDED (0)
#define ECU_GW_2_DE_IS_EXTENDED (0)
#define ECU_GW_2_E6_IS_EXTENDED (0)
#define ECU_ACC_31_A_IS_EXTENDED (0)
#define ECU_GW_355_IS_EXTENDED (0)
#define ECU_GW_3_AF_IS_EXTENDED (0)
#define ECU_GW_3_B3_IS_EXTENDED (0)
#define ECU_GW_3_BD_IS_EXTENDED (0)
#define ECU_GW_3_C4_IS_EXTENDED (0)
#define ECU_GW_3_FD_IS_EXTENDED (0)
#define ECU_GW_3_FF_IS_EXTENDED (0)
#define ECU_GW_51_E_IS_EXTENDED (0)
#define ECU_ACC_693_IS_EXTENDED (0)
#define ECU_LAS_694_IS_EXTENDED (0)
#define ECU_LAS_452_IS_EXTENDED (0)
#define ECU_GW_28_C_IS_EXTENDED (0)
#define ECU_GW_331_IS_EXTENDED (0)
#define ECU_GW_1_AF_IS_EXTENDED (0)
#define ECU_GW_320_IS_EXTENDED (0)
#define ECU_LAS_39_A_IS_EXTENDED (0)
#define ECU_GW_310_IS_EXTENDED (0)
#define ECU_GW_3_E8_IS_EXTENDED (0)
#define ECU_GW_3_E7_IS_EXTENDED (0)
#define ECU_GW_38_A_IS_EXTENDED (0)
#define ECU_GW_249_IS_EXTENDED (0)
#define ECU_GW_262_IS_EXTENDED (0)
#define ECU_GW_334_IS_EXTENDED (0)
#define ECU_GW_395_IS_EXTENDED (0)
#define ECU_GW_18_A_IS_EXTENDED (0)
#define ECU_GW_24_A_IS_EXTENDED (0)
#define ECU_GW_25_C_IS_EXTENDED (0)
#define ECU_GW_2_D7_IS_EXTENDED (0)
#define ECU_GW_341_IS_EXTENDED (0)
#define ECU_GW_3_D6_IS_EXTENDED (0)
#define ECU_GW_3_D8_IS_EXTENDED (0)
#define ECU_GW_3_DE_IS_EXTENDED (0)
#define ECU_GW_3_EE_IS_EXTENDED (0)
#define ECU_GW_6_B0_IS_EXTENDED (0)
#define ECU_ACC_2_D3_IS_EXTENDED (0)
#define ECU_ACC_301_IS_EXTENDED (0)
#define ECU_LAS_30_C_IS_EXTENDED (0)
#define ECU_GW_2_E2_IS_EXTENDED (0)
#define ECU_GW_2_E3_IS_EXTENDED (0)
#define ECU_GW_2_C9_IS_EXTENDED (0)
#define ECU_GW_761_IS_EXTENDED (0)
#define ECU_GW_57_D_IS_EXTENDED (0)
#define ECU_GW_518_IS_EXTENDED (0)
#define ECU_GW_2_AE_IS_EXTENDED (0)
#define ECU_LAS_3_D9_IS_EXTENDED (0)
#define ECU_LAS_3_DB_IS_EXTENDED (0)
#define ECU_GW_371_IS_EXTENDED (0)
#define ECU_GW_31_C_IS_EXTENDED (0)
#define ECU_GW_10_A_IS_EXTENDED (0)
#define ECU_BDC_400_IS_EXTENDED (0)
#define ECU_ACC_453_IS_EXTENDED (0)
#define ECU_GW_7_DF_IS_EXTENDED (0)
#define ECU_GW_15_D_IS_EXTENDED (0)
#define ECU_GW_10_F_IS_EXTENDED (0)
#define ECU_GW_32_A_IS_EXTENDED (0)
#define ECU_GW_3_BE_IS_EXTENDED (0)
#define ECU_GW_37_A_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define ECU_ACC_382_CYCLE_TIME_MS (100u)
#define ECU_GW_2_A4_CYCLE_TIME_MS (50u)
#define ECU_LAS_592_CYCLE_TIME_MS (1000u)
#define ECU_ACC_594_CYCLE_TIME_MS (1000u)
#define ECU_GW_50_CYCLE_TIME_MS (500u)
#define ECU_GW_170_CYCLE_TIME_MS (10u)
#define ECU_GW_180_CYCLE_TIME_MS (10u)
#define ECU_ACC_244_CYCLE_TIME_MS (20u)
#define ECU_GW_278_CYCLE_TIME_MS (20u)
#define ECU_GW_298_CYCLE_TIME_MS (40u)
#define ECU_ACC_307_CYCLE_TIME_MS (100u)
#define ECU_ACC_312_CYCLE_TIME_MS (100u)
#define ECU_GW_340_CYCLE_TIME_MS (100u)
#define ECU_GW_347_CYCLE_TIME_MS (500u)
#define ECU_GW_365_CYCLE_TIME_MS (100u)
#define ECU_GW_366_CYCLE_TIME_MS (100u)
#define ECU_GW_387_CYCLE_TIME_MS (100u)
#define ECU_GW_390_CYCLE_TIME_MS (500u)
#define ECU_GW_396_CYCLE_TIME_MS (100u)
#define ECU_GW_516_CYCLE_TIME_MS (1000u)
#define ECU_GW_530_CYCLE_TIME_MS (500u)
#define ECU_GW_187_CYCLE_TIME_MS (10u)
#define ECU_GW_197_CYCLE_TIME_MS (10u)
#define ECU_GW_194_CYCLE_TIME_MS (10u)
#define ECU_GW_17_D_CYCLE_TIME_MS (10u)
#define ECU_GW_17_E_CYCLE_TIME_MS (10u)
#define ECU_ACC_1_BA_CYCLE_TIME_MS (10u)
#define ECU_GW_20_B_CYCLE_TIME_MS (20u)
#define ECU_GW_24_F_CYCLE_TIME_MS (20u)
#define ECU_GW_28_B_CYCLE_TIME_MS (40u)
#define ECU_GW_2_D1_CYCLE_TIME_MS (40u)
#define ECU_GW_2_DE_CYCLE_TIME_MS (50u)
#define ECU_GW_2_E6_CYCLE_TIME_MS (50u)
#define ECU_ACC_31_A_CYCLE_TIME_MS (100u)
#define ECU_GW_355_CYCLE_TIME_MS (100u)
#define ECU_GW_3_AF_CYCLE_TIME_MS (100u)
#define ECU_GW_3_B3_CYCLE_TIME_MS (100u)
#define ECU_GW_3_BD_CYCLE_TIME_MS (100u)
#define ECU_GW_3_C4_CYCLE_TIME_MS (100u)
#define ECU_GW_3_FD_CYCLE_TIME_MS (100u)
#define ECU_GW_3_FF_CYCLE_TIME_MS (100u)
#define ECU_GW_51_E_CYCLE_TIME_MS (500u)
#define ECU_ACC_693_CYCLE_TIME_MS (500u)
#define ECU_LAS_694_CYCLE_TIME_MS (500u)
#define ECU_GW_28_C_CYCLE_TIME_MS (40u)
#define ECU_GW_331_CYCLE_TIME_MS (100u)
#define ECU_GW_1_AF_CYCLE_TIME_MS (10u)
#define ECU_GW_320_CYCLE_TIME_MS (100u)
#define ECU_LAS_39_A_CYCLE_TIME_MS (100u)
#define ECU_GW_310_CYCLE_TIME_MS (100u)
#define ECU_GW_3_E8_CYCLE_TIME_MS (100u)
#define ECU_GW_3_E7_CYCLE_TIME_MS (100u)
#define ECU_GW_38_A_CYCLE_TIME_MS (40u)
#define ECU_GW_249_CYCLE_TIME_MS (20u)
#define ECU_GW_262_CYCLE_TIME_MS (40u)
#define ECU_GW_334_CYCLE_TIME_MS (100u)
#define ECU_GW_395_CYCLE_TIME_MS (100u)
#define ECU_GW_18_A_CYCLE_TIME_MS (10u)
#define ECU_GW_24_A_CYCLE_TIME_MS (20u)
#define ECU_GW_2_D7_CYCLE_TIME_MS (50u)
#define ECU_GW_341_CYCLE_TIME_MS (100u)
#define ECU_GW_3_D6_CYCLE_TIME_MS (100u)
#define ECU_GW_3_D8_CYCLE_TIME_MS (100u)
#define ECU_GW_3_DE_CYCLE_TIME_MS (100u)
#define ECU_GW_3_EE_CYCLE_TIME_MS (100u)
#define ECU_ACC_2_D3_CYCLE_TIME_MS (40u)
#define ECU_ACC_301_CYCLE_TIME_MS (100u)
#define ECU_LAS_30_C_CYCLE_TIME_MS (100u)
#define ECU_GW_2_E2_CYCLE_TIME_MS (50u)
#define ECU_GW_2_E3_CYCLE_TIME_MS (50u)
#define ECU_GW_2_C9_CYCLE_TIME_MS (40u)
#define ECU_GW_518_CYCLE_TIME_MS (500u)
#define ECU_GW_2_AE_CYCLE_TIME_MS (50u)
#define ECU_LAS_3_D9_CYCLE_TIME_MS (100u)
#define ECU_LAS_3_DB_CYCLE_TIME_MS (100u)
#define ECU_GW_371_CYCLE_TIME_MS (100u)
#define ECU_GW_31_C_CYCLE_TIME_MS (100u)
#define ECU_GW_10_A_CYCLE_TIME_MS (10u)
#define ECU_GW_15_D_CYCLE_TIME_MS (20u)
#define ECU_GW_10_F_CYCLE_TIME_MS (20u)
#define ECU_GW_32_A_CYCLE_TIME_MS (100u)
#define ECU_GW_3_BE_CYCLE_TIME_MS (100u)
#define ECU_GW_37_A_CYCLE_TIME_MS (100u)

/* Signal choices. */
#define ECU_ACC_382_ACC_LANE_QUALITY__CHOICE (0u)

#define ECU_ACC_382_ACC_LANE_EQUATION_C1_Y_C0_C1_X__1_2__C2_X_2__1_6__C3_X_3______C1_____________________________________1__0X0___0X_FFE__2___11___CHOICE (0u)

#define ECU_ACC_382_ACC_LANE_EQUATION_C2_Y_C0_C1_X__1_2__C2_X_2__1_6__C3_X_3______C2__________________________2047____0X0___0X_FFE___2___16___CHOICE (0u)

#define ECU_ACC_382_ACC_LANE_EQUATION_C3_Y_C0_C1_X__1_2__C2_X_2__1_6__C3_X_3______C3________________________________2047____0X0___0X_FFE___2___21___CHOICE (0u)

#define ECU_ACC_382_ACC_LANE_EQUATION_STATUS_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_382_ACC_LANE_EQUATION_STATUS_LEFT__LANE_CHOICE (1u)
#define ECU_ACC_382_ACC_LANE_EQUATION_STATUS_RIGHT__LANE_CHOICE (2u)
#define ECU_ACC_382_ACC_LANE_EQUATION_STATUS_RESERVED_CHOICE (3u)

#define ECU_ACC_382_ACC_TARGET1_DETECTION_NOT_DECTECTED_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET1_DETECTION_IP_DISPLAY_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET1_DETECTION_FRONT__TARGET_CHOICE (2u)
#define ECU_ACC_382_ACC_TARGET1_DETECTION_IACC_TARGET_CHOICE (3u)
#define ECU_ACC_382_ACC_TARGET1_DETECTION_AEB_TARGET_CHOICE (4u)
#define ECU_ACC_382_ACC_TARGET1_DETECTION_DANGEROUS_TARGET__ELK__UDLC__RCW__ETC___CHOICE (5u)
#define ECU_ACC_382_ACC_TARGET1_DETECTION_OTHER_TARGET_CHOICE (6u)
#define ECU_ACC_382_ACC_TARGET1_DETECTION_RESERVED_CHOICE (7u)

#define ECU_ACC_382_ACC_TARGET1_ID__CHOICE (0u)

#define ECU_ACC_382_ACC_TARGET1_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET1_TYPE_SEDAN_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET1_TYPE_MOTORCYCLE_CHOICE (2u)
#define ECU_ACC_382_ACC_TARGET1_TYPE_PEDESTRIAN_CHOICE (3u)
#define ECU_ACC_382_ACC_TARGET1_TYPE_BICYCLE_CHOICE (4u)
#define ECU_ACC_382_ACC_TARGET1_TYPE_BUS_CHOICE (5u)
#define ECU_ACC_382_ACC_TARGET1_TYPE_VAN_CHOICE (6u)
#define ECU_ACC_382_ACC_TARGET1_TYPE_TRUCK_CHOICE (7u)
#define ECU_ACC_382_ACC_TARGET1_TYPE_CONE__CONSIDERATION_CHOICE (8u)
#define ECU_ACC_382_ACC_TARGET1_TYPE_WARNING__COLUMN_CHOICE (9u)
#define ECU_ACC_382_ACC_TARGET1_TYPE_WATER__HORSE_CHOICE (10u)
#define ECU_ACC_382_ACC_TARGET1_TYPE_ANTI__COLLISION__BUCKET_CHOICE (11u)
#define ECU_ACC_382_ACC_TARGET1_TYPE_OTHERS_CHOICE (12u)
#define ECU_ACC_382_ACC_TARGET1_TYPE_ANIMAL_CHOICE (13u)
#define ECU_ACC_382_ACC_TARGET1_TYPE_NON_ROAD_VEHICLE_CHOICE (14u)
#define ECU_ACC_382_ACC_TARGET1_TYPE_CAR_WARNING_TRIANGLE_CHOICE (15u)

#define ECU_ACC_382_ACC_TARGET1_DIRECTION_FORWARD_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET1_DIRECTION_ON_COMING_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET1_DIRECTION_LEFT_CHOICE (2u)
#define ECU_ACC_382_ACC_TARGET1_DIRECTION_RIGHT_CHOICE (3u)
#define ECU_ACC_382_ACC_TARGET1_DIRECTION_UNKNOWN_CHOICE (4u)
#define ECU_ACC_382_ACC_TARGET1_DIRECTION_REFER_TO_HEADINGANGLE_CHOICE (5u)
#define ECU_ACC_382_ACC_TARGET1_DIRECTION_RESERVED_CHOICE (6u)

#define ECU_ACC_382_ACC_TARGET1_LNG_RANGE__100_300_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET1_LNG_RANGE_RESERVED_CHOICE (4001u)
#define ECU_ACC_382_ACC_TARGET1_LNG_RANGE_INVALID_CHOICE (4095u)

#define ECU_ACC_382_ACC_TARGET1_LAT_RANGE__50_50M_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET1_LAT_RANGE_RESERVED_CHOICE (1001u)
#define ECU_ACC_382_ACC_TARGET1_LAT_RANGE_INVALID_CHOICE (1023u)

#define ECU_ACC_382_ACC_TARGET1_ZONE_ID_NO_ZONEID_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET1_ZONE_ID_ZONEID1_11_0X_C_HOSTLANE_ZONE_0X_D_LEFTLANE_ZONE_0X_E_RIGHTLANE_ZONE_0X_F_LL_LANE_ZONE_0X10_RR_LANE_ZONE_0X11__RAMP_ZONE_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET1_ZONE_ID_OTHERS_CHOICE (18u)
#define ECU_ACC_382_ACC_TARGET1_ZONE_ID_RESERVED_CHOICE (19u)

#define ECU_ACC_382_ACC_TARGET2_DETECTION_NOT_DECTECTED_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET2_DETECTION_IP_DISPLAY_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET2_DETECTION_FRONT__TARGET_CHOICE (2u)
#define ECU_ACC_382_ACC_TARGET2_DETECTION_IACC_TARGET_CHOICE (3u)
#define ECU_ACC_382_ACC_TARGET2_DETECTION_AEB_TARGET_CHOICE (4u)
#define ECU_ACC_382_ACC_TARGET2_DETECTION_DANGEROUS_TARGET__ELK__UDLC__RCW__ETC___CHOICE (5u)
#define ECU_ACC_382_ACC_TARGET2_DETECTION_OTHER_TARGET_CHOICE (6u)
#define ECU_ACC_382_ACC_TARGET2_DETECTION_RESERVED_CHOICE (7u)

#define ECU_ACC_382_ACC_TARGET2_ID__CHOICE (0u)

#define ECU_ACC_382_ACC_TARGET2_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET2_TYPE_SEDAN_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET2_TYPE_MOTORCYCLE_CHOICE (2u)
#define ECU_ACC_382_ACC_TARGET2_TYPE_PEDESTRIAN_CHOICE (3u)
#define ECU_ACC_382_ACC_TARGET2_TYPE_BICYCLE_CHOICE (4u)
#define ECU_ACC_382_ACC_TARGET2_TYPE_BUS_CHOICE (5u)
#define ECU_ACC_382_ACC_TARGET2_TYPE_VAN_CHOICE (6u)
#define ECU_ACC_382_ACC_TARGET2_TYPE_TRUCK_CHOICE (7u)
#define ECU_ACC_382_ACC_TARGET2_TYPE_CONE__CONSIDERATION_CHOICE (8u)
#define ECU_ACC_382_ACC_TARGET2_TYPE_WARNING__COLUMN_CHOICE (9u)
#define ECU_ACC_382_ACC_TARGET2_TYPE_WATER__HORSE_CHOICE (10u)
#define ECU_ACC_382_ACC_TARGET2_TYPE_ANTI__COLLISION__BUCKET_CHOICE (11u)
#define ECU_ACC_382_ACC_TARGET2_TYPE_OTHERS_CHOICE (12u)
#define ECU_ACC_382_ACC_TARGET2_TYPE_ANIMAL_CHOICE (13u)
#define ECU_ACC_382_ACC_TARGET2_TYPE_NON_ROAD_VEHICLE_CHOICE (14u)
#define ECU_ACC_382_ACC_TARGET2_TYPE_CAR_WARNING_TRIANGLE_CHOICE (15u)

#define ECU_ACC_382_ACC_TARGET2_LNG_RANGE__100_300_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET2_LNG_RANGE_RESERVED_CHOICE (4001u)
#define ECU_ACC_382_ACC_TARGET2_LNG_RANGE_INVALID_CHOICE (4095u)

#define ECU_ACC_382_ACC_TARGET2_LAT_RANGE__50_50M_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET2_LAT_RANGE_RESERVED_CHOICE (1001u)
#define ECU_ACC_382_ACC_TARGET2_LAT_RANGE_INVALID_CHOICE (1023u)

#define ECU_ACC_382_ACC_TARGET2_DIRECTION_FORWARD_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET2_DIRECTION_ON_COMING_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET2_DIRECTION_LEFT_CHOICE (2u)
#define ECU_ACC_382_ACC_TARGET2_DIRECTION_RIGHT_CHOICE (3u)
#define ECU_ACC_382_ACC_TARGET2_DIRECTION_UNKNOWN_CHOICE (4u)
#define ECU_ACC_382_ACC_TARGET2_DIRECTION_REFER_TO_HEADINGANGLE_CHOICE (5u)
#define ECU_ACC_382_ACC_TARGET2_DIRECTION_RESERVED_CHOICE (6u)

#define ECU_ACC_382_ACC_TARGET2_ZONE_ID_NO_ZONEID_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET2_ZONE_ID_ZONEID1_11_0X_C_HOSTLANE_ZONE_0X_D_LEFTLANE_ZONE_0X_E_RIGHTLANE_ZONE_0X_F_LL_LANE_ZONE_0X10_RR_LANE_ZONE_0X11__RAMP_ZONE_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET2_ZONE_ID_OTHERS_CHOICE (18u)
#define ECU_ACC_382_ACC_TARGET2_ZONE_ID_RESERVED_CHOICE (19u)

#define ECU_ACC_382_ACC_TARGET3_DETECTION_NOT_DECTECTED_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET3_DETECTION_IP_DISPLAY_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET3_DETECTION_FRONT__TARGET_CHOICE (2u)
#define ECU_ACC_382_ACC_TARGET3_DETECTION_IACC_TARGET_CHOICE (3u)
#define ECU_ACC_382_ACC_TARGET3_DETECTION_AEB_TARGET_CHOICE (4u)
#define ECU_ACC_382_ACC_TARGET3_DETECTION_DANGEROUS_TARGET__ELK__UDLC__RCW__ETC___CHOICE (5u)
#define ECU_ACC_382_ACC_TARGET3_DETECTION_OTHER_TARGET_CHOICE (6u)
#define ECU_ACC_382_ACC_TARGET3_DETECTION_RESERVED_CHOICE (7u)

#define ECU_ACC_382_ACC_TARGET3_ID__CHOICE (0u)

#define ECU_ACC_382_ACC_TARGET3_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET3_TYPE_SEDAN_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET3_TYPE_MOTORCYCLE_CHOICE (2u)
#define ECU_ACC_382_ACC_TARGET3_TYPE_PEDESTRIAN_CHOICE (3u)
#define ECU_ACC_382_ACC_TARGET3_TYPE_BICYCLE_CHOICE (4u)
#define ECU_ACC_382_ACC_TARGET3_TYPE_BUS_CHOICE (5u)
#define ECU_ACC_382_ACC_TARGET3_TYPE_VAN_CHOICE (6u)
#define ECU_ACC_382_ACC_TARGET3_TYPE_TRUCK_CHOICE (7u)
#define ECU_ACC_382_ACC_TARGET3_TYPE_CONE__CONSIDERATION_CHOICE (8u)
#define ECU_ACC_382_ACC_TARGET3_TYPE_WARNING__COLUMN_CHOICE (9u)
#define ECU_ACC_382_ACC_TARGET3_TYPE_WATER__HORSE_CHOICE (10u)
#define ECU_ACC_382_ACC_TARGET3_TYPE_ANTI__COLLISION__BUCKET_CHOICE (11u)
#define ECU_ACC_382_ACC_TARGET3_TYPE_OTHERS_CHOICE (12u)
#define ECU_ACC_382_ACC_TARGET3_TYPE_ANIMAL_CHOICE (13u)
#define ECU_ACC_382_ACC_TARGET3_TYPE_NON_ROAD_VEHICLE_CHOICE (14u)
#define ECU_ACC_382_ACC_TARGET3_TYPE_CAR_WARNING_TRIANGLE_CHOICE (15u)

#define ECU_ACC_382_ACC_TARGET3_LNG_RANGE__100_300_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET3_LNG_RANGE_RESERVED_CHOICE (4001u)
#define ECU_ACC_382_ACC_TARGET3_LNG_RANGE_INVALID_CHOICE (4095u)

#define ECU_ACC_382_ACC_TARGET3_LAT_RANGE__50_50M_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET3_LAT_RANGE_RESERVED_CHOICE (1001u)
#define ECU_ACC_382_ACC_TARGET3_LAT_RANGE_INVALID_CHOICE (1023u)

#define ECU_ACC_382_ACC_TARGET3_DIRECTION_FORWARD_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET3_DIRECTION_ON_COMING_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET3_DIRECTION_LEFT_CHOICE (2u)
#define ECU_ACC_382_ACC_TARGET3_DIRECTION_RIGHT_CHOICE (3u)
#define ECU_ACC_382_ACC_TARGET3_DIRECTION_UNKNOWN_CHOICE (4u)
#define ECU_ACC_382_ACC_TARGET3_DIRECTION_REFER_TO_HEADINGANGLE_CHOICE (5u)
#define ECU_ACC_382_ACC_TARGET3_DIRECTION_RESERVED_CHOICE (6u)

#define ECU_ACC_382_ACC_TARGET3_ZONE_ID_NO_ZONEID_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET3_ZONE_ID_ZONEID1_11_0X_C_HOSTLANE_ZONE_0X_D_LEFTLANE_ZONE_0X_E_RIGHTLANE_ZONE_0X_F_LL_LANE_ZONE_0X10_RR_LANE_ZONE_0X11__RAMP_ZONE_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET3_ZONE_ID_OTHERS_CHOICE (18u)
#define ECU_ACC_382_ACC_TARGET3_ZONE_ID_RESERVED_CHOICE (19u)

#define ECU_ACC_382_ACC_TARGET4_DETECTION_NOT_DECTECTED_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET4_DETECTION_IP_DISPLAY_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET4_DETECTION_FRONT__TARGET_CHOICE (2u)
#define ECU_ACC_382_ACC_TARGET4_DETECTION_IACC_TARGET_CHOICE (3u)
#define ECU_ACC_382_ACC_TARGET4_DETECTION_AEB_TARGET_CHOICE (4u)
#define ECU_ACC_382_ACC_TARGET4_DETECTION_DANGEROUS_TARGET__ELK__UDLC__RCW__ETC___CHOICE (5u)
#define ECU_ACC_382_ACC_TARGET4_DETECTION_OTHER_TARGET_CHOICE (6u)
#define ECU_ACC_382_ACC_TARGET4_DETECTION_RESERVED_CHOICE (7u)

#define ECU_ACC_382_ACC_TARGET4_ID__CHOICE (0u)

#define ECU_ACC_382_ACC_TARGET4_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET4_TYPE_SEDAN_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET4_TYPE_MOTORCYCLE_CHOICE (2u)
#define ECU_ACC_382_ACC_TARGET4_TYPE_PEDESTRIAN_CHOICE (3u)
#define ECU_ACC_382_ACC_TARGET4_TYPE_BICYCLE_CHOICE (4u)
#define ECU_ACC_382_ACC_TARGET4_TYPE_BUS_CHOICE (5u)
#define ECU_ACC_382_ACC_TARGET4_TYPE_VAN_CHOICE (6u)
#define ECU_ACC_382_ACC_TARGET4_TYPE_TRUCK_CHOICE (7u)
#define ECU_ACC_382_ACC_TARGET4_TYPE_CONE__CONSIDERATION_CHOICE (8u)
#define ECU_ACC_382_ACC_TARGET4_TYPE_WARNING__COLUMN_CHOICE (9u)
#define ECU_ACC_382_ACC_TARGET4_TYPE_WATER__HORSE_CHOICE (10u)
#define ECU_ACC_382_ACC_TARGET4_TYPE_ANTI__COLLISION__BUCKET_CHOICE (11u)
#define ECU_ACC_382_ACC_TARGET4_TYPE_OTHERS_CHOICE (12u)
#define ECU_ACC_382_ACC_TARGET4_TYPE_ANIMAL_CHOICE (13u)
#define ECU_ACC_382_ACC_TARGET4_TYPE_NON_ROAD_VEHICLE_CHOICE (14u)
#define ECU_ACC_382_ACC_TARGET4_TYPE_CAR_WARNING_TRIANGLE_CHOICE (15u)

#define ECU_ACC_382_ACC_TARGET4_LNG_RANGE__100_300_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET4_LNG_RANGE_RESERVED_CHOICE (4001u)
#define ECU_ACC_382_ACC_TARGET4_LNG_RANGE_INVALID_CHOICE (4095u)

#define ECU_ACC_382_ACC_TARGET4_LAT_RANGE__50_50M_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET4_LAT_RANGE_RESERVED_CHOICE (1001u)
#define ECU_ACC_382_ACC_TARGET4_LAT_RANGE_INVALID_CHOICE (1023u)

#define ECU_ACC_382_ACC_TARGET4_DIRECTION_FORWARD_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET4_DIRECTION_ON_COMING_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET4_DIRECTION_LEFT_CHOICE (2u)
#define ECU_ACC_382_ACC_TARGET4_DIRECTION_RIGHT_CHOICE (3u)
#define ECU_ACC_382_ACC_TARGET4_DIRECTION_UNKNOWN_CHOICE (4u)
#define ECU_ACC_382_ACC_TARGET4_DIRECTION_REFER_TO_HEADINGANGLE_CHOICE (5u)
#define ECU_ACC_382_ACC_TARGET4_DIRECTION_RESERVED_CHOICE (6u)

#define ECU_ACC_382_ACC_TARGET4_ZONE_ID_NO_ZONEID_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET4_ZONE_ID_ZONEID1_11_0X_C_HOSTLANE_ZONE_0X_D_LEFTLANE_ZONE_0X_E_RIGHTLANE_ZONE_0X_F_LL_LANE_ZONE_0X10_RR_LANE_ZONE_0X11__RAMP_ZONE_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET4_ZONE_ID_OTHERS_CHOICE (18u)
#define ECU_ACC_382_ACC_TARGET4_ZONE_ID_RESERVED_CHOICE (19u)

#define ECU_ACC_382_ACC_TARGET5_DETECTION_NOT_DECTECTED_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET5_DETECTION_IP_DISPLAY_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET5_DETECTION_FRONT__TARGET_CHOICE (2u)
#define ECU_ACC_382_ACC_TARGET5_DETECTION_IACC_TARGET_CHOICE (3u)
#define ECU_ACC_382_ACC_TARGET5_DETECTION_AEB_TARGET_CHOICE (4u)
#define ECU_ACC_382_ACC_TARGET5_DETECTION_DANGEROUS_TARGET__ELK__UDLC__RCW__ETC___CHOICE (5u)
#define ECU_ACC_382_ACC_TARGET5_DETECTION_OTHER_TARGET_CHOICE (6u)
#define ECU_ACC_382_ACC_TARGET5_DETECTION_RESERVED_CHOICE (7u)

#define ECU_ACC_382_ACC_TARGET5_ID__CHOICE (0u)

#define ECU_ACC_382_ACC_TARGET5_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET5_TYPE_SEDAN_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET5_TYPE_MOTORCYCLE_CHOICE (2u)
#define ECU_ACC_382_ACC_TARGET5_TYPE_PEDESTRIAN_CHOICE (3u)
#define ECU_ACC_382_ACC_TARGET5_TYPE_BICYCLE_CHOICE (4u)
#define ECU_ACC_382_ACC_TARGET5_TYPE_BUS_CHOICE (5u)
#define ECU_ACC_382_ACC_TARGET5_TYPE_VAN_CHOICE (6u)
#define ECU_ACC_382_ACC_TARGET5_TYPE_TRUCK_CHOICE (7u)
#define ECU_ACC_382_ACC_TARGET5_TYPE_CONE__CONSIDERATION_CHOICE (8u)
#define ECU_ACC_382_ACC_TARGET5_TYPE_WARNING__COLUMN_CHOICE (9u)
#define ECU_ACC_382_ACC_TARGET5_TYPE_WATER__HORSE_CHOICE (10u)
#define ECU_ACC_382_ACC_TARGET5_TYPE_ANTI__COLLISION__BUCKET_CHOICE (11u)
#define ECU_ACC_382_ACC_TARGET5_TYPE_OTHERS_CHOICE (12u)
#define ECU_ACC_382_ACC_TARGET5_TYPE_ANIMAL_CHOICE (13u)
#define ECU_ACC_382_ACC_TARGET5_TYPE_NON_ROAD_VEHICLE_CHOICE (14u)
#define ECU_ACC_382_ACC_TARGET5_TYPE_CAR_WARNING_TRIANGLE_CHOICE (15u)

#define ECU_ACC_382_ACC_TARGET5_LNG_RANGE__100_300_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET5_LNG_RANGE_RESERVED_CHOICE (4001u)
#define ECU_ACC_382_ACC_TARGET5_LNG_RANGE_INVALID_CHOICE (4095u)

#define ECU_ACC_382_ACC_TARGET5_LAT_RANGE__50_50M_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET5_LAT_RANGE_RESERVED_CHOICE (1001u)
#define ECU_ACC_382_ACC_TARGET5_LAT_RANGE_INVALID_CHOICE (1023u)

#define ECU_ACC_382_ACC_TARGET5_DIRECTION_FORWARD_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET5_DIRECTION_ON_COMING_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET5_DIRECTION_LEFT_CHOICE (2u)
#define ECU_ACC_382_ACC_TARGET5_DIRECTION_RIGHT_CHOICE (3u)
#define ECU_ACC_382_ACC_TARGET5_DIRECTION_UNKNOWN_CHOICE (4u)
#define ECU_ACC_382_ACC_TARGET5_DIRECTION_REFER_TO_HEADINGANGLE_CHOICE (5u)
#define ECU_ACC_382_ACC_TARGET5_DIRECTION_RESERVED_CHOICE (6u)

#define ECU_ACC_382_ACC_TARGET5_ZONE_ID_NO_ZONEID_CHOICE (0u)
#define ECU_ACC_382_ACC_TARGET5_ZONE_ID_ZONEID1_11_0X_C_HOSTLANE_ZONE_0X_D_LEFTLANE_ZONE_0X_E_RIGHTLANE_ZONE_0X_F_LL_LANE_ZONE_0X10_RR_LANE_ZONE_0X11__RAMP_ZONE_CHOICE (1u)
#define ECU_ACC_382_ACC_TARGET5_ZONE_ID_OTHERS_CHOICE (18u)
#define ECU_ACC_382_ACC_TARGET5_ZONE_ID_RESERVED_CHOICE (19u)

#define ECU_ACC_382_ACC_TAR_VEH_LNG_RANGE_0_300_CHOICE (0u)
#define ECU_ACC_382_ACC_TAR_VEH_LNG_RANGE_RESERVED_CHOICE (3001u)
#define ECU_ACC_382_ACC_TAR_VEH_LNG_RANGE_INVALID_CHOICE (4095u)

#define ECU_GW_2_A4_LCDAR_BSD_LCA_SOUND_WAR_NO__WARNING_CHOICE (0u)
#define ECU_GW_2_A4_LCDAR_BSD_LCA_SOUND_WAR_WARNING_CHOICE (1u)

#define ECU_GW_2_A4_LCDAR_LEFT_RCTA_ALERT_NO_RCTA_WARNING_CHOICE (0u)
#define ECU_GW_2_A4_LCDAR_LEFT_RCTA_ALERT_RCTA_WARNING__LEVEL1_CHOICE (1u)
#define ECU_GW_2_A4_LCDAR_LEFT_RCTA_ALERT_RCTA_WARNING__LEVEL2_CHOICE (2u)
#define ECU_GW_2_A4_LCDAR_LEFT_RCTA_ALERT_RCTA_WARNING__LEVEL3_CHOICE (3u)

#define ECU_GW_2_A4_LCDAR_SYSTEM_STATUS_RESERVED_CHOICE (0u)
#define ECU_GW_2_A4_LCDAR_SYSTEM_STATUS_START_UP_CHOICE (1u)
#define ECU_GW_2_A4_LCDAR_SYSTEM_STATUS_RUNNING_CHOICE (2u)
#define ECU_GW_2_A4_LCDAR_SYSTEM_STATUS_BLOCKED_CHOICE (3u)
#define ECU_GW_2_A4_LCDAR_SYSTEM_STATUS_CALIBRATION_CHOICE (4u)
#define ECU_GW_2_A4_LCDAR_SYSTEM_STATUS_SHUT_DOWN_CHOICE (5u)
#define ECU_GW_2_A4_LCDAR_SYSTEM_STATUS_HOT_CHOICE (6u)
#define ECU_GW_2_A4_LCDAR_SYSTEM_STATUS_FAILURE_CHOICE (7u)

#define ECU_GW_2_A4_LCDAR_RCTA_ALERT_NO_RCTA_WARNING_CHOICE (0u)
#define ECU_GW_2_A4_LCDAR_RCTA_ALERT_RCTA_WARNING__LEVEL1_CHOICE (1u)
#define ECU_GW_2_A4_LCDAR_RCTA_ALERT_RCTA_WARNING__LEVEL2_CHOICE (2u)
#define ECU_GW_2_A4_LCDAR_RCTA_ALERT_RCTA_WARNING__LEVEL3_CHOICE (3u)

#define ECU_GW_2_A4_LCDAR_RCTB_ACTIVE__NOT__ACTIVE_CHOICE (0u)
#define ECU_GW_2_A4_LCDAR_RCTB_ACTIVE___ACTIVE__CHOICE (1u)

#define ECU_GW_2_A4_LCDAR_RCTB_ENABLE_OFF_CHOICE (0u)
#define ECU_GW_2_A4_LCDAR_RCTB_ENABLE_ON_CHOICE (1u)

#define ECU_GW_2_A4_LCDAR_RCTB_STATUS_OFF_______CHOICE (0u)
#define ECU_GW_2_A4_LCDAR_RCTB_STATUS_INACTIVE_________CHOICE (1u)
#define ECU_GW_2_A4_LCDAR_RCTB_STATUS_ACTIVE_CHOICE (2u)
#define ECU_GW_2_A4_LCDAR_RCTB_STATUS_FAILURE_CHOICE (3u)

#define ECU_GW_2_A4_LCDAR_LEFT_ELK_O_ALERT_NO_WARNING_CHOICE (0u)
#define ECU_GW_2_A4_LCDAR_LEFT_ELK_O_ALERT_LEVEL_1_CHOICE (1u)
#define ECU_GW_2_A4_LCDAR_LEFT_ELK_O_ALERT_LEVEL_2_CHOICE (2u)
#define ECU_GW_2_A4_LCDAR_LEFT_ELK_O_ALERT_RESERVED_CHOICE (3u)

#define ECU_GW_2_A4_LCDAR_ELK_O_STATUS_OFF_______________CHOICE (0u)
#define ECU_GW_2_A4_LCDAR_ELK_O_STATUS_INACTIVE_________CHOICE (1u)
#define ECU_GW_2_A4_LCDAR_ELK_O_STATUS_ACTIVE_CHOICE (2u)
#define ECU_GW_2_A4_LCDAR_ELK_O_STATUS_FAILURE_CHOICE (3u)

#define ECU_GW_2_A4_LCDAR_ELK_O_ALERT_NO_WARNING_CHOICE (0u)
#define ECU_GW_2_A4_LCDAR_ELK_O_ALERT_LEVEL_1_CHOICE (1u)
#define ECU_GW_2_A4_LCDAR_ELK_O_ALERT_LEVEL_2_CHOICE (2u)
#define ECU_GW_2_A4_LCDAR_ELK_O_ALERT_RESERVED_CHOICE (3u)

#define ECU_LAS_592_LAS_WAKE_UP_BYTE4_BIT1_INACTIVE_CHOICE (0u)
#define ECU_LAS_592_LAS_WAKE_UP_BYTE4_BIT1__IG____________IG_______________CHOICE (1u)

#define ECU_LAS_592_LAS_WAKE_UP_BYTE4_BIT0_INACTIVE_CHOICE (0u)
#define ECU_LAS_592_LAS_WAKE_UP_BYTE4_BIT0__CAN_________________CHOICE (1u)

#define ECU_LAS_592_LAS_NOT_SLEEP_BYTE7_BIT1_INACTIVE_CHOICE (0u)
#define ECU_LAS_592_LAS_NOT_SLEEP_BYTE7_BIT1__IGN__________ON_____________________OFF_CHOICE (1u)

#define ECU_LAS_592_LAS_NOT_SLEEP_BYTE7_BIT0_INACTIVE_CHOICE (0u)
#define ECU_LAS_592_LAS_NOT_SLEEP_BYTE7_BIT0__CAN_________________________CHOICE (1u)

#define ECU_ACC_594_FR_WAKE_UP_BYTE4_BIT1_INACTIVE_CHOICE (0u)
#define ECU_ACC_594_FR_WAKE_UP_BYTE4_BIT1__IG____________IG_______________CHOICE (1u)

#define ECU_ACC_594_FR_WAKE_UP_BYTE4_BIT0_INACTIVE_CHOICE (0u)
#define ECU_ACC_594_FR_WAKE_UP_BYTE4_BIT0__CAN_________________CHOICE (1u)

#define ECU_ACC_594_FR_NOT_SLEEP_BYTE7_BIT1_INACTIVE_CHOICE (0u)
#define ECU_ACC_594_FR_NOT_SLEEP_BYTE7_BIT1__IGN__________ON_____________________OFF_CHOICE (1u)

#define ECU_ACC_594_FR_NOT_SLEEP_BYTE7_BIT0_INACTIVE_CHOICE (0u)
#define ECU_ACC_594_FR_NOT_SLEEP_BYTE7_BIT0__CAN_________________________CHOICE (1u)

#define ECU_GW_50_SRS_CRASH_OUTPUT_STATUS_NO__CRASH_CHOICE (0u)
#define ECU_GW_50_SRS_CRASH_OUTPUT_STATUS_CRASH__CHOICE (1u)
#define ECU_GW_50_SRS_CRASH_OUTPUT_STATUS_NOT__USED_CHOICE (2u)

#define ECU_GW_50_SRS_CRASH_OUTPUT_STATUS_CHECK_SUM__SRS_CRASH_OUTPUT_STATUS__XOR_0X_F_CHOICE (0u)

#define ECU_GW_50_SRS_DRIVER_BUCKLE_SWITCH_STATUS_BUCKLED_CHOICE (0u)
#define ECU_GW_50_SRS_DRIVER_BUCKLE_SWITCH_STATUS_UNBUCKLE__CHOICE (1u)
#define ECU_GW_50_SRS_DRIVER_BUCKLE_SWITCH_STATUS_NOT__USED_CHOICE (2u)
#define ECU_GW_50_SRS_DRIVER_BUCKLE_SWITCH_STATUS_NOT__USED_DEFAULT_VALUE__0X0_CHOICE (3u)

#define ECU_GW_50_SRS_PASSENGER_BUCKLE_SWITCH_STATUS_BUCKLED_CHOICE (0u)
#define ECU_GW_50_SRS_PASSENGER_BUCKLE_SWITCH_STATUS_UNBUCKLE__CHOICE (1u)
#define ECU_GW_50_SRS_PASSENGER_BUCKLE_SWITCH_STATUS_NOT__USED_CHOICE (2u)
#define ECU_GW_50_SRS_PASSENGER_BUCKLE_SWITCH_STATUS_NOT__USED_DEFAULT_VALUE__0X0_CHOICE (3u)

#define ECU_GW_50_SRS_LEFT_REAR_BUCKLE_SWITCH_STS_BUCKLED__CHOICE (0u)
#define ECU_GW_50_SRS_LEFT_REAR_BUCKLE_SWITCH_STS___UNBUCKLE__CHOICE (1u)
#define ECU_GW_50_SRS_LEFT_REAR_BUCKLE_SWITCH_STS_NOT__USED_CHOICE (2u)
#define ECU_GW_50_SRS_LEFT_REAR_BUCKLE_SWITCH_STS_NOT__USED___DEFAULT_VALUE__0X0_CHOICE (3u)

#define ECU_GW_50_SRS_WARNING_LAMP_STATUS_LAMP_OFF_CHOICE (0u)
#define ECU_GW_50_SRS_WARNING_LAMP_STATUS_LAMP_ON_CHOICE (1u)
#define ECU_GW_50_SRS_WARNING_LAMP_STATUS_LAMP__FLASHING_CHOICE (2u)
#define ECU_GW_50_SRS_WARNING_LAMP_STATUS_NOT__USED_CHOICE (3u)

#define ECU_GW_50_SRS_PAD_INDICATION_PAB_ON_AND__LAMP_OFF_CHOICE (0u)
#define ECU_GW_50_SRS_PAD_INDICATION_PAB_OFF_AND__LAMP_ON_DEFAULT_VALUE__0X1_CHOICE (1u)

#define ECU_GW_50_SRS_MIDDLE_REAR_BUCKLE_SWITCH_STS_BUCKLED__CHOICE (0u)
#define ECU_GW_50_SRS_MIDDLE_REAR_BUCKLE_SWITCH_STS___UNBUCKLE__CHOICE (1u)
#define ECU_GW_50_SRS_MIDDLE_REAR_BUCKLE_SWITCH_STS_NOT__USED_CHOICE (2u)
#define ECU_GW_50_SRS_MIDDLE_REAR_BUCKLE_SWITCH_STS_NOT__USED__DEFAULT_VALUE__0X0_CHOICE (3u)

#define ECU_GW_50_SRS_FRONT_PSG_OCCUPANCY_NOT_OCCUPIED_CHOICE (0u)
#define ECU_GW_50_SRS_FRONT_PSG_OCCUPANCY_OCCUPIED_DEFAULT_VALUE__0X1_CHOICE (1u)

#define ECU_GW_50_SRS_RIGHT_REAR_BUCKLE_SWITCH_STS_BUCKLED__CHOICE (0u)
#define ECU_GW_50_SRS_RIGHT_REAR_BUCKLE_SWITCH_STS___UNBUCKLE__CHOICE (1u)
#define ECU_GW_50_SRS_RIGHT_REAR_BUCKLE_SWITCH_STS_NOT__USED_CHOICE (2u)
#define ECU_GW_50_SRS_RIGHT_REAR_BUCKLE_SWITCH_STS_NOT__USED___DEFAULT_VALUE__0X0_CHOICE (3u)

#define ECU_GW_50_SRS_CRC_CHECK_50_0X_FF__XOR_VALUE_0X_FF__INPUT_DATA_REFLECTED__NO___RESULT_DATA_REFLECTED__NO__CHECK_0X48___MAGIC_CHECK_0X_C4___CHOICE (0u)

#define ECU_GW_170_EPS_ACTUAL_MOTOR_TORQ__CHOICE (2047u)

#define ECU_GW_170_EPS_MAX_SAFETY_TORSION_BAR_TORQ__CHOICE (2047u)

#define ECU_GW_170_EPS_MIN_SAFETY_TORSION_BAR_TORQ__CHOICE (2047u)

#define ECU_GW_170_EPS_ACTUAL_TORSION_BAR_TORQ__CHOICE (2047u)

#define ECU_GW_170_EPS_FAULT_STATE_NO__FAULT_CHOICE (0u)
#define ECU_GW_170_EPS_FAULT_STATE_THERMAL__PROTECTION__FAULT__CHOICE (1u)
#define ECU_GW_170_EPS_FAULT_STATE_POWER__LIMIT__FAULT____CHOICE (2u)
#define ECU_GW_170_EPS_FAULT_STATE_IMC__RESULT_ERROR_CHOICE (3u)
#define ECU_GW_170_EPS_FAULT_STATE_TORQUE__SENSOR__FAULT_RECOVERABLE_WITH_ASSIST__CHOICE (4u)
#define ECU_GW_170_EPS_FAULT_STATE_ANGLE__SENSOR__FAULT_RECOVERABLE_WITH_ASSIST__CHOICE (5u)
#define ECU_GW_170_EPS_FAULT_STATE_SENSORLESS__ANGLE__FAULT__NON_RECOVERABLE_WITHOUT_ASSIST__CHOICE (6u)
#define ECU_GW_170_EPS_FAULT_STATE_POWER__SUPPLY__FAULT__NON_RECOVERABLE__CHOICE (7u)
#define ECU_GW_170_EPS_FAULT_STATE_MOTOR__SENSOR__FAULT__NON_RECOVERABLE__CHOICE (8u)
#define ECU_GW_170_EPS_FAULT_STATE_FLASH_RAM_NVM__FAULT__NON_RECOVERABLE__CHOICE (9u)
#define ECU_GW_170_EPS_FAULT_STATE_BATTERY__VOLTAGE__FAULT__RECOVERABLE__CHOICE (10u)
#define ECU_GW_170_EPS_FAULT_STATE_ECU_ID__FAULT__NON_RECOVERABLE__CHOICE (11u)
#define ECU_GW_170_EPS_FAULT_STATE_OTHER__FAULT__NON_RECOVERABLE__CHOICE (12u)

#define ECU_GW_180_SAS_STEERING_ANGLE_VALID_VALID_CHOICE (0u)
#define ECU_GW_180_SAS_STEERING_ANGLE_VALID_INVALID_CHOICE (1u)

#define ECU_GW_180_SAS_SAS_FAILURE_NO__FAILURE_CHOICE (0u)
#define ECU_GW_180_SAS_SAS_FAILURE_FAILURE_CHOICE (1u)

#define ECU_GW_180_SAS_CALIBRATED_CALIBRATED_CHOICE (0u)
#define ECU_GW_180_SAS_CALIBRATED___NOT__CALIBRATED_CHOICE (1u)

#define ECU_ACC_244_ACC_LKA_STATUS_OFF_CHOICE (0u)
#define ECU_ACC_244_ACC_LKA_STATUS_STANDBY_CHOICE (1u)
#define ECU_ACC_244_ACC_LKA_STATUS_ACTIVE_CHOICE (2u)
#define ECU_ACC_244_ACC_LKA_STATUS_FAILURE_CHOICE (3u)

#define ECU_ACC_244_ACC_LDW_VIBRATION_WARNING_REQ___NO__WARNING_______CHOICE (0u)
#define ECU_ACC_244_ACC_LDW_VIBRATION_WARNING_REQ___LEFT__WARNING_______CHOICE (1u)
#define ECU_ACC_244_ACC_LDW_VIBRATION_WARNING_REQ_RIGHT__WARNING_______CHOICE (2u)
#define ECU_ACC_244_ACC_LDW_VIBRATION_WARNING_REQ__RESERVED_CHOICE (3u)

#define ECU_ACC_244_ACC_LDW_STATUS__CHOICE (0u)

#define ECU_ACC_244_ACC_EMERGENCY_DATA_RRD_REQ_NO_REQUEST_CHOICE (0u)
#define ECU_ACC_244_ACC_EMERGENCY_DATA_RRD_REQ_EVENT_1__REQUEST_CHOICE (1u)
#define ECU_ACC_244_ACC_EMERGENCY_DATA_RRD_REQ_EVENT_2__REQUEST_CHOICE (2u)
#define ECU_ACC_244_ACC_EMERGENCY_DATA_RRD_REQ_IMAGE__RECORD_CHOICE (3u)

#define ECU_ACC_244_ACC_LDW_SHAKE_LEV_STATUS_RESERVED_CHOICE (0u)
#define ECU_ACC_244_ACC_LDW_SHAKE_LEV_STATUS_LOW_CHOICE (1u)
#define ECU_ACC_244_ACC_LDW_SHAKE_LEV_STATUS_NORMAL_CHOICE (2u)
#define ECU_ACC_244_ACC_LDW_SHAKE_LEV_STATUS_HIGH_CHOICE (3u)

#define ECU_ACC_244_ACC_DEC_TO_STOP_NO_DEMAND_CHOICE (0u)
#define ECU_ACC_244_ACC_DEC_TO_STOP__DEMAND_CHOICE (1u)

#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_UNABLE_TO_ACTIVATE_ACC_CHOICE (1u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_ACC_ACTIVE_CONTROL_IS_CANCELLED_CHOICE (2u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_ACC_ERROR_BY__FRONT__RADAR_CHOICE (3u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_ACC_TEMPORARY_UNAVAILABLE_BY_OTHERS_CHOICE (4u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_EPB_ACTIVATE_CHOICE (5u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_NO_FORWARD_GEAR_CHOICE (6u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_SEATBELT_UNBUCKLED_CHOICE (7u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_ENGINE__NO__RUNNING_CHOICE (8u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_ESP_OFF_CHOICE (9u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_BONNET_IS__OPEN_CHOICE (10u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_SPEED_OVER_150KPH_CHOICE (11u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_ACC__ERROR_BY_EMS_VCU_TCU_CHOICE (12u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_ACC__ERROR_BY_EPBI_CHOICE (14u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_ACC_UNINTENDED_EXIT_WARNING_CHOICE (15u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_DOOR_IS_OPEN_CHOICE (16u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_BRAKE_PEDAL_IS_APPLIED_CHOICE (17u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_SPEED_REDUCE_BY_RAMP_CHOICE (18u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_SPEED_REDUCE_BY_TUNNEL_CHOICE (19u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_ACC_ERROR_BY__FRONT__CAMERA_CHOICE (20u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_SPEED_REDUCE_BY_CONDITION_CHOICE (21u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_SPEED_REDUCE_BY__SPD_LIMITED_CHOICE (22u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_ACC_CANNOT_ACTIVE_BY__RACE_MODE_CHOICE (23u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_SPEED_REDUCE_BY__TOLLSTATION_CHOICE (24u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_ACC_CANNOT_ACTIVE_BY_SNOW_MODE_CHOICE (25u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_STEERING_ANGLE_IS_OVER_CHOICE (26u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_EMERGENCY_BRAKE_SUDDENLY_CHOICE (27u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_______________ACC_____CHOICE (28u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_________________ACC_____CHOICE (29u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_BAD_WEATHER_CHOICE (30u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER__________________31_CHOICE (31u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER__________________32_CHOICE (32u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER____________________CHOICE (33u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER__________0X23_____________________0X24___________________0X25___________________________0X26_______________________0X27_______________________0X28___________________0X29___________________0X2_A_________________0X2_B___________________________0X2_C_____________CHOICE (34u)
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER___________________0X2_F_____________________________0X30___________________________0X31_____________________________CHOICE (46u)

#define ECU_ACC_244_ACC_CDD_ACTIVE__NOT_ACTIVE_CHOICE (0u)
#define ECU_ACC_244_ACC_CDD_ACTIVE___ACTIVE_CHOICE (1u)

#define ECU_ACC_244_ACC_DRIVEOFF_REQUEST___NO_REQUEST_CHOICE (0u)
#define ECU_ACC_244_ACC_DRIVEOFF_REQUEST__REQUEST_CHOICE (1u)

#define ECU_ACC_244_ACC_ACC_MODE_OFF_MODE_CHOICE (0u)
#define ECU_ACC_244_ACC_ACC_MODE_PASSIVE_MODE_CHOICE (1u)
#define ECU_ACC_244_ACC_ACC_MODE_STAND_BY_MODE_CHOICE (2u)
#define ECU_ACC_244_ACC_ACC_MODE___ACTIVE__CONTROL_MODE_CHOICE (3u)
#define ECU_ACC_244_ACC_ACC_MODE___BRAKE__ONLY_MODE_CHOICE (4u)
#define ECU_ACC_244_ACC_ACC_MODE___OVERRIDE_CHOICE (5u)
#define ECU_ACC_244_ACC_ACC_MODE___STAND__WAIT_MODE_CHOICE (6u)
#define ECU_ACC_244_ACC_ACC_MODE___FAILURE_MODE_CHOICE (7u)

#define ECU_ACC_244_ACC_AEB_ACTIVE__NOT__ACTIVE_CHOICE (0u)
#define ECU_ACC_244_ACC_AEB_ACTIVE___ACTIVE__CHOICE (1u)

#define ECU_ACC_244_ACC_AB_ALEVEL__LEVEL_0_CHOICE (0u)
#define ECU_ACC_244_ACC_AB_ALEVEL_LEVEL_1_CHOICE (1u)
#define ECU_ACC_244_ACC_AB_ALEVEL__LEVEL_2_CHOICE (2u)
#define ECU_ACC_244_ACC_AB_ALEVEL__LEVEL_3_CHOICE (3u)

#define ECU_ACC_244_ACC_ABA_ACTIVE__NOT__ACTIVE_CHOICE (0u)
#define ECU_ACC_244_ACC_ABA_ACTIVE___ACTIVE_CHOICE (1u)

#define ECU_ACC_244_ACC_AW_BLEVEL___NO_LEVEL_CHOICE (0u)
#define ECU_ACC_244_ACC_AW_BLEVEL___LEVEL_1_CHOICE (1u)
#define ECU_ACC_244_ACC_AW_BLEVEL___LEVEL_2_CHOICE (2u)
#define ECU_ACC_244_ACC_AW_BLEVEL___LEVEL_3_CHOICE (3u)
#define ECU_ACC_244_ACC_AW_BLEVEL___LEVEL_4_CHOICE (4u)
#define ECU_ACC_244_ACC_AW_BLEVEL__RESERVED_CHOICE (5u)

#define ECU_ACC_244_ACC_AWB_ACTIVE__NOT__ACTIVE_CHOICE (0u)
#define ECU_ACC_244_ACC_AWB_ACTIVE___ACTIVE_CHOICE (1u)

#define ECU_ACC_244_ACC_PREFILL_ACTIVE__NOT__ACTIVE_CHOICE (0u)
#define ECU_ACC_244_ACC_PREFILL_ACTIVE___ACTIVE_CHOICE (1u)

#define ECU_ACC_244_ACC_FCW_ACTIVE__NOT__ACTIVE_CHOICE (0u)
#define ECU_ACC_244_ACC_FCW_ACTIVE___ACTIVE_CHOICE (1u)

#define ECU_ACC_244_ACC_FCW_LATENT_WARNING__NO_WARNING_CHOICE (0u)
#define ECU_ACC_244_ACC_FCW_LATENT_WARNING__WARNING_CHOICE (1u)

#define ECU_ACC_244_ACC_FCW_PRE_WARNING__NO_WARNING_CHOICE (0u)
#define ECU_ACC_244_ACC_FCW_PRE_WARNING__WARNING_CHOICE (1u)

#define ECU_ACC_244_ACC_AEB_VEHILCE_HOLD_REQ___NO_HOLD_CHOICE (0u)
#define ECU_ACC_244_ACC_AEB_VEHILCE_HOLD_REQ__HOLD_CHOICE (1u)

#define ECU_ACC_244_ACC_ACC_TRQ_REQ_ACTIVE__NOT__ACTIVE_CHOICE (0u)
#define ECU_ACC_244_ACC_ACC_TRQ_REQ_ACTIVE___ACTIVE__CHOICE (1u)

#define ECU_ACC_244_ACC_AEB_CTRL_TYPE_NO_REQUEST_CHOICE (0u)
#define ECU_ACC_244_ACC_AEB_CTRL_TYPE_AEB_C_U__AEB_______CHOICE (1u)
#define ECU_ACC_244_ACC_AEB_CTRL_TYPE_AEB_VRU__AEB_______CHOICE (2u)
#define ECU_ACC_244_ACC_AEB_CTRL_TYPE_AEB__CYCLIST__AEB_________CHOICE (3u)
#define ECU_ACC_244_ACC_AEB_CTRL_TYPE_EBA_____________CHOICE (4u)
#define ECU_ACC_244_ACC_AEB_CTRL_TYPE_FCTB__________AEB___CHOICE (5u)
#define ECU_ACC_244_ACC_AEB_CTRL_TYPE_RCTB_________AEB__CHOICE (6u)
#define ECU_ACC_244_ACC_AEB_CTRL_TYPE_RESERVED_CHOICE (7u)

#define ECU_ACC_244_ACC_LNG_TAKE_OVER_REQ_NO_REQUEST_CHOICE (0u)
#define ECU_ACC_244_ACC_LNG_TAKE_OVER_REQ_LEVEL_1_REQUEST_CHOICE (1u)
#define ECU_ACC_244_ACC_LNG_TAKE_OVER_REQ_LEVEL_2_REQUEST_CHOICE (2u)
#define ECU_ACC_244_ACC_LNG_TAKE_OVER_REQ_RESERVED_CHOICE (3u)

#define ECU_ACC_244_ACC_LAT_TAKEOVER_REQ_NO_REQUEST_CHOICE (0u)
#define ECU_ACC_244_ACC_LAT_TAKEOVER_REQ_LEVEL_1_REQUEST_CHOICE (1u)
#define ECU_ACC_244_ACC_LAT_TAKEOVER_REQ_LEVEL_2_REQUEST_CHOICE (2u)
#define ECU_ACC_244_ACC_LAT_TAKEOVER_REQ_RESERVED_CHOICE (3u)

#define ECU_ACC_244_ACC_HANDS_ON_REQ_NO_REQUEST_CHOICE (0u)
#define ECU_ACC_244_ACC_HANDS_ON_REQ_LEVEL_1_REQUEST_CHOICE (1u)
#define ECU_ACC_244_ACC_HANDS_ON_REQ_LEVEL_2_REQUEST_CHOICE (2u)
#define ECU_ACC_244_ACC_HANDS_ON_REQ_LEVEL_3_REQUEST_CHOICE (3u)
#define ECU_ACC_244_ACC_HANDS_ON_REQ_LEVEL_4_REQUEST_CHOICE (4u)
#define ECU_ACC_244_ACC_HANDS_ON_REQ_RESERVED_CHOICE (5u)

#define ECU_ACC_244_ADS_EOMTO_REQ________CHOICE (0u)
#define ECU_ACC_244_ADS_EOMTO_REQ_1___________CHOICE (1u)
#define ECU_ACC_244_ADS_EOMTO_REQ_2___________CHOICE (2u)
#define ECU_ACC_244_ADS_EOMTO_REQ_3___________CHOICE (3u)

#define ECU_GW_278_ESP_YAW_RATE_VALID_VALID_CHOICE (0u)
#define ECU_GW_278_ESP_YAW_RATE_VALID_INVALID_CHOICE (1u)

#define ECU_GW_298_PEPS_TRUNK_REQUEST_SIGNAL_OFF_CHOICE (0u)
#define ECU_GW_298_PEPS_TRUNK_REQUEST_SIGNAL___________________CHOICE (1u)

#define ECU_GW_298_PEPS_KEY_LEARNING_SIGNAL___INACTIVE___________CHOICE (0u)
#define ECU_GW_298_PEPS_KEY_LEARNING_SIGNAL___START_______CHOICE (1u)
#define ECU_GW_298_PEPS_KEY_LEARNING_SIGNAL___SUCCESS_____CHOICE (2u)
#define ECU_GW_298_PEPS_KEY_LEARNING_SIGNAL___FAILED_____CHOICE (3u)

#define ECU_GW_298_PEPS_EASY_OPEN_ORGINAL_SIGNAL___________________CHOICE (0u)
#define ECU_GW_298_PEPS_EASY_OPEN_ORGINAL_SIGNAL________________CHOICE (1u)

#define ECU_GW_298_PEPS_REMOTE_FAILED_ALARM_SIGNAL_INACTIVE_CHOICE (0u)
#define ECU_GW_298_PEPS_REMOTE_FAILED_ALARM_SIGNAL______________CHOICE (1u)

#define ECU_GW_298_PEPS_SEARCH_CAR_SIGNAL_INACTIVE_CHOICE (0u)
#define ECU_GW_298_PEPS_SEARCH_CAR_SIGNAL_ON_CHOICE (1u)

#define ECU_GW_298_PEPS_LUGGAGE_UNLOCK_SIGNAL___INACTIVE_CHOICE (0u)
#define ECU_GW_298_PEPS_LUGGAGE_UNLOCK_SIGNAL_________________CHOICE (1u)
#define ECU_GW_298_PEPS_LUGGAGE_UNLOCK_SIGNAL__PE___________CHOICE (2u)
#define ECU_GW_298_PEPS_LUGGAGE_UNLOCK_SIGNAL_________CHOICE (3u)

#define ECU_GW_298_PEPS_KEY_NUMBER_INVALID_CHOICE (0u)
#define ECU_GW_298_PEPS_KEY_NUMBER_KEY1__KEY6_CHOICE (1u)
#define ECU_GW_298_PEPS_KEY_NUMBER_RESERVED_CHOICE (7u)

#define ECU_GW_298_PEPS_KEY_AUTHENTICATION_STATUS_INACTIVE___________CHOICE (0u)
#define ECU_GW_298_PEPS_KEY_AUTHENTICATION_STATUS_START_______CHOICE (1u)
#define ECU_GW_298_PEPS_KEY_AUTHENTICATION_STATUS_SUCCESS_____CHOICE (2u)
#define ECU_GW_298_PEPS_KEY_AUTHENTICATION_STATUS_FAILED_____CHOICE (3u)

#define ECU_GW_298_PEPS_EASY_OPEN_NO_COMMAND_CHOICE (0u)
#define ECU_GW_298_PEPS_EASY_OPEN______________CHOICE (1u)

#define ECU_GW_298_PEPS_WELCOMELAMP_INACTIVE_CHOICE (0u)
#define ECU_GW_298_PEPS_WELCOMELAMP__OFF_CHOICE (1u)
#define ECU_GW_298_PEPS_WELCOMELAMP_ON_CHOICE (2u)
#define ECU_GW_298_PEPS_WELCOMELAMP_RESERVED_CHOICE (3u)

#define ECU_GW_298_PEPS_SMART_TRUNK_ULOCK_REMIND___INACTIVE_CHOICE (0u)
#define ECU_GW_298_PEPS_SMART_TRUNK_ULOCK_REMIND_SLOW_FLASH_CHOICE (1u)
#define ECU_GW_298_PEPS_SMART_TRUNK_ULOCK_REMIND_FAST_FLASH_CHOICE (2u)
#define ECU_GW_298_PEPS_SMART_TRUNK_ULOCK_REMIND_RESERVED_CHOICE (3u)

#define ECU_GW_298_PEPS_UNLOCK_SIGNAL___INACTIVE_CHOICE (0u)
#define ECU_GW_298_PEPS_UNLOCK_SIGNAL___________CHOICE (1u)
#define ECU_GW_298_PEPS_UNLOCK_SIGNAL______PE_____2_CHOICE (2u)
#define ECU_GW_298_PEPS_UNLOCK_SIGNAL______PE_____3_CHOICE (3u)

#define ECU_GW_298_PEPS_LOCK_SIGNAL___INACTIVE_CHOICE (0u)
#define ECU_GW_298_PEPS_LOCK_SIGNAL___________CHOICE (1u)
#define ECU_GW_298_PEPS_LOCK_SIGNAL__PE_____CHOICE (2u)
#define ECU_GW_298_PEPS_LOCK_SIGNAL_________CHOICE (3u)

#define ECU_GW_298_PEPS_LOCK_KEY_STATUS_INVALID_CHOICE (0u)
#define ECU_GW_298_PEPS_LOCK_KEY_STATUS__PRESSED_CHOICE (1u)
#define ECU_GW_298_PEPS_LOCK_KEY_STATUS_NOT_PRESSED__CHOICE (2u)
#define ECU_GW_298_PEPS_LOCK_KEY_STATUS_RESERVE_CHOICE (3u)

#define ECU_GW_298_BCM_TRUNK_UNLOCK_REQ_NO_REQUEST_CHOICE (0u)
#define ECU_GW_298_BCM_TRUNK_UNLOCK_REQ_TRUNK_UNLOCK_CHOICE (1u)

#define ECU_GW_298_PEPS_SMART_WELCOME_LIGHT_STAUS_INACTIVE_CHOICE (0u)
#define ECU_GW_298_PEPS_SMART_WELCOME_LIGHT_STAUS_ON_CHOICE (1u)
#define ECU_GW_298_PEPS_SMART_WELCOME_LIGHT_STAUS_OFF_CHOICE (2u)
#define ECU_GW_298_PEPS_SMART_WELCOME_LIGHT_STAUS_RESERVED_CHOICE (3u)

#define ECU_GW_298_PEPS_TRUNK_KEY_STATUS_INVALID_CHOICE (0u)
#define ECU_GW_298_PEPS_TRUNK_KEY_STATUS__PRESSED_CHOICE (1u)
#define ECU_GW_298_PEPS_TRUNK_KEY_STATUS_NOT_PRESSED__CHOICE (2u)
#define ECU_GW_298_PEPS_TRUNK_KEY_STATUS_RESERVE_CHOICE (3u)

#define ECU_GW_298_PEPS_UN_LOCK_KEY_STATUS_INVALID_CHOICE (0u)
#define ECU_GW_298_PEPS_UN_LOCK_KEY_STATUS__PRESSED_CHOICE (1u)
#define ECU_GW_298_PEPS_UN_LOCK_KEY_STATUS_NOT_PRESSED__CHOICE (2u)
#define ECU_GW_298_PEPS_UN_LOCK_KEY_STATUS_RESERVE_CHOICE (3u)

#define ECU_GW_298_BCM_DRIVER_DOOR_LOCK_STATUS_LOCK_CHOICE (0u)
#define ECU_GW_298_BCM_DRIVER_DOOR_LOCK_STATUS_UNLOCK_CHOICE (1u)
#define ECU_GW_298_BCM_DRIVER_DOOR_LOCK_STATUS_NOT_USED_CHOICE (2u)
#define ECU_GW_298_BCM_DRIVER_DOOR_LOCK_STATUS_ERROR_CHOICE (3u)

#define ECU_GW_298_BCM_PASSENGER_DOOR_LOCK_STATUS_LOCK_CHOICE (0u)
#define ECU_GW_298_BCM_PASSENGER_DOOR_LOCK_STATUS_UNLOCK_CHOICE (1u)
#define ECU_GW_298_BCM_PASSENGER_DOOR_LOCK_STATUS_NOT_USED_CHOICE (2u)
#define ECU_GW_298_BCM_PASSENGER_DOOR_LOCK_STATUS_ERROR_CHOICE (3u)

#define ECU_GW_298_BCM_LEFT_REAR_DOOR_STATUS_CLOSE_CHOICE (0u)
#define ECU_GW_298_BCM_LEFT_REAR_DOOR_STATUS_OPEN_CHOICE (1u)

#define ECU_ACC_307_ACC_OBJ_VALID__NO_OBJECT_CHOICE (0u)
#define ECU_ACC_307_ACC_OBJ_VALID__TARGET_OBJECT_DETECTED_CHOICE (1u)

#define ECU_ACC_307_ACC_ACCEP_BREQUEST__NO_REQUEST_CHOICE (0u)
#define ECU_ACC_307_ACC_ACCEP_BREQUEST___REQUEST_CHOICE (1u)

#define ECU_ACC_307_ACC_DISTANCE_LEVEL_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_307_ACC_DISTANCE_LEVEL___LEVEL_1_CHOICE (1u)
#define ECU_ACC_307_ACC_DISTANCE_LEVEL_LEVEL_2_CHOICE (2u)
#define ECU_ACC_307_ACC_DISTANCE_LEVEL___LEVEL_3_CHOICE (3u)
#define ECU_ACC_307_ACC_DISTANCE_LEVEL_RESERVED_CHOICE (4u)

#define ECU_ACC_307_ACC_TIME_GAP_SET_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_307_ACC_TIME_GAP_SET_1_0_S_CHOICE (1u)
#define ECU_ACC_307_ACC_TIME_GAP_SET_1_4_S_CHOICE (2u)
#define ECU_ACC_307_ACC_TIME_GAP_SET_1_8_S_CHOICE (3u)
#define ECU_ACC_307_ACC_TIME_GAP_SET_2_4_S_CHOICE (4u)
#define ECU_ACC_307_ACC_TIME_GAP_SET_RESERVED_CHOICE (5u)

#define ECU_ACC_307_ACC_FCW_SETTING_STATUS_EARLY_CHOICE (0u)
#define ECU_ACC_307_ACC_FCW_SETTING_STATUS_NORMAL_CHOICE (1u)
#define ECU_ACC_307_ACC_FCW_SETTING_STATUS_LATE_CHOICE (2u)
#define ECU_ACC_307_ACC_FCW_SETTING_STATUS_OFF_CHOICE (3u)
#define ECU_ACC_307_ACC_FCW_SETTING_STATUS_RESERVED_CHOICE (4u)

#define ECU_ACC_307_ACC_AEB_ENABLE_OFF_CHOICE (0u)
#define ECU_ACC_307_ACC_AEB_ENABLE_ON_CHOICE (1u)

#define ECU_ACC_307_ACC_IACC_SUSPEND_REASON_IDLE_CHOICE (0u)
#define ECU_ACC_307_ACC_IACC_SUSPEND_REASON______________________FREESPACE___________CHOICE (1u)
#define ECU_ACC_307_ACC_IACC_SUSPEND_REASON____________2_CHOICE (2u)
#define ECU_ACC_307_ACC_IACC_SUSPEND_REASON____________3_CHOICE (3u)
#define ECU_ACC_307_ACC_IACC_SUSPEND_REASON__________4_CHOICE (4u)
#define ECU_ACC_307_ACC_IACC_SUSPEND_REASON________________CHOICE (5u)
#define ECU_ACC_307_ACC_IACC_SUSPEND_REASON_RESERVED_CHOICE (6u)
#define ECU_ACC_307_ACC_IACC_SUSPEND_REASON__________7_CHOICE (7u)

#define ECU_ACC_307_ACC_ACC_TARGET_LNG_RANGE__70_180_CHOICE (0u)
#define ECU_ACC_307_ACC_ACC_TARGET_LNG_RANGE_RESERVED_CHOICE (501u)
#define ECU_ACC_307_ACC_ACC_TARGET_LNG_RANGE_NO_DISPLAY_CHOICE (511u)

#define ECU_ACC_307_ACC_AEB_FEATURE_CONFIG__AEBM_NOT_CONFIGURED_CHOICE (0u)
#define ECU_ACC_307_ACC_AEB_FEATURE_CONFIG__AEB_VRU_NOT_CONFIGURED_CHOICE (1u)
#define ECU_ACC_307_ACC_AEB_FEATURE_CONFIG__EBA_NOT_CONFIGURED_CHOICE (2u)
#define ECU_ACC_307_ACC_AEB_FEATURE_CONFIG__AEBP_NOT_CONFIGURED_CHOICE (3u)
#define ECU_ACC_307_ACC_AEB_FEATURE_CONFIG___PREWARNING_NOT_CONFIGURED_CHOICE (4u)
#define ECU_ACC_307_ACC_AEB_FEATURE_CONFIG___PREWARNING_VRU_NOT_CONFIGURED_CHOICE (5u)
#define ECU_ACC_307_ACC_AEB_FEATURE_CONFIG__AWB_NOT_CONFIGURED_CHOICE (6u)
#define ECU_ACC_307_ACC_AEB_FEATURE_CONFIG__LTA_NOT_CONFIGURED_CHOICE (7u)
#define ECU_ACC_307_ACC_AEB_FEATURE_CONFIG__CPTA_NOT_CONFIGURED_CHOICE (8u)
#define ECU_ACC_307_ACC_AEB_FEATURE_CONFIG___PREFILL_NOT_CONFIGURED_CHOICE (9u)
#define ECU_ACC_307_ACC_AEB_FEATURE_CONFIG__HBA_NOT_CONFIGURED_CHOICE (10u)
#define ECU_ACC_307_ACC_AEB_FEATURE_CONFIG___RESERVED_CHOICE (11u)

#define ECU_ACC_307_ACC_F_RADAR_CALIBRATION_STATUS___CALIBRATION_IS_OK_CHOICE (0u)
#define ECU_ACC_307_ACC_F_RADAR_CALIBRATION_STATUS___CALIBRATION__IN__PROCESS_CHOICE (1u)
#define ECU_ACC_307_ACC_F_RADAR_CALIBRATION_STATUS___CALIBRATION_NEVER_DONE_CHOICE (2u)
#define ECU_ACC_307_ACC_F_RADAR_CALIBRATION_STATUS____CALIBRATION__FAILED_CHOICE (3u)

#define ECU_ACC_307_ACC_ACC_TARGET_REL_SPD__250_250_CHOICE (0u)
#define ECU_ACC_307_ACC_ACC_TARGET_REL_SPD_RESERVED_CHOICE (501u)

#define ECU_ACC_307_ACC_CSL_SET_REQ_NO_REQUEST_CHOICE (0u)
#define ECU_ACC_307_ACC_CSL_SET_REQ_REQUEST_CHOICE (1u)

#define ECU_ACC_307_ACC_AEB_TARGET_SELECTED__NO_OBJECT_SELECTED_CHOICE (0u)
#define ECU_ACC_307_ACC_AEB_TARGET_SELECTED__ONLY_LONGITUDINAL_OBJECT_SELECTED_CHOICE (1u)
#define ECU_ACC_307_ACC_AEB_TARGET_SELECTED__ONLY_CROSSING_OBJECT_SELECTED_CHOICE (2u)
#define ECU_ACC_307_ACC_AEB_TARGET_SELECTED__BOTH_LONGITUDINAL___CROSSING_OBJECT_SELECTED_CHOICE (3u)
#define ECU_ACC_307_ACC_AEB_TARGET_SELECTED__LTA_OBJECT_SELECTED_CHOICE (4u)
#define ECU_ACC_307_ACC_AEB_TARGET_SELECTED__CPTA_OBJECT_SELECTED_CHOICE (5u)
#define ECU_ACC_307_ACC_AEB_TARGET_SELECTED__BOTH_LTA___CPTA_OBJECT_SELECTED_CHOICE (6u)
#define ECU_ACC_307_ACC_AEB_TARGET_SELECTED___RESERVED_CHOICE (7u)

#define ECU_ACC_307_ACC_CSLA_ENABLE_STATUS_OFF_CHOICE (0u)
#define ECU_ACC_307_ACC_CSLA_ENABLE_STATUS_ALL__SPEED__LIMIT_CHOICE (1u)
#define ECU_ACC_307_ACC_CSLA_ENABLE_STATUS_ROAD__CAMERA_CHOICE (2u)
#define ECU_ACC_307_ACC_CSLA_ENABLE_STATUS_INVALID_CHOICE (3u)

#define ECU_ACC_307_ACC_TARGET6_DETECTION_NOT_DECTECTED_CHOICE (0u)
#define ECU_ACC_307_ACC_TARGET6_DETECTION_IP_DISPLAY_CHOICE (1u)
#define ECU_ACC_307_ACC_TARGET6_DETECTION_FRONT__TARGET_CHOICE (2u)
#define ECU_ACC_307_ACC_TARGET6_DETECTION_IACC_TARGET_CHOICE (3u)
#define ECU_ACC_307_ACC_TARGET6_DETECTION_AEB_TARGET_CHOICE (4u)
#define ECU_ACC_307_ACC_TARGET6_DETECTION_DANGEROUS_TARGET__ELK__UDLC__RCW__ETC___CHOICE (5u)
#define ECU_ACC_307_ACC_TARGET6_DETECTION_OTHER_TARGET_CHOICE (6u)
#define ECU_ACC_307_ACC_TARGET6_DETECTION_RESERVED_CHOICE (7u)

#define ECU_ACC_307_ACC_TARGET6_ID__CHOICE (0u)

#define ECU_ACC_307_ACC_TARGET6_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_307_ACC_TARGET6_TYPE_SEDAN_CHOICE (1u)
#define ECU_ACC_307_ACC_TARGET6_TYPE_MOTORCYCLE_CHOICE (2u)
#define ECU_ACC_307_ACC_TARGET6_TYPE_PEDESTRIAN_CHOICE (3u)
#define ECU_ACC_307_ACC_TARGET6_TYPE_BICYCLE_CHOICE (4u)
#define ECU_ACC_307_ACC_TARGET6_TYPE_BUS_CHOICE (5u)
#define ECU_ACC_307_ACC_TARGET6_TYPE_VAN_CHOICE (6u)
#define ECU_ACC_307_ACC_TARGET6_TYPE_TRUCK_CHOICE (7u)
#define ECU_ACC_307_ACC_TARGET6_TYPE_CONE__CONSIDERATION_CHOICE (8u)
#define ECU_ACC_307_ACC_TARGET6_TYPE_WARNING__COLUMN_CHOICE (9u)
#define ECU_ACC_307_ACC_TARGET6_TYPE_WATER__HORSE_CHOICE (10u)
#define ECU_ACC_307_ACC_TARGET6_TYPE_ANTI__COLLISION__BUCKET_CHOICE (11u)
#define ECU_ACC_307_ACC_TARGET6_TYPE_OTHERS_CHOICE (12u)
#define ECU_ACC_307_ACC_TARGET6_TYPE_ANIMAL_CHOICE (13u)
#define ECU_ACC_307_ACC_TARGET6_TYPE_NON_ROAD_VEHICLE_CHOICE (14u)
#define ECU_ACC_307_ACC_TARGET6_TYPE_CAR_WARNING_TRIANGLE_CHOICE (15u)

#define ECU_ACC_307_ACC_TARGET6_DIRECTION_FORWARD_CHOICE (0u)
#define ECU_ACC_307_ACC_TARGET6_DIRECTION_ON_COMING_CHOICE (1u)
#define ECU_ACC_307_ACC_TARGET6_DIRECTION_LEFT_CHOICE (2u)
#define ECU_ACC_307_ACC_TARGET6_DIRECTION_RIGHT_CHOICE (3u)
#define ECU_ACC_307_ACC_TARGET6_DIRECTION_UNKNOWN_CHOICE (4u)
#define ECU_ACC_307_ACC_TARGET6_DIRECTION_REFER_TO_HEADINGANGLE_CHOICE (5u)
#define ECU_ACC_307_ACC_TARGET6_DIRECTION_RESERVED_CHOICE (6u)

#define ECU_ACC_307_ACC_TARGET6_LNG_RANGE__100_300_CHOICE (0u)
#define ECU_ACC_307_ACC_TARGET6_LNG_RANGE_RESERVED_CHOICE (4001u)
#define ECU_ACC_307_ACC_TARGET6_LNG_RANGE_INVALID_CHOICE (4095u)

#define ECU_ACC_307_ACC_TARGET6_LAT_RANGE__50_50M_CHOICE (0u)
#define ECU_ACC_307_ACC_TARGET6_LAT_RANGE_RESERVED_CHOICE (1001u)
#define ECU_ACC_307_ACC_TARGET6_LAT_RANGE_INVALID_CHOICE (1023u)

#define ECU_ACC_307_ACC_TARGET6_ZONE_ID_NO_ZONEID_CHOICE (0u)
#define ECU_ACC_307_ACC_TARGET6_ZONE_ID_ZONEID1_11_0X_C_HOSTLANE_ZONE_0X_D_LEFTLANE_ZONE_0X_E_RIGHTLANE_ZONE_0X_F_LL_LANE_ZONE_0X10_RR_LANE_ZONE_0X11__RAMP_ZONE_CHOICE (1u)
#define ECU_ACC_307_ACC_TARGET6_ZONE_ID_OTHERS_CHOICE (18u)
#define ECU_ACC_307_ACC_TARGET6_ZONE_ID_RESERVED_CHOICE (19u)

#define ECU_ACC_307_ACC_TARGET7_DETECTION_NOT_DECTECTED_CHOICE (0u)
#define ECU_ACC_307_ACC_TARGET7_DETECTION_IP_DISPLAY_CHOICE (1u)
#define ECU_ACC_307_ACC_TARGET7_DETECTION_FRONT__TARGET_CHOICE (2u)
#define ECU_ACC_307_ACC_TARGET7_DETECTION_IACC_TARGET_CHOICE (3u)
#define ECU_ACC_307_ACC_TARGET7_DETECTION_AEB_TARGET_CHOICE (4u)
#define ECU_ACC_307_ACC_TARGET7_DETECTION_DANGEROUS_TARGET__ELK__UDLC__RCW__ETC___CHOICE (5u)
#define ECU_ACC_307_ACC_TARGET7_DETECTION_OTHER_TARGET_CHOICE (6u)
#define ECU_ACC_307_ACC_TARGET7_DETECTION_RESERVED_CHOICE (7u)

#define ECU_ACC_307_ACC_TARGET7_ID__CHOICE (0u)

#define ECU_ACC_307_ACC_TARGET7_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_307_ACC_TARGET7_TYPE_SEDAN_CHOICE (1u)
#define ECU_ACC_307_ACC_TARGET7_TYPE_MOTORCYCLE_CHOICE (2u)
#define ECU_ACC_307_ACC_TARGET7_TYPE_PEDESTRIAN_CHOICE (3u)
#define ECU_ACC_307_ACC_TARGET7_TYPE_BICYCLE_CHOICE (4u)
#define ECU_ACC_307_ACC_TARGET7_TYPE_BUS_CHOICE (5u)
#define ECU_ACC_307_ACC_TARGET7_TYPE_VAN_CHOICE (6u)
#define ECU_ACC_307_ACC_TARGET7_TYPE_TRUCK_CHOICE (7u)
#define ECU_ACC_307_ACC_TARGET7_TYPE_CONE__CONSIDERATION_CHOICE (8u)
#define ECU_ACC_307_ACC_TARGET7_TYPE_WARNING__COLUMN_CHOICE (9u)
#define ECU_ACC_307_ACC_TARGET7_TYPE_WATER__HORSE_CHOICE (10u)
#define ECU_ACC_307_ACC_TARGET7_TYPE_ANTI__COLLISION__BUCKET_CHOICE (11u)
#define ECU_ACC_307_ACC_TARGET7_TYPE_OTHERS_CHOICE (12u)
#define ECU_ACC_307_ACC_TARGET7_TYPE_ANIMAL_CHOICE (13u)
#define ECU_ACC_307_ACC_TARGET7_TYPE_NON_ROAD_VEHICLE_CHOICE (14u)
#define ECU_ACC_307_ACC_TARGET7_TYPE_CAR_WARNING_TRIANGLE_CHOICE (15u)

#define ECU_ACC_307_ACC_TARGET7_DIRECTION_FORWARD_CHOICE (0u)
#define ECU_ACC_307_ACC_TARGET7_DIRECTION_ON_COMING_CHOICE (1u)
#define ECU_ACC_307_ACC_TARGET7_DIRECTION_LEFT_CHOICE (2u)
#define ECU_ACC_307_ACC_TARGET7_DIRECTION_RIGHT_CHOICE (3u)
#define ECU_ACC_307_ACC_TARGET7_DIRECTION_UNKNOWN_CHOICE (4u)
#define ECU_ACC_307_ACC_TARGET7_DIRECTION_REFER_TO_HEADINGANGLE_CHOICE (5u)
#define ECU_ACC_307_ACC_TARGET7_DIRECTION_RESERVED_CHOICE (6u)

#define ECU_ACC_307_ACC_TARGET7_LNG_RANGE__100_300_CHOICE (0u)
#define ECU_ACC_307_ACC_TARGET7_LNG_RANGE_RESERVED_CHOICE (4001u)
#define ECU_ACC_307_ACC_TARGET7_LNG_RANGE_INVALID_CHOICE (4095u)

#define ECU_ACC_307_ACC_TARGET7_LAT_RANGE__50_50M_CHOICE (0u)
#define ECU_ACC_307_ACC_TARGET7_LAT_RANGE_RESERVED_CHOICE (1001u)
#define ECU_ACC_307_ACC_TARGET7_LAT_RANGE_INVALID_CHOICE (1023u)

#define ECU_ACC_307_ACC_TARGET7_ZONE_ID_NO_ZONEID_CHOICE (0u)
#define ECU_ACC_307_ACC_TARGET7_ZONE_ID_ZONEID1_11_0X_C_HOSTLANE_ZONE_0X_D_LEFTLANE_ZONE_0X_E_RIGHTLANE_ZONE_0X_F_LL_LANE_ZONE_0X10_RR_LANE_ZONE_0X11__RAMP_ZONE_CHOICE (1u)
#define ECU_ACC_307_ACC_TARGET7_ZONE_ID_OTHERS_CHOICE (18u)
#define ECU_ACC_307_ACC_TARGET7_ZONE_ID_RESERVED_CHOICE (19u)

#define ECU_ACC_307_ACC_LL_LANE_DIS_0_12_CHOICE (0u)
#define ECU_ACC_307_ACC_LL_LANE_DIS_RESERVED_CHOICE (241u)

#define ECU_ACC_307_ACC_RR_LANE_DIS__12_0_CHOICE (0u)
#define ECU_ACC_307_ACC_RR_LANE_DIS_RESERVED_CHOICE (241u)

#define ECU_ACC_307_ACC_L_LANE_DISTANCE_FUS__1_5_CHOICE (0u)
#define ECU_ACC_307_ACC_L_LANE_DISTANCE_FUS_RESERVED_CHOICE (121u)

#define ECU_ACC_307_ACC_R_LANE_DISTANCE_FUS__5_1_CHOICE (0u)
#define ECU_ACC_307_ACC_R_LANE_DISTANCE_FUS_RESERVED_CHOICE (120u)

#define ECU_ACC_307_ACC_VEHICLE_START_REMIND_STS_OFF_CHOICE (0u)
#define ECU_ACC_307_ACC_VEHICLE_START_REMIND_STS_PASSIVE_CHOICE (1u)
#define ECU_ACC_307_ACC_VEHICLE_START_REMIND_STS_STANDBY_CHOICE (2u)
#define ECU_ACC_307_ACC_VEHICLE_START_REMIND_STS_ACTIVE_CHOICE (3u)
#define ECU_ACC_307_ACC_VEHICLE_START_REMIND_STS_FAILURE__CHOICE (4u)
#define ECU_ACC_307_ACC_VEHICLE_START_REMIND_STS_RESERVE_CHOICE (5u)

#define ECU_ACC_312_ACC_SELFLEARNING_STATUS_INT_CHOICE (0u)
#define ECU_ACC_312_ACC_SELFLEARNING_STATUS_EARNING_CHOICE (1u)
#define ECU_ACC_312_ACC_SELFLEARNING_STATUS_COMPLETED_CHOICE (2u)
#define ECU_ACC_312_ACC_SELFLEARNING_STATUS_RSVRD_CHOICE (3u)

#define ECU_ACC_312_ACC_AEB_TARGET_DIRECTION_FORWARD_CHOICE (0u)
#define ECU_ACC_312_ACC_AEB_TARGET_DIRECTION_ON_COMING_CHOICE (1u)
#define ECU_ACC_312_ACC_AEB_TARGET_DIRECTION_LEFT_CHOICE (2u)
#define ECU_ACC_312_ACC_AEB_TARGET_DIRECTION_RIGHT_CHOICE (3u)
#define ECU_ACC_312_ACC_AEB_TARGET_DIRECTION_UNKNOWN_CHOICE (4u)
#define ECU_ACC_312_ACC_AEB_TARGET_DIRECTION_NO_DISPLAY_CHOICE (5u)
#define ECU_ACC_312_ACC_AEB_TARGET_DIRECTION_RESERVED_CHOICE (6u)

#define ECU_ACC_312_ACC_AEB_TARGET_DETECTION_NO_DETECTED_CHOICE (0u)
#define ECU_ACC_312_ACC_AEB_TARGET_DETECTION_DETECTED_CHOICE (1u)

#define ECU_ACC_312_ACC_AEB_TARGET_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_312_ACC_AEB_TARGET_TYPE_SEDAN_CHOICE (1u)
#define ECU_ACC_312_ACC_AEB_TARGET_TYPE_MOTORCYCLE_CHOICE (2u)
#define ECU_ACC_312_ACC_AEB_TARGET_TYPE_PEDESTRIAN_CHOICE (3u)
#define ECU_ACC_312_ACC_AEB_TARGET_TYPE_BICYCLE_CHOICE (4u)
#define ECU_ACC_312_ACC_AEB_TARGET_TYPE_BUS_CHOICE (5u)
#define ECU_ACC_312_ACC_AEB_TARGET_TYPE_VAN_CHOICE (6u)
#define ECU_ACC_312_ACC_AEB_TARGET_TYPE_TRUCK_CHOICE (7u)
#define ECU_ACC_312_ACC_AEB_TARGET_TYPE_RESERVED_CHOICE (8u)
#define ECU_ACC_312_ACC_AEB_TARGET_TYPE_OTHER_CHOICE (15u)

#define ECU_ACC_312_ADS_EOM_WARNNING_NO_WARNNING_CHOICE (0u)
#define ECU_ACC_312_ADS_EOM_WARNNING_L1_WARNNING_CHOICE (1u)
#define ECU_ACC_312_ADS_EOM_WARNNING_L2_WARNNING_CHOICE (2u)
#define ECU_ACC_312_ADS_EOM_WARNNING_L3_WARNNING_CHOICE (3u)
#define ECU_ACC_312_ADS_EOM_WARNNING_RESERVED_CHOICE (4u)

#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_TAKE_OVER_CHOICE (1u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_SAFT_PARKING_CHOICE (2u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_DEACTIVATE_CHOICE (3u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_HANDSOFF0_CHOICE (4u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_DROWSINESS_CHOICE (5u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_IACC__CANCEL_CHOICE (6u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_IACC_ACTIVE_CHOICE (7u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_IACC_SUSPEND_CHOICE (8u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_IAC_COR_ACC__OVERRIDE_CHOICE (9u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_ACC__CANCEL_CHOICE (10u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_ACC__ACTIVE_CHOICE (11u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_TJP_ACTIVE_CHOICE (12u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_SEAT_POSTURE_RECTIFY_CHOICE (13u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_VEHICLE_DISTANCE_CHOICE (14u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_SPEED_OUT_OF_RANGE_CHOICE (19u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_LANECHANGE_TO_LEFTPATH_CHOICE (20u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST__LANECHANGE_TO_RIGHTPATH_CHOICE (21u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_LANE_CHANGE_RETURN_CHOICE (22u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_LANECHANGE_TO_LEFT_SIDE_SOON_CHOICE (23u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_LANECHANGE_TO_RIGHT_SIDE_SOON_CHOICE (24u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_PLZ_LANECHANGE_FOR__PATH_THROUGH_RAMP_IN_RIGHT_SIDE_CHOICE (25u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_PLZ_LANECHANGE_FOR__PATH_THROUGH_RAMP_IN_LEFT_SIDE_CHOICE (26u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_LANECHANGE_CONDITION_NOT_SUPPORT_CHOICE (31u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_WAITING_LANECHANGE_TIMEOUT_CHOICE (32u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_BE_CAREFUL_OF_COMPLEX_ROAD_CONDITION_CHOICE (33u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_BE_CAREFUL_OF_CONFLUENCE_AHEAD_CHOICE (34u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_FREQUENT_ACCIDENTS_CHOICE (35u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_CONGESTION_AHEAD_CHOICE (36u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST__PLZ_OVERRIDE_FOR__PATH_THROUGH_RAMP_CHOICE (37u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST__PLZ_OVERRIDE_BECAUSE_OF_TOLL_STATION_AHEAD_CHOICE (38u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_RECOMMEND_TJP_CHOICE (39u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_SPD_LIMIT_CHOICE (40u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_NID_CANCLE_CHOICE (41u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_NID_ACTIVE_CHOICE (42u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_NID_OUT_CHOICE (43u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_BAD_WEATHER_LEAD_TO_NID_OUT_CHOICE (44u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_SHARP_TURN_LEAD_TO_NID_OUT_CHOICE (45u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_TOLL__STATION_LEAD_TO_NID_OUT_CHOICE (46u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_ACCIDENTS_LEAD_TO_NID_OUT_CHOICE (47u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_ROADWORKS_LEAD_TO_NID_OUT_CHOICE (48u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST__NID_OUT_AFTER_300M_CHOICE (49u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST__NID_OUT_AFTER_200M_CHOICE (50u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST__NID_OUT_AFTER_100M_CHOICE (51u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_CONCETRATE_0X35_CONCETRATE_TO_SEE_ROAD_CHOICE (52u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_NID_OUT_AFTER_1000M_CHOICE (54u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_SHARP_TURN__PLZ_WATCH_OUT_CHOICE (55u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_LEAVING_OUT_CURRENT_ROAD_PLZ_WATCH_OUT_CHOICE (56u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_MERGE_IN_MAIN_ROAD_PLZ_WATCH_OUT_CHOICE (57u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_RAMP_AHEAD_TO_TURN_LEFT_CHOICE (58u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_RAMP_AHEAD_TO_TURN_RIGHT_CHOICE (59u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_MERGE_IN_MAIN_ROAD_CHOICE (60u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_TURN_LEFT_RIGHT_NOW_CHOICE (61u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_TURN_RIGHT_RIGHT_NOW_CHOICE (62u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_OVERTAKEING_LEFT_CHOICE (63u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_OVERTAKING_RIGHT_CHOICE (64u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_HEAVY_BRAKING_CHOICE (65u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_OVER_SPEED_CHOICE (66u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST______________________67_CHOICE (67u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST______________________________CHOICE (68u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST________________________CHOICE (69u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST____________________________CHOICE (70u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST______________________71_CHOICE (71u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST____________________CHOICE (72u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST______________________73_CHOICE (73u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST______________________74_CHOICE (74u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST______________CHOICE (75u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_________________________IACC_________CHOICE (76u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_____________________120_KM_H_CHOICE (77u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST__________________________0X4_F________________________0X50____________0X51__________0X52________________________________________0X53___________________________IACC_________0X54________________________________0X55_________________________________0X56_________CHOICE (78u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_BAACC________________0X_C4_ACC_IACC______________0X_C5_ACC________________0X_C6_ACC_______________ESP_0X_C7_ACC__________________0X_C8_ACC________________________0X_C9_ACC_IACC__________________0X_CA_ACC__________________0X_CB_ACC_____________APA_____0X_CC_ACC______CHOICE (195u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_DDSAS_______CHOICE (275u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST__276_CHOICE (276u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST__277_CHOICE (277u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST__278_CHOICE (278u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST__279_CHOICE (279u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST__280_CHOICE (280u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST__281_CHOICE (281u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST__282_CHOICE (282u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST__283_CHOICE (283u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_____________ACC_________CHOICE (284u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_____________IACC_________CHOICE (285u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_IACC___________CHOICE (286u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST___________ACC_________CHOICE (287u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST___________IACC_________CHOICE (288u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST__289_CHOICE (289u)
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_RESERVED_CHOICE (290u)

#define ECU_ACC_312_ADS_NDA_AUDIO_WAR_ENABLE_STATUS_OFF_CHOICE (0u)
#define ECU_ACC_312_ADS_NDA_AUDIO_WAR_ENABLE_STATUS_ON_CHOICE (1u)

#define ECU_ACC_312_ACC_DRIVER_WINDOW_CONTROL___NO__REQUEST_CHOICE (0u)
#define ECU_ACC_312_ACC_DRIVER_WINDOW_CONTROL__0__100___________________CHOICE (1u)
#define ECU_ACC_312_ACC_DRIVER_WINDOW_CONTROL___RESERVED_CHOICE (102u)

#define ECU_GW_340_AC_FR_BLOW_TYPE_BLOW_FACE_CHOICE (0u)
#define ECU_GW_340_AC_FR_BLOW_TYPE_BLOW_FACE_BLOW_FEET_CHOICE (1u)
#define ECU_GW_340_AC_FR_BLOW_TYPE_BLOW_FEET_CHOICE (2u)
#define ECU_GW_340_AC_FR_BLOW_TYPE_BLOW_FEE_DEFROSTER_CHOICE (3u)
#define ECU_GW_340_AC_FR_BLOW_TYPE_DEFROSTER_CHOICE (4u)
#define ECU_GW_340_AC_FR_BLOW_TYPE_BLOWFACE_DEFROSTER_CHOICE (5u)
#define ECU_GW_340_AC_FR_BLOW_TYPE__BLOWFACE_BLOWFEET_DEFROSTER_CHOICE (6u)
#define ECU_GW_340_AC_FR_BLOW_TYPE_INVALID_CHOICE (7u)

#define ECU_GW_340_AC_PR_AIR_MERGE_PORT_OPENING_RATIO_VD_VALID_CHOICE (0u)
#define ECU_GW_340_AC_PR_AIR_MERGE_PORT_OPENING_RATIO_VD_INVALID_CHOICE (1u)

#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_OFF_CHOICE (0u)
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_LEVEL1_CHOICE (1u)
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_LEVEL2_CHOICE (2u)
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_LEVEL3_CHOICE (3u)
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_LEVEL4_CHOICE (4u)
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_LEVEL5_CHOICE (5u)
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_LEVEL6_CHOICE (6u)
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_LEVEL7_CHOICE (7u)
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_LEVEL8_CHOICE (8u)
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_LEVEL0_____CHOICE (9u)
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_RESERVED_10_CHOICE (10u)
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_RESERVED_11_CHOICE (11u)
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_RESERVED_12_CHOICE (12u)
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_RESERVED_13_CHOICE (13u)
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_RESERVED_14_CHOICE (14u)
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_INVAILD_CHOICE (15u)

#define ECU_GW_340_AC_RR_AIR_MERGE_PORT_OPENING_RATIO_VD_VALID_CHOICE (0u)
#define ECU_GW_340_AC_RR_AIR_MERGE_PORT_OPENING_RATIO_VD_INVALID_CHOICE (1u)

#define ECU_GW_340_AC_RR_AIR_MERGE_PORT_OPENING_RATIO_0_100_CHOICE (0u)
#define ECU_GW_340_AC_RR_AIR_MERGE_PORT_OPENING_RATIO_RESERVED_CHOICE (101u)
#define ECU_GW_340_AC_RR_AIR_MERGE_PORT_OPENING_RATIO_INVALID_CHOICE (127u)

#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_VD_VALID_CHOICE (0u)
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_VD_INVALID_CHOICE (1u)

#define ECU_GW_340_AC_DR_AIR_MERGE_PORT_OPENING_RATIO_0_100_CHOICE (0u)
#define ECU_GW_340_AC_DR_AIR_MERGE_PORT_OPENING_RATIO_RESERVED_CHOICE (101u)
#define ECU_GW_340_AC_DR_AIR_MERGE_PORT_OPENING_RATIO_INVALID_CHOICE (127u)

#define ECU_GW_340_AC_PR_AIR_MERGE_PORT_OPENING_RATIO_0_100_CHOICE (0u)
#define ECU_GW_340_AC_PR_AIR_MERGE_PORT_OPENING_RATIO_RESERVED_CHOICE (101u)
#define ECU_GW_340_AC_PR_AIR_MERGE_PORT_OPENING_RATIO_INVALID_CHOICE (127u)

#define ECU_GW_340_AC_DR_AIR_MERGE_PORT_OPENING_RATIO_VD_VALID_CHOICE (0u)
#define ECU_GW_340_AC_DR_AIR_MERGE_PORT_OPENING_RATIO_VD_INVALID_CHOICE (1u)

#define ECU_GW_340_AC_AC_ON_OFF_OFF_CHOICE (0u)
#define ECU_GW_340_AC_AC_ON_OFF_ON_CHOICE (1u)
#define ECU_GW_340_AC_AC_ON_OFF_NOT_USED_CHOICE (2u)
#define ECU_GW_340_AC_AC_ON_OFF_INVALID_CHOICE (3u)

#define ECU_GW_340_AC_EVAPORATOR_TEMP__40_87___CHOICE (0u)
#define ECU_GW_340_AC_EVAPORATOR_TEMP_INVALID_CHOICE (255u)

#define ECU_GW_347_TPMS_SIGNAL_STATUS_CURRENT__SIGNAL_CHOICE (0u)
#define ECU_GW_347_TPMS_SIGNAL_STATUS_LAST__SIGNAL_CHOICE (1u)

#define ECU_GW_347_BCM_TIRE_PRESURE_SIGNAL_STATUS_RELIABLE_SIGNAL_CHOICE (0u)
#define ECU_GW_347_BCM_TIRE_PRESURE_SIGNAL_STATUS_UNRELIABLE_SIGNAL_CHOICE (1u)

#define ECU_GW_347_TPMS_RF_PRESSURE_WARNING_NO_WARNING_CHOICE (0u)
#define ECU_GW_347_TPMS_RF_PRESSURE_WARNING_HIGH_PRESSURE_WARNING_CHOICE (1u)
#define ECU_GW_347_TPMS_RF_PRESSURE_WARNING_LOW_PRESSURE_WARNING_CHOICE (2u)
#define ECU_GW_347_TPMS_RF_PRESSURE_WARNING_QUIK_LEAKAGE_CHOICE (3u)
#define ECU_GW_347_TPMS_RF_PRESSURE_WARNING_LOST__SENSOR_CHOICE (4u)
#define ECU_GW_347_TPMS_RF_PRESSURE_WARNING_SENSOR_BATTERY_LOW_CHOICE (5u)
#define ECU_GW_347_TPMS_RF_PRESSURE_WARNING_SENSOR_FAILURE_CHOICE (6u)
#define ECU_GW_347_TPMS_RF_PRESSURE_WARNING_RESERVED_CHOICE (7u)

#define ECU_GW_347_TPMS_LR_PRESSURE_WARNING_NO_WARNING_CHOICE (0u)
#define ECU_GW_347_TPMS_LR_PRESSURE_WARNING_HIGH_PRESSURE_WARNING_CHOICE (1u)
#define ECU_GW_347_TPMS_LR_PRESSURE_WARNING_LOW_PRESSURE_WARNING_CHOICE (2u)
#define ECU_GW_347_TPMS_LR_PRESSURE_WARNING_QUIK_LEAKAGE_CHOICE (3u)
#define ECU_GW_347_TPMS_LR_PRESSURE_WARNING_LOST__SENSOR_CHOICE (4u)
#define ECU_GW_347_TPMS_LR_PRESSURE_WARNING_SENSOR_BATTERY_LOW_CHOICE (5u)
#define ECU_GW_347_TPMS_LR_PRESSURE_WARNING_SENSOR_FAILURE_CHOICE (6u)
#define ECU_GW_347_TPMS_LR_PRESSURE_WARNING_RESERVED_CHOICE (7u)

#define ECU_GW_347_TPMS_RR_PRESSURE_WARNING_NO_WARNING_CHOICE (0u)
#define ECU_GW_347_TPMS_RR_PRESSURE_WARNING_HIGH_PRESSURE_WARNING_CHOICE (1u)
#define ECU_GW_347_TPMS_RR_PRESSURE_WARNING_LOW_PRESSURE_WARNING_CHOICE (2u)
#define ECU_GW_347_TPMS_RR_PRESSURE_WARNING_QUIK_LEAKAGE_CHOICE (3u)
#define ECU_GW_347_TPMS_RR_PRESSURE_WARNING_LOST__SENSOR_CHOICE (4u)
#define ECU_GW_347_TPMS_RR_PRESSURE_WARNING_SENSOR_BATTERY_LOW_CHOICE (5u)
#define ECU_GW_347_TPMS_RR_PRESSURE_WARNING_SENSOR_FAILURE_CHOICE (6u)
#define ECU_GW_347_TPMS_RR_PRESSURE_WARNING_RESERVED_CHOICE (7u)

#define ECU_GW_347_TPMS_LF_PRESSURE_WARNING_NO_WARNING_CHOICE (0u)
#define ECU_GW_347_TPMS_LF_PRESSURE_WARNING_HIGH_PRESSURE_WARNING_CHOICE (1u)
#define ECU_GW_347_TPMS_LF_PRESSURE_WARNING_LOW_PRESSURE_WARNING_CHOICE (2u)
#define ECU_GW_347_TPMS_LF_PRESSURE_WARNING_QUIK_LEAKAGE_CHOICE (3u)
#define ECU_GW_347_TPMS_LF_PRESSURE_WARNING_LOST__SENSOR_CHOICE (4u)
#define ECU_GW_347_TPMS_LF_PRESSURE_WARNING_SENSOR_BATTERY_LOW_CHOICE (5u)
#define ECU_GW_347_TPMS_LF_PRESSURE_WARNING_SENSOR_FAILURE_CHOICE (6u)
#define ECU_GW_347_TPMS_LF_PRESSURE_WARNING_RESERVED_CHOICE (7u)

#define ECU_GW_347_TPMS_SYSTEM_FAILURE_WARNING_NO_ANY_ERROR_CHOICE (0u)
#define ECU_GW_347_TPMS_SYSTEM_FAILURE_WARNING_SYSTEM_ERROR_CHOICE (1u)

#define ECU_GW_365_IMS_DISTRACTION_STATUS___NOT__DISTRACTED_CHOICE (0u)
#define ECU_GW_365_IMS_DISTRACTION_STATUS___DISTRACTED_CHOICE (1u)
#define ECU_GW_365_IMS_DISTRACTION_STATUS_UNKNOWN_CHOICE (2u)
#define ECU_GW_365_IMS_DISTRACTION_STATUS___INVALID_CHOICE (3u)

#define ECU_GW_365_IMS_DRIVER_HEAD_DETECT_INVALID_CHOICE (0u)
#define ECU_GW_365_IMS_DRIVER_HEAD_DETECT_NOT_DETECTED_CHOICE (1u)
#define ECU_GW_365_IMS_DRIVER_HEAD_DETECT_DETECTED_CHOICE (2u)
#define ECU_GW_365_IMS_DRIVER_HEAD_DETECT_RESERVED_CHOICE (3u)

#define ECU_GW_365_IMS_DROWSINESS_STATUS___AWAKE_CHOICE (0u)
#define ECU_GW_365_IMS_DROWSINESS_STATUS___SLIGHTLY__DROWSY_CHOICE (1u)
#define ECU_GW_365_IMS_DROWSINESS_STATUS___DROWSY_CHOICE (2u)
#define ECU_GW_365_IMS_DROWSINESS_STATUS_MICROSLEEP_CHOICE (3u)
#define ECU_GW_365_IMS_DROWSINESS_STATUS___RESERVED_CHOICE (4u)
#define ECU_GW_365_IMS_DROWSINESS_STATUS___UNAVAILABLE_CHOICE (5u)
#define ECU_GW_365_IMS_DROWSINESS_STATUS_UNKNOWN_CHOICE (6u)
#define ECU_GW_365_IMS_DROWSINESS_STATUS___INVALID_CHOICE (7u)

#define ECU_GW_365_IMS_IMS_STATUS___OFF_CHOICE (0u)
#define ECU_GW_365_IMS_IMS_STATUS___STANDBY_CHOICE (1u)
#define ECU_GW_365_IMS_IMS_STATUS___ACTIVE_CHOICE (2u)
#define ECU_GW_365_IMS_IMS_STATUS___CAMERA__BLOCKED_CHOICE (3u)
#define ECU_GW_365_IMS_IMS_STATUS___FAILURE_CHOICE (4u)
#define ECU_GW_365_IMS_IMS_STATUS___RESERVED_CHOICE (5u)
#define ECU_GW_365_IMS_IMS_STATUS___INVALID_CHOICE (7u)

#define ECU_GW_365_IMS_EYE_DETECT_SATUS_0_100__CHOICE (0u)
#define ECU_GW_365_IMS_EYE_DETECT_SATUS_RESERVED_CHOICE (101u)
#define ECU_GW_365_IMS_EYE_DETECT_SATUS_INVALID____CHOICE (255u)

#define ECU_GW_365_IMS_EYE_GAZE_STATUS__75_75_CHOICE (0u)
#define ECU_GW_365_IMS_EYE_GAZE_STATUS_RESERVED_CHOICE (152u)
#define ECU_GW_365_IMS_EYE_GAZE_STATUS_INVALID_CHOICE (255u)

#define ECU_GW_365_IMS_DRIVER_EYE_DETECT_INVALID_CHOICE (0u)
#define ECU_GW_365_IMS_DRIVER_EYE_DETECT_NOT_DETECTED_CHOICE (1u)
#define ECU_GW_365_IMS_DRIVER_EYE_DETECT_DETECTED_CHOICE (2u)
#define ECU_GW_365_IMS_DRIVER_EYE_DETECT_RESERVED_CHOICE (3u)

#define ECU_GW_365_IMS_DRIVER_EYE_CLOSESTATUS__BOTH_EYES_CLOSE_CHOICE (0u)
#define ECU_GW_365_IMS_DRIVER_EYE_CLOSESTATUS_LEFT_EYE_CLOSE_CHOICE (1u)
#define ECU_GW_365_IMS_DRIVER_EYE_CLOSESTATUS__RIGHT__EYE_CLOSE_CHOICE (2u)
#define ECU_GW_365_IMS_DRIVER_EYE_CLOSESTATUS_BOTH_EYES_OPEN_CHOICE (3u)
#define ECU_GW_365_IMS_DRIVER_EYE_CLOSESTATUS___RESERVED_CHOICE (4u)
#define ECU_GW_365_IMS_DRIVER_EYE_CLOSESTATUS___INVALID_CHOICE (7u)

#define ECU_GW_365_IMS_PHONE_CALL_STS___NOT__IN__PHONE__CALL_CHOICE (0u)
#define ECU_GW_365_IMS_PHONE_CALL_STS___IN__PHONE__CALL_CHOICE (1u)

#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA_DRIVER_FORWARD_CHOICE (0u)
#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA_LEFT_OUTSIDE_MIRROR_CHOICE (1u)
#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA_RIGHT_OUTSIDE_MIRROR_CHOICE (2u)
#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA__INSIDE_MIRROR_CHOICE (3u)
#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA__FRONT_PASSENGER_FORWARD_CHOICE (4u)
#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA__HU_AREA__CHOICE (5u)
#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA_IP_AREA_CHOICE (6u)
#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA__GEAR_AREA_CHOICE (7u)
#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA__BELOW_IP_CHOICE (8u)
#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA__DRIVER_DOOR_CHOICE (9u)
#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA__FRONT_PASSENGER_CHOICE (10u)
#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA__DRIVER_DOOR_WINDOW_CHOICE (11u)
#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA_UP_FORWARD_CHOICE (12u)
#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA__FRONT_PASSENGER_DOOR_WINDOW_CHOICE (13u)
#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA__OTHER_CHOICE (14u)
#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA_INVALID_CHOICE (15u)

#define ECU_GW_365_IMS_DRIVER_EYE_CONFIDENCE_0_100__CHOICE (0u)
#define ECU_GW_365_IMS_DRIVER_EYE_CONFIDENCE_RESERVED_CHOICE (101u)
#define ECU_GW_365_IMS_DRIVER_EYE_CONFIDENCE_INVALID_CHOICE (255u)

#define ECU_GW_365_IMS_HEAD_DETECT_STS_PITCH__25_45_CHOICE (0u)
#define ECU_GW_365_IMS_HEAD_DETECT_STS_PITCH_RESERVED_CHOICE (72u)
#define ECU_GW_365_IMS_HEAD_DETECT_STS_PITCH_INVALID_CHOICE (255u)

#define ECU_GW_365_IMS_HEAD_DETECT_STS_ROLL__45_45_CHOICE (0u)
#define ECU_GW_365_IMS_HEAD_DETECT_STS_ROLL_RESERVED_CHOICE (92u)
#define ECU_GW_365_IMS_HEAD_DETECT_STS_ROLL_INVALID_CHOICE (255u)

#define ECU_GW_365_IMS_HEAD_DETECT_STS_YAW__75_75_CHOICE (0u)
#define ECU_GW_365_IMS_HEAD_DETECT_STS_YAW_RESERVED_CHOICE (152u)
#define ECU_GW_365_IMS_HEAD_DETECT_STS_YAW_INVALID_CHOICE (255u)

#define ECU_GW_365_IMS_BROW_OFFSET_VALUE__0CM_CHOICE (0u)
#define ECU_GW_365_IMS_BROW_OFFSET_VALUE_1CM_15CM_CHOICE (1u)

#define ECU_GW_365_IMS_JAW_OFFSET_VALUE__0CM_CHOICE (0u)
#define ECU_GW_365_IMS_JAW_OFFSET_VALUE_1CM_15CM_CHOICE (1u)

#define ECU_GW_365_IMS_DRIVER_ID_INVALID_CHOICE (0u)
#define ECU_GW_365_IMS_DRIVER_ID_ID__DRIVER_1_CHOICE (1u)
#define ECU_GW_365_IMS_DRIVER_ID_ID__DRIVER_2_CHOICE (2u)
#define ECU_GW_365_IMS_DRIVER_ID_ID__DRIVER_3_CHOICE (3u)
#define ECU_GW_365_IMS_DRIVER_ID_ID__DRIVER_4_CHOICE (4u)
#define ECU_GW_365_IMS_DRIVER_ID_RESERVED_CHOICE (5u)
#define ECU_GW_365_IMS_DRIVER_ID_ID__UNKNOW__________________________________CHOICE (15u)

#define ECU_GW_365_IMS_ID_UPDATE_REMIND_INVALID_CHOICE (0u)
#define ECU_GW_365_IMS_ID_UPDATE_REMIND_______0_________CHOICE (1u)
#define ECU_GW_365_IMS_ID_UPDATE_REMIND________________CHOICE (2u)
#define ECU_GW_365_IMS_ID_UPDATE_REMIND______________3_CHOICE (3u)
#define ECU_GW_365_IMS_ID_UPDATE_REMIND______________4_CHOICE (4u)
#define ECU_GW_365_IMS_ID_UPDATE_REMIND______________________5_CHOICE (5u)
#define ECU_GW_365_IMS_ID_UPDATE_REMIND______________________6_CHOICE (6u)
#define ECU_GW_365_IMS_ID_UPDATE_REMIND_RESERVED_CHOICE (7u)

#define ECU_GW_365_IMS_DROWSINESS_WARNING_INVALID_CHOICE (0u)
#define ECU_GW_365_IMS_DROWSINESS_WARNING__________________1_CHOICE (1u)
#define ECU_GW_365_IMS_DROWSINESS_WARNING__________________2_CHOICE (2u)
#define ECU_GW_365_IMS_DROWSINESS_WARNING________________CHOICE (3u)
#define ECU_GW_365_IMS_DROWSINESS_WARNING______________CHOICE (4u)
#define ECU_GW_365_IMS_DROWSINESS_WARNING_RESERVED_CHOICE (5u)

#define ECU_GW_365_IMS_DROWSINESS_SENS_FB_INVALID_CHOICE (0u)
#define ECU_GW_365_IMS_DROWSINESS_SENS_FB____1_CHOICE (1u)
#define ECU_GW_365_IMS_DROWSINESS_SENS_FB____2_CHOICE (2u)
#define ECU_GW_365_IMS_DROWSINESS_SENS_FB____3_CHOICE (3u)

#define ECU_GW_365_IMS_DROWSINESS_SET_FB_INACTIVE_CHOICE (0u)
#define ECU_GW_365_IMS_DROWSINESS_SET_FB_ON_CHOICE (1u)
#define ECU_GW_365_IMS_DROWSINESS_SET_FB_OFF_CHOICE (2u)
#define ECU_GW_365_IMS_DROWSINESS_SET_FB_RESERVED_CHOICE (3u)

#define ECU_GW_365_IMS_DISTRACTION_SET_FB_INACTIVE_CHOICE (0u)
#define ECU_GW_365_IMS_DISTRACTION_SET_FB_ON_CHOICE (1u)
#define ECU_GW_365_IMS_DISTRACTION_SET_FB_OFF_CHOICE (2u)
#define ECU_GW_365_IMS_DISTRACTION_SET_FB_RESERVED_CHOICE (3u)

#define ECU_GW_365_IMS_DISTRACTION_WARNING_INVALID_CHOICE (0u)
#define ECU_GW_365_IMS_DISTRACTION_WARNING______1_CHOICE (1u)
#define ECU_GW_365_IMS_DISTRACTION_WARNING______2_CHOICE (2u)
#define ECU_GW_365_IMS_DISTRACTION_WARNING_RESERVED_CHOICE (3u)

#define ECU_GW_365_DMS_XLOCATION_EYE_0X00_0X7_FE__2046__2046________0X7_FF_CHOICE (0u)

#define ECU_GW_365_DMS_YLOCATION_EYE_0X00_0X7_FE__2046__2046________0X7_FF_CHOICE (0u)

#define ECU_GW_365_DMS_ZLOCATION_EYE_0X00_0X7_FE__2046__2046________0X7_FF_CHOICE (0u)

#define ECU_GW_366_AC_WORK_STS_OFF_CHOICE (0u)
#define ECU_GW_366_AC_WORK_STS_DEFROST_DEFOG_CHOICE (1u)
#define ECU_GW_366_AC_WORK_STS_FAST__COOL_CHOICE (2u)
#define ECU_GW_366_AC_WORK_STS_FAST__WARM_CHOICE (3u)
#define ECU_GW_366_AC_WORK_STS_OPPORTUNISTIC__COOL_CHOICE (4u)
#define ECU_GW_366_AC_WORK_STS_OPPORTUNISTIC__WARM_CHOICE (5u)
#define ECU_GW_366_AC_WORK_STS_LARGE__HEATING_CHOICE (6u)
#define ECU_GW_366_AC_WORK_STS_RESERVED_CHOICE (7u)

#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_VD_VALID_CHOICE (0u)
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_VD_INVALID_CHOICE (1u)

#define ECU_GW_366_AC_PTC_STATUS_OFF_CHOICE (0u)
#define ECU_GW_366_AC_PTC_STATUS_1___CHOICE (1u)
#define ECU_GW_366_AC_PTC_STATUS_2___CHOICE (2u)
#define ECU_GW_366_AC_PTC_STATUS_3___CHOICE (3u)

#define ECU_GW_366_AC_ENVIRONMENTAL_TEMP_VD_VALID_CHOICE (0u)
#define ECU_GW_366_AC_ENVIRONMENTAL_TEMP_VD_INVALID_CHOICE (1u)

#define ECU_GW_366_AC_ENVIRONMENTAL_TEMP__40_87___CHOICE (0u)
#define ECU_GW_366_AC_ENVIRONMENTAL_TEMP_INVALID_CHOICE (255u)

#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_OFF_CHOICE (0u)
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_LEVEL1_CHOICE (1u)
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_LEVEL2_CHOICE (2u)
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_LEVEL3_CHOICE (3u)
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_LEVEL4_CHOICE (4u)
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_LEVEL5_CHOICE (5u)
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_LEVEL6_CHOICE (6u)
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_LEVEL7_CHOICE (7u)
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_LEVEL8_CHOICE (8u)
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_LEVEL0_____CHOICE (9u)
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_RESERVED_10_CHOICE (10u)
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_RESERVED_11_CHOICE (11u)
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_RESERVED_12_CHOICE (12u)
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_RESERVED_13_CHOICE (13u)
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_RESERVED_14_CHOICE (14u)
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_INVAILD_CHOICE (15u)

#define ECU_GW_366_AC_AC_PRE_0_40_94_CHOICE (0u)
#define ECU_GW_366_AC_AC_PRE_INVALID_CHOICE (4095u)

#define ECU_GW_366_AC_AC_REQ_OFF_CHOICE (0u)
#define ECU_GW_366_AC_AC_REQ_ON_CHOICE (1u)

#define ECU_GW_366_AC_AC_REQ_VALID___VALID_CHOICE (0u)
#define ECU_GW_366_AC_AC_REQ_VALID___INVALID_CHOICE (1u)

#define ECU_GW_387_BCM_DRIVE_MODE_FEEDBACK_NORMAL_CHOICE (0u)
#define ECU_GW_387_BCM_DRIVE_MODE_FEEDBACK_ECO_CHOICE (1u)
#define ECU_GW_387_BCM_DRIVE_MODE_FEEDBACK_SPORT_CHOICE (2u)
#define ECU_GW_387_BCM_DRIVE_MODE_FEEDBACK___RESERVED_CHOICE (3u)

#define ECU_GW_387_BCM_DRIVE_MODE_STATUS_NORMAL_CHOICE (0u)
#define ECU_GW_387_BCM_DRIVE_MODE_STATUS_ECO_CHOICE (1u)
#define ECU_GW_387_BCM_DRIVE_MODE_STATUS_SPORT___CHOICE (2u)
#define ECU_GW_387_BCM_DRIVE_MODE_STATUS_SNOW_CHOICE (3u)
#define ECU_GW_387_BCM_DRIVE_MODE_STATUS_SPORT__RESERVED__CHOICE (4u)
#define ECU_GW_387_BCM_DRIVE_MODE_STATUS_INDIVIDUAL_CHOICE (5u)
#define ECU_GW_387_BCM_DRIVE_MODE_STATUS_RESERVED_CHOICE (6u)
#define ECU_GW_387_BCM_DRIVE_MODE_STATUS_INVALID_CHOICE (15u)

#define ECU_GW_387_BCM_BLE_KEY_INDICATOR_INACTIVE_CHOICE (0u)
#define ECU_GW_387_BCM_BLE_KEY_INDICATOR________________CHOICE (1u)
#define ECU_GW_387_BCM_BLE_KEY_INDICATOR__________________CHOICE (2u)
#define ECU_GW_387_BCM_BLE_KEY_INDICATOR_RESERVED_CHOICE (3u)

#define ECU_GW_387_BCM_DRIVING_MODE_MEMORY_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_387_BCM_DRIVING_MODE_MEMORY_STATUS_YES_CHOICE (1u)
#define ECU_GW_387_BCM_DRIVING_MODE_MEMORY_STATUS_NO_CHOICE (2u)
#define ECU_GW_387_BCM_DRIVING_MODE_MEMORY_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_387_BCM_DRIVE_MODE_SET_NORMAL_CHOICE (0u)
#define ECU_GW_387_BCM_DRIVE_MODE_SET_ECO_CHOICE (1u)
#define ECU_GW_387_BCM_DRIVE_MODE_SET_SPORT_CHOICE (2u)
#define ECU_GW_387_BCM_DRIVE_MODE_SET_SNOW_CHOICE (3u)
#define ECU_GW_387_BCM_DRIVE_MODE_SET_RESERVED_CHOICE (4u)

#define ECU_GW_387_BCM_WELCOME_LIGHT_MODE_FB_INACTIVE_CHOICE (0u)
#define ECU_GW_387_BCM_WELCOME_LIGHT_MODE_FB_OFF_CHOICE (1u)
#define ECU_GW_387_BCM_WELCOME_LIGHT_MODE_FB_ON_MODE1_CHOICE (2u)
#define ECU_GW_387_BCM_WELCOME_LIGHT_MODE_FB_ON_MODE2__CHOICE (3u)
#define ECU_GW_387_BCM_WELCOME_LIGHT_MODE_FB_ON_MODE3_CHOICE (4u)
#define ECU_GW_387_BCM_WELCOME_LIGHT_MODE_FB_RESERVED_CHOICE (5u)

#define ECU_GW_387_BCM_RAINFALL_LEVEL_NO_RAIN_CHOICE (0u)
#define ECU_GW_387_BCM_RAINFALL_LEVEL_LEVEL_1_CHOICE (1u)
#define ECU_GW_387_BCM_RAINFALL_LEVEL_LEVEL_2_CHOICE (2u)
#define ECU_GW_387_BCM_RAINFALL_LEVEL_LEVEL_3_CHOICE (3u)
#define ECU_GW_387_BCM_RAINFALL_LEVEL_LEVEL_4_CHOICE (4u)
#define ECU_GW_387_BCM_RAINFALL_LEVEL_LEVEL_5__CHOICE (5u)
#define ECU_GW_387_BCM_RAINFALL_LEVEL_LEVEL_6_CHOICE (6u)
#define ECU_GW_387_BCM_RAINFALL_LEVEL_LEVEL_7_CHOICE (7u)
#define ECU_GW_387_BCM_RAINFALL_LEVEL_LEVEL_8_CHOICE (8u)
#define ECU_GW_387_BCM_RAINFALL_LEVEL_LEVEL_9_CHOICE (9u)
#define ECU_GW_387_BCM_RAINFALL_LEVEL_LEVEL_10_CHOICE (10u)
#define ECU_GW_387_BCM_RAINFALL_LEVEL_LEVEL_11_CHOICE (11u)
#define ECU_GW_387_BCM_RAINFALL_LEVEL_LEVEL_12_CHOICE (12u)
#define ECU_GW_387_BCM_RAINFALL_LEVEL_LEVEL_13_CHOICE (13u)
#define ECU_GW_387_BCM_RAINFALL_LEVEL_INIT_VALUE_CHOICE (14u)
#define ECU_GW_387_BCM_RAINFALL_LEVEL_INVALID_VALUE_CHOICE (15u)

#define ECU_GW_387_BCM_EPS_TORQUE_MODE_FEEDBACK_NORMAL_CHOICE (0u)
#define ECU_GW_387_BCM_EPS_TORQUE_MODE_FEEDBACK_LIGHT_CHOICE (1u)
#define ECU_GW_387_BCM_EPS_TORQUE_MODE_FEEDBACK_HEAVY_CHOICE (2u)
#define ECU_GW_387_BCM_EPS_TORQUE_MODE_FEEDBACK__RESERVED_CHOICE (3u)

#define ECU_GW_387_BCM_THEME_CHANGE_SET_INACTIVE_CHOICE (0u)
#define ECU_GW_387_BCM_THEME_CHANGE_SET_PRESS_CHOICE (1u)
#define ECU_GW_387_BCM_THEME_CHANGE_SET_RESERVED__CHOICE (2u)

#define ECU_GW_387_BCM_FRONT_WASH_STATUS_OFF_CHOICE (0u)
#define ECU_GW_387_BCM_FRONT_WASH_STATUS_ON_CHOICE (1u)
#define ECU_GW_387_BCM_FRONT_WASH_STATUS_NOT_USED_CHOICE (2u)
#define ECU_GW_387_BCM_FRONT_WASH_STATUS_ERROR_CHOICE (3u)

#define ECU_GW_387_BCM_FRONT_WIPER_STATUS_OFF_CHOICE (0u)
#define ECU_GW_387_BCM_FRONT_WIPER_STATUS_LOW_CHOICE (1u)
#define ECU_GW_387_BCM_FRONT_WIPER_STATUS_HIGH_CHOICE (2u)
#define ECU_GW_387_BCM_FRONT_WIPER_STATUS_ERROR_CHOICE (3u)

#define ECU_GW_387_BCM_BUZZER_WARNING_MODE__OFF_CHOICE (0u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___FOLLWO_ME_LIGHT_CHOICE (1u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___LOCK_SPEED_SET_OFF_CHOICE (2u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___LOCK_SPEED_SET_ON_CHOICE (3u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___KEY_LEARN_SUCCESS_CHOICE (4u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___DRIVER_DOOR_UNLOCK_MODE_SET_OFF_CHOICE (5u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___DRIVER_DOOR_UNLOCK_MODE_SET_ON_CHOICE (6u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___ALCOHOLINTERLOCK_LOCK_CHOICE (7u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___RESERVED_8_CHOICE (8u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___LIGHT_ON_CHOICE (16u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___ROOF_WIN_OPEN_CHOICE (17u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___KEY_IN_CAR_ALARM_CHOICE (18u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___KEY_UNDETECTED_ALARM_CHOICE (19u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___EXIT_ACTIVE_ARM_CHOICE (20u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___DOOR_OPEN_LOCK_CHOICE (21u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___KEY_LOW_BAT_CHOICE (22u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___PASSENGER_SEAT_BELT_WARNING_CHOICE (23u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___RESERVED_24_CHOICE (24u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___DRIVER_SEAT_BELT_WARNING_CHOICE (25u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___RESERVED_26_CHOICE (26u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___DOOR_OPEN_CHOICE (27u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE___POWER_MANAGEMENT_NOTICE_CHOICE (28u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE_POWER_DOWN_WARNING_CHOICE (29u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE_TRUNK_RELEASE_REQ_WARNING_CHOICE (30u)
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE_RESERVED_CHOICE (31u)

#define ECU_GW_387_BCM_LIGHT_SENSOR_DAY_CHOICE (0u)
#define ECU_GW_387_BCM_LIGHT_SENSOR_NIGHT_CHOICE (1u)

#define ECU_GW_387_BCM_STATUSRAINSENSOR_NO_ERROR_CHOICE (0u)
#define ECU_GW_387_BCM_STATUSRAINSENSOR_ERROR_CHOICE (1u)

#define ECU_GW_387_BCM_STATUSLOWBEAM_NO_ERROR_CHOICE (0u)
#define ECU_GW_387_BCM_STATUSLOWBEAM_ERROR_CHOICE (1u)

#define ECU_GW_387_BCM_SYSTEM_FAILURE_FLAG_NO__ERROR_CHOICE (0u)
#define ECU_GW_387_BCM_SYSTEM_FAILURE_FLAG_ERROR_CHOICE (1u)

#define ECU_GW_387_BCM_REAR_WIPER_STATUS_OFF_CHOICE (0u)
#define ECU_GW_387_BCM_REAR_WIPER_STATUS_ON_CHOICE (1u)

#define ECU_GW_387_BCM_SAVE_ENERGY_SET_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_387_BCM_SAVE_ENERGY_SET_STATUS_10MIN_CHOICE (1u)
#define ECU_GW_387_BCM_SAVE_ENERGY_SET_STATUS_5MIN_CHOICE (2u)
#define ECU_GW_387_BCM_SAVE_ENERGY_SET_STATUS_2MIN_CHOICE (3u)

#define ECU_GW_390_BCM_PMS_LEVEL__________CHOICE (0u)
#define ECU_GW_390_BCM_PMS_LEVEL________CHOICE (1u)
#define ECU_GW_390_BCM_PMS_LEVEL______________CHOICE (2u)
#define ECU_GW_390_BCM_PMS_LEVEL______RESERVED_CHOICE (3u)

#define ECU_GW_390_BCM_LOW_POWER_WARNING________CHOICE (0u)
#define ECU_GW_390_BCM_LOW_POWER_WARNING____________________CHOICE (1u)
#define ECU_GW_390_BCM_LOW_POWER_WARNING__________CHOICE (2u)
#define ECU_GW_390_BCM_LOW_POWER_WARNING__________________________CHOICE (3u)
#define ECU_GW_390_BCM_LOW_POWER_WARNING______RESERVED_CHOICE (4u)

#define ECU_GW_390_BCM_SOH_LIFE_PERCENT__0_100__CHOICE (0u)
#define ECU_GW_390_BCM_SOH_LIFE_PERCENT_RESERVED_CHOICE (101u)
#define ECU_GW_390_BCM_SOH_LIFE_PERCENT_INVALID_CHOICE (255u)

#define ECU_GW_390_BCM_BSN_LEVEL_LEVEL1_____________CHOICE (0u)
#define ECU_GW_390_BCM_BSN_LEVEL_LEVEL2____________CHOICE (1u)
#define ECU_GW_390_BCM_BSN_LEVEL_LEVEL3_____________CHOICE (2u)
#define ECU_GW_390_BCM_BSN_LEVEL_RESERVED_CHOICE (3u)
#define ECU_GW_390_BCM_BSN_LEVEL_INVALID_CHOICE (7u)

#define ECU_GW_396_BCM_SUNROOF_STATUS_CLOSE_CHOICE (0u)
#define ECU_GW_396_BCM_SUNROOF_STATUS_OPEN_CHOICE (1u)

#define ECU_GW_396_BCM_SUNROOF_POS_DIRECTION_HORIZONTAL_CHOICE (0u)
#define ECU_GW_396_BCM_SUNROOF_POS_DIRECTION_VERTICAL_CHOICE (1u)

#define ECU_GW_396_BCM_SUNROOF_RAIN_SET_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_396_BCM_SUNROOF_RAIN_SET_STATUS_OFF_CHOICE (1u)
#define ECU_GW_396_BCM_SUNROOF_RAIN_SET_STATUS_ON_CHOICE (2u)
#define ECU_GW_396_BCM_SUNROOF_RAIN_SET_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_396_BCM_SUNSHADE_MOVEMENT__STOPPED_CHOICE (0u)
#define ECU_GW_396_BCM_SUNSHADE_MOVEMENT__OPENING_SLIDE_CHOICE (1u)
#define ECU_GW_396_BCM_SUNSHADE_MOVEMENT__CLOSING_SLIDE__CHOICE (2u)
#define ECU_GW_396_BCM_SUNSHADE_MOVEMENT__REVERSING__AP__STALL__CHOICE (3u)
#define ECU_GW_396_BCM_SUNSHADE_MOVEMENT__MOVING_UNINITIALIZED_CHOICE (4u)
#define ECU_GW_396_BCM_SUNSHADE_MOVEMENT__RESERVED_CHOICE (5u)

#define ECU_GW_396_BCM_SUNROOF_MOVEMENT_STOPPED_CHOICE (0u)
#define ECU_GW_396_BCM_SUNROOF_MOVEMENT__OPENING_TILT_CHOICE (1u)
#define ECU_GW_396_BCM_SUNROOF_MOVEMENT__CLOSING_TILT_CHOICE (2u)
#define ECU_GW_396_BCM_SUNROOF_MOVEMENT__OPENING_SLIDE_CHOICE (3u)
#define ECU_GW_396_BCM_SUNROOF_MOVEMENT__CLOSING_SLIDE__CHOICE (4u)
#define ECU_GW_396_BCM_SUNROOF_MOVEMENT__REVERSING__AP__STALL__CHOICE (5u)
#define ECU_GW_396_BCM_SUNROOF_MOVEMENT__MOVING_UNINITIALIZED_CHOICE (6u)
#define ECU_GW_396_BCM_SUNROOF_MOVEMENT__RESERVED_CHOICE (7u)

#define ECU_GW_396_BCM_LOCK_AUTO_CLS_WIN_SET_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_396_BCM_LOCK_AUTO_CLS_WIN_SET_STATUS_ON_CHOICE (1u)
#define ECU_GW_396_BCM_LOCK_AUTO_CLS_WIN_SET_STATUS_OFF__CHOICE (2u)
#define ECU_GW_396_BCM_LOCK_AUTO_CLS_WIN_SET_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_396_BCM_SUNROOF_MOTOR__OFF_CHOICE (0u)
#define ECU_GW_396_BCM_SUNROOF_MOTOR_RUNNING_CHOICE (1u)
#define ECU_GW_396_BCM_SUNROOF_MOTOR___NOT_USED_CHOICE (2u)
#define ECU_GW_396_BCM_SUNROOF_MOTOR___ERROR__RESERVED__CHOICE (3u)

#define ECU_GW_396_BCM_REMOTE_WINDOW_CONTROL_INACTIVE_CHOICE (0u)
#define ECU_GW_396_BCM_REMOTE_WINDOW_CONTROL_CLOSE_CHOICE (1u)
#define ECU_GW_396_BCM_REMOTE_WINDOW_CONTROL_OPEN_CHOICE (2u)
#define ECU_GW_396_BCM_REMOTE_WINDOW_CONTROL_RESERVED_CHOICE (3u)

#define ECU_GW_396_BCM_WIN_OPEN_WARN_INACTIVE_CHOICE (0u)
#define ECU_GW_396_BCM_WIN_OPEN_WARN_WARNING_CHOICE (1u)

#define ECU_GW_396_BCM_WIN_DOWN_CFG_STS__________________0_CHOICE (0u)
#define ECU_GW_396_BCM_WIN_DOWN_CFG_STS__________________2_CHOICE (2u)
#define ECU_GW_396_BCM_WIN_DOWN_CFG_STS________CHOICE (3u)

#define ECU_GW_396_BCM_WIN_UP_CFG_STS______________CHOICE (0u)
#define ECU_GW_396_BCM_WIN_UP_CFG_STS__________________1_CHOICE (1u)
#define ECU_GW_396_BCM_WIN_UP_CFG_STS__________________2_CHOICE (2u)
#define ECU_GW_396_BCM_WIN_UP_CFG_STS________CHOICE (3u)

#define ECU_GW_396_BCM_REMOTE_WINDOW_UP_SET_STAUS_INVALID_CHOICE (0u)
#define ECU_GW_396_BCM_REMOTE_WINDOW_UP_SET_STAUS_OFF_CHOICE (1u)
#define ECU_GW_396_BCM_REMOTE_WINDOW_UP_SET_STAUS_ON_CHOICE (2u)
#define ECU_GW_396_BCM_REMOTE_WINDOW_UP_SET_STAUS_RESERVED_CHOICE (3u)

#define ECU_GW_396_BCM_REMOTE_WINDOW_DOWN_SET_STAUS_INACTIVE_CHOICE (0u)
#define ECU_GW_396_BCM_REMOTE_WINDOW_DOWN_SET_STAUS_OFF_CHOICE (1u)
#define ECU_GW_396_BCM_REMOTE_WINDOW_DOWN_SET_STAUS_OPEN_CHOICE (2u)
#define ECU_GW_396_BCM_REMOTE_WINDOW_DOWN_SET_STAUS_RESERVED_CHOICE (3u)

#define ECU_GW_396_BCM_AUTO_CLOSE_WINDOW_INACTIVE_CHOICE (0u)
#define ECU_GW_396_BCM_AUTO_CLOSE_WINDOW_SUCCESS__CHOICE (1u)
#define ECU_GW_396_BCM_AUTO_CLOSE_WINDOW_FAIL__CHOICE (2u)
#define ECU_GW_396_BCM_AUTO_CLOSE_WINDOW_RESERVED_CHOICE (3u)

#define ECU_GW_396_BCM_AERATION_HINT_REQ_INACTIVE_CHOICE (0u)
#define ECU_GW_396_BCM_AERATION_HINT_REQ_ON_CHOICE (1u)
#define ECU_GW_396_BCM_AERATION_HINT_REQ_OFF_CHOICE (2u)
#define ECU_GW_396_BCM_AERATION_HINT_REQ_RESERVED_CHOICE (3u)

#define ECU_GW_396_BCM_SUNROOF_AP_ACTIVE_INACTIVE_CHOICE (0u)
#define ECU_GW_396_BCM_SUNROOF_AP_ACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_396_PEPS_REMOTE_WINDOW_UP_SIGNAL_INACTIVE_CHOICE (0u)
#define ECU_GW_396_PEPS_REMOTE_WINDOW_UP_SIGNAL_ON_CHOICE (1u)

#define ECU_GW_396_PEPS_REMOTE_WINDOW_DOWN_SIGNAL_INACTIVE_CHOICE (0u)
#define ECU_GW_396_PEPS_REMOTE_WINDOW_DOWN_SIGNAL_ON_CHOICE (1u)

#define ECU_GW_396_BCM_SUNROOF_INTIALIZED_INACTIVE_CHOICE (0u)
#define ECU_GW_396_BCM_SUNROOF_INTIALIZED_ACTIVE_CHOICE (1u)

#define ECU_GW_507_HU_PARKING_MODE_SELECT_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_PARKING_MODE_SELECT_INTERIOR_PARKING_CHOICE (1u)
#define ECU_GW_507_HU_PARKING_MODE_SELECT_REMOTE_PARKING_CHOICE (2u)
#define ECU_GW_507_HU_PARKING_MODE_SELECT_PARKING_RESUME_CHOICE (3u)

#define ECU_GW_507_HU_LAS_MODE_SELECTION_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_LAS_MODE_SELECTION_LDW_CHOICE (1u)
#define ECU_GW_507_HU_LAS_MODE_SELECTION_LKA_CHOICE (2u)
#define ECU_GW_507_HU_LAS_MODE_SELECTION_LCS_CHOICE (3u)
#define ECU_GW_507_HU_LAS_MODE_SELECTION_RESERVED_CHOICE (4u)
#define ECU_GW_507_HU_LAS_MODE_SELECTION_OFF_CHOICE (7u)

#define ECU_GW_507_HU_FCTA_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_FCTA_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_FCTA_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_FCTA_ENABLE___RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_RCTA_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_RCTA_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_RCTA_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_RCTA_ENABLE___RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_RCW_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_RCW_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_RCW_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_RCW_ENABLE___RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_TSR_SWITCH_OFF_CHOICE (0u)
#define ECU_GW_507_HU_TSR_SWITCH_ON_CHOICE (1u)

#define ECU_GW_507_HU_LAS_WARNING_MODE_SELECTION_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_LAS_WARNING_MODE_SELECTION_VISUAL_CHOICE (1u)
#define ECU_GW_507_HU_LAS_WARNING_MODE_SELECTION_SOUND_CHOICE (2u)
#define ECU_GW_507_HU_LAS_WARNING_MODE_SELECTION_VIBRATION_CHOICE (3u)
#define ECU_GW_507_HU_LAS_WARNING_MODE_SELECTION_SOUND_AND_VIBRATION_CHOICE (4u)
#define ECU_GW_507_HU_LAS_WARNING_MODE_SELECTION_RESERVED_CHOICE (5u)

#define ECU_GW_507_HU_LDW_SHAKE_LEV_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_LDW_SHAKE_LEV_LOW_CHOICE (1u)
#define ECU_GW_507_HU_LDW_SHAKE_LEV_NORMAL_CHOICE (2u)
#define ECU_GW_507_HU_LDW_SHAKE_LEV_HIGH_CHOICE (3u)

#define ECU_GW_507_HU_FATIGUE_DECTION_ENABLE_INVALID_CHOICE (0u)
#define ECU_GW_507_HU_FATIGUE_DECTION_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_FATIGUE_DECTION_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_FATIGUE_DECTION_ENABLE_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_RCTB_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_RCTB_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_RCTB_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_RCTB_ENABLE___RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_SEA_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_SEA_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_SEA_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_SEA_ENABLE___RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_OVERSPEED_SOUND_WAR_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_OVERSPEED_SOUND_WAR_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_OVERSPEED_SOUND_WAR_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_OVERSPEED_SOUND_WAR_ENABLE___RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_IACC_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_IACC_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_IACC_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_IACC_ENABLE_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_LOCK_CTRL_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_LOCK_CTRL_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_LOCK_CTRL_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_LOCK_CTRL_ENABLE___RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_AUDIO_WARNING_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_AUDIO_WARNING_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_AUDIO_WARNING_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_AUDIO_WARNING_ENABLE___RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_HZP_RECOMEND_RES_DEFAULT_CHOICE (0u)
#define ECU_GW_507_HU_HZP_RECOMEND_RES_ACCEPTED_CHOICE (1u)

#define ECU_GW_507_HU_OVERSPEED_WARNING_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_OVERSPEED_WARNING_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_OVERSPEED_WARNING_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_OVERSPEED_WARNING_ENABLE_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_HZP_ON_OFF_OFF_CHOICE (0u)
#define ECU_GW_507_HU_HZP_ON_OFF_ON_CHOICE (1u)

#define ECU_GW_507_HU_PARKING_RESUME_NO__REQUEST_CHOICE (0u)
#define ECU_GW_507_HU_PARKING_RESUME_REQUEST_CHOICE (1u)

#define ECU_GW_507_HU_ULS_FKP_ACTIVATION_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_ULS_FKP_ACTIVATION_ON_CHOICE (1u)
#define ECU_GW_507_HU_ULS_FKP_ACTIVATION_OFF_CHOICE (2u)
#define ECU_GW_507_HU_ULS_FKP_ACTIVATION_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_FCTB_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_FCTB_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_FCTB_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_FCTB_ENABLE___RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_ULS_BSD_ACTIVATION_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_ULS_BSD_ACTIVATION_ON_CHOICE (1u)
#define ECU_GW_507_HU_ULS_BSD_ACTIVATION_OFF_CHOICE (2u)
#define ECU_GW_507_HU_ULS_BSD_ACTIVATION_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_PARKING_CONFIRM_NO__REQUEST_CHOICE (0u)
#define ECU_GW_507_HU_PARKING_CONFIRM_REQUEST_CHOICE (1u)

#define ECU_GW_507_HU_REMOTE_DISTANCE_SET_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_REMOTE_DISTANCE_SET_1_15_CHOICE (1u)

#define ECU_GW_507_HU_TJP_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_TJP_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_TJP_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_TJP_ENABLE___RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_SLOT_VOICE_SELECT_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_SLOT_VOICE_SELECT_NO_1_CHOICE (1u)
#define ECU_GW_507_HU_SLOT_VOICE_SELECT_NO_2_CHOICE (2u)
#define ECU_GW_507_HU_SLOT_VOICE_SELECT_NO_3_CHOICE (3u)
#define ECU_GW_507_HU_SLOT_VOICE_SELECT_NO_4_CHOICE (4u)
#define ECU_GW_507_HU_SLOT_VOICE_SELECT_NO_5_CHOICE (5u)
#define ECU_GW_507_HU_SLOT_VOICE_SELECT_NO_6_CHOICE (6u)
#define ECU_GW_507_HU_SLOT_VOICE_SELECT_NO_7_CHOICE (7u)
#define ECU_GW_507_HU_SLOT_VOICE_SELECT_NO_8_CHOICE (8u)
#define ECU_GW_507_HU_SLOT_VOICE_SELECT_NO_9_CHOICE (9u)
#define ECU_GW_507_HU_SLOT_VOICE_SELECT_NO_10_CHOICE (10u)
#define ECU_GW_507_HU_SLOT_VOICE_SELECT_RESERVED_CHOICE (11u)

#define ECU_GW_507_HU_OBSTACLE_SAFE_DISTANCE_SET_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_OBSTACLE_SAFE_DISTANCE_SET_30_CHOICE (1u)
#define ECU_GW_507_HU_OBSTACLE_SAFE_DISTANCE_SET_40_CHOICE (2u)
#define ECU_GW_507_HU_OBSTACLE_SAFE_DISTANCE_SET_50_CHOICE (3u)
#define ECU_GW_507_HU_OBSTACLE_SAFE_DISTANCE_SET_60_CHOICE (4u)
#define ECU_GW_507_HU_OBSTACLE_SAFE_DISTANCE_SET_70_CHOICE (5u)
#define ECU_GW_507_HU_OBSTACLE_SAFE_DISTANCE_SET_80_CHOICE (6u)
#define ECU_GW_507_HU_OBSTACLE_SAFE_DISTANCE_SET_RESERVED_CHOICE (7u)

#define ECU_GW_507_HU_DVR_REPLAY_COMMAND_NO__REQUEST_CHOICE (0u)
#define ECU_GW_507_HU_DVR_REPLAY_COMMAND_PLAY_CHOICE (1u)
#define ECU_GW_507_HU_DVR_REPLAY_COMMAND_PAUSE_CHOICE (2u)
#define ECU_GW_507_HU_DVR_REPLAY_COMMAND_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_RECORDINGCYCLE_SETTING_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_RECORDINGCYCLE_SETTING_1MIN_CHOICE (1u)
#define ECU_GW_507_HU_RECORDINGCYCLE_SETTING_3MIN_CHOICE (2u)
#define ECU_GW_507_HU_RECORDINGCYCLE_SETTING_5MIN_CHOICE (3u)

#define ECU_GW_507_HU_DVR_FORMAT_REQ_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_DVR_FORMAT_REQ___FORMAT_CANCEL_CHOICE (1u)
#define ECU_GW_507_HU_DVR_FORMAT_REQ_FORMAT_CHOICE (2u)
#define ECU_GW_507_HU_DVR_FORMAT_REQ_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_TOP_LOOK_DOWN_SWITCH_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_TOP_LOOK_DOWN_SWITCH_OFF_CHOICE (1u)
#define ECU_GW_507_HU_TOP_LOOK_DOWN_SWITCH_ON_CHOICE (2u)
#define ECU_GW_507_HU_TOP_LOOK_DOWN_SWITCH_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_DVR_VEDIO_SEEK_NO__REQUEST_CHOICE (0u)
#define ECU_GW_507_HU_DVR_VEDIO_SEEK_PREV_CHOICE (1u)
#define ECU_GW_507_HU_DVR_VEDIO_SEEK_NEXT_CHOICE (2u)
#define ECU_GW_507_HU_DVR_VEDIO_SEEK_EXIT_CHOICE (3u)

#define ECU_GW_507_HU_HMA_ENABLE_OFF_CHOICE (0u)
#define ECU_GW_507_HU_HMA_ENABLE_ON_CHOICE (1u)
#define ECU_GW_507_HU_HMA_ENABLE_RESERVED_CHOICE (2u)
#define ECU_GW_507_HU_HMA_ENABLE_INVALID_CHOICE (3u)

#define ECU_GW_507_HU_AVM_CALIBRATION_CONFIRM_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_AVM_CALIBRATION_CONFIRM_YES_CHOICE (1u)
#define ECU_GW_507_HU_AVM_CALIBRATION_CONFIRM_NO_CHOICE (2u)
#define ECU_GW_507_HU_AVM_CALIBRATION_CONFIRM_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_DVR_PRINT_SCREEN_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_DVR_PRINT_SCREEN_PRINT__SCREEN_CHOICE (1u)
#define ECU_GW_507_HU_DVR_PRINT_SCREEN_RESERVED_2_CHOICE (2u)
#define ECU_GW_507_HU_DVR_PRINT_SCREEN_RESERVED_3_CHOICE (3u)

#define ECU_GW_507_HU_DVR_REPLAY_SPEED_NO__REQUEST_CHOICE (0u)
#define ECU_GW_507_HU_DVR_REPLAY_SPEED_FORWARD__PLAY_CHOICE (1u)
#define ECU_GW_507_HU_DVR_REPLAY_SPEED_REWIND__PLAY_CHOICE (2u)
#define ECU_GW_507_HU_DVR_REPLAY_SPEED_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_DVR_ENABLE_SET_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_DVR_ENABLE_SET_OFF_CHOICE (1u)
#define ECU_GW_507_HU_DVR_ENABLE_SET_ON_CHOICE (2u)
#define ECU_GW_507_HU_DVR_ENABLE_SET_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_DVR_TAPE_SET_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_DVR_TAPE_SET_OFF_CHOICE (1u)
#define ECU_GW_507_HU_DVR_TAPE_SET_ON_CHOICE (2u)
#define ECU_GW_507_HU_DVR_TAPE_SET_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_LANGUAGE_SET_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_LANGUAGE_SET_CHINESE_CHOICE (1u)
#define ECU_GW_507_HU_LANGUAGE_SET_ENGLISH_CHOICE (2u)
#define ECU_GW_507_HU_LANGUAGE_SET_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_TURN_LIGHT_AVM_SWITCH_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_TURN_LIGHT_AVM_SWITCH_OFF_CHOICE (1u)
#define ECU_GW_507_HU_TURN_LIGHT_AVM_SWITCH_ON_CHOICE (2u)
#define ECU_GW_507_HU_TURN_LIGHT_AVM_SWITCH_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_RADAR_AVM_SWITCH_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_RADAR_AVM_SWITCH_OFF_CHOICE (1u)
#define ECU_GW_507_HU_RADAR_AVM_SWITCH_ON_CHOICE (2u)
#define ECU_GW_507_HU_RADAR_AVM_SWITCH_RESERVED_CHOICE (4u)

#define ECU_GW_507_HU_DVR_REPLAY_MODE_NO__REQUEST_CHOICE (0u)
#define ECU_GW_507_HU_DVR_REPLAY_MODE_ENTER__CYCLE__MODE__BROWSE_CHOICE (1u)
#define ECU_GW_507_HU_DVR_REPLAY_MODE_ENTER__EMERGENCY__MODE__BROWSE_CHOICE (2u)
#define ECU_GW_507_HU_DVR_REPLAY_MODE_ENTER__PHOTO__MODE__BROWSE_CHOICE (3u)

#define ECU_GW_507_HU_RESOLUTION_SET_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_RESOLUTION_SET_1080_P_CHOICE (1u)
#define ECU_GW_507_HU_RESOLUTION_SET_720_P_CHOICE (2u)
#define ECU_GW_507_HU_RESOLUTION_SET_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_DVR_DISTORT_CORRECT_SWITCH_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_DVR_DISTORT_CORRECT_SWITCH_OFF_CHOICE (1u)
#define ECU_GW_507_HU_DVR_DISTORT_CORRECT_SWITCH_ON_CHOICE (2u)
#define ECU_GW_507_HU_DVR_DISTORT_CORRECT_SWITCH_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_DVR_VIDEO_PLAY_USER_TIME_0_510_CHOICE (0u)
#define ECU_GW_507_HU_DVR_VIDEO_PLAY_USER_TIME_INACTIVE_CHOICE (511u)

#define ECU_GW_507_HU_AVM_CALIBRATION_SWITCH_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_AVM_CALIBRATION_SWITCH_CALIBRATE_CHOICE (1u)
#define ECU_GW_507_HU_AVM_CALIBRATION_SWITCH_EDIT__CALIBRATE_CHOICE (2u)
#define ECU_GW_507_HU_AVM_CALIBRATION_SWITCH_RESET_CHOICE (3u)

#define ECU_GW_507_HU_MOD_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_MOD_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_MOD_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_MOD_ENABLE_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_DVR_EMERGENCY_RECORD_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_DVR_EMERGENCY_RECORD_RECORD_CHOICE (1u)
#define ECU_GW_507_HU_DVR_EMERGENCY_RECORD_RESERVED_CHOICE (2u)
#define ECU_GW_507_HU_DVR_EMERGENCY_RECORD_INVALID_CHOICE (3u)

#define ECU_GW_507_HU_RAMP_AVM_SWITCH_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_RAMP_AVM_SWITCH_OFF_CHOICE (1u)
#define ECU_GW_507_HU_RAMP_AVM_SWITCH_ON_CHOICE (2u)
#define ECU_GW_507_HU_RAMP_AVM_SWITCH_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_DVR_BROWSE_COMMAND_NO__REQ_CHOICE (0u)
#define ECU_GW_507_HU_DVR_BROWSE_COMMAND_UP_CHOICE (1u)
#define ECU_GW_507_HU_DVR_BROWSE_COMMAND_DOWN_CHOICE (2u)
#define ECU_GW_507_HU_DVR_BROWSE_COMMAND_LEFT_CHOICE (3u)
#define ECU_GW_507_HU_DVR_BROWSE_COMMAND_RIGHT_CHOICE (4u)
#define ECU_GW_507_HU_DVR_BROWSE_COMMAND_DELETE__FILES_CHOICE (5u)
#define ECU_GW_507_HU_DVR_BROWSE_COMMAND_NORMAL_TO_EMERGENCY_CHOICE (6u)
#define ECU_GW_507_HU_DVR_BROWSE_COMMAND_EDIT__ENTER_CHOICE (7u)
#define ECU_GW_507_HU_DVR_BROWSE_COMMAND_EDIT__CANCEL_CHOICE (8u)
#define ECU_GW_507_HU_DVR_BROWSE_COMMAND_RESERVED_CHOICE (9u)

#define ECU_GW_507_HU_SHOOT_CONTROL_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_SHOOT_CONTROL_SHOOT_REQ_CHOICE (1u)
#define ECU_GW_507_HU_SHOOT_CONTROL_RESERVED_2_CHOICE (2u)
#define ECU_GW_507_HU_SHOOT_CONTROL_RESERVED_3_CHOICE (3u)

#define ECU_GW_507_HU_TRANSPARENT_CAR_SWITCH_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_TRANSPARENT_CAR_SWITCH_OFF_CHOICE (1u)
#define ECU_GW_507_HU_TRANSPARENT_CAR_SWITCH_ON_CHOICE (2u)
#define ECU_GW_507_HU_TRANSPARENT_CAR_SWITCH_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_CRUISE_CONTROL_SET_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_CRUISE_CONTROL_SET_ACC_CHOICE (1u)
#define ECU_GW_507_HU_CRUISE_CONTROL_SET_CC_CHOICE (2u)
#define ECU_GW_507_HU_CRUISE_CONTROL_SET_IACC_________CHOICE (3u)
#define ECU_GW_507_HU_CRUISE_CONTROL_SET_HWA_________CHOICE (4u)
#define ECU_GW_507_HU_CRUISE_CONTROL_SET_RESERVED_CHOICE (5u)

#define ECU_GW_507_HU_AUTO_BRAKE_ENABLE_OFF_CHOICE (0u)
#define ECU_GW_507_HU_AUTO_BRAKE_ENABLE_ON_CHOICE (1u)
#define ECU_GW_507_HU_AUTO_BRAKE_ENABLE_RESERVED_CHOICE (2u)
#define ECU_GW_507_HU_AUTO_BRAKE_ENABLE_INVALID_CHOICE (3u)

#define ECU_GW_507_HU_PARK_VOICE_INT_SET_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_PARK_VOICE_INT_SET_STATUS___ON_CHOICE (1u)
#define ECU_GW_507_HU_PARK_VOICE_INT_SET_STATUS___OFF_CHOICE (2u)
#define ECU_GW_507_HU_PARK_VOICE_INT_SET_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_ACC_OBJ_ENABLE_NO_VOICE_CHOICE (0u)
#define ECU_GW_507_HU_ACC_OBJ_ENABLE___RESERVED_CHOICE (1u)
#define ECU_GW_507_HU_ACC_OBJ_ENABLE__BOTH_VOICE_CHOICE (3u)

#define ECU_GW_507_HU_VC_CRUISE_SET_DISTANCE_NO__REQUEST_CHOICE (0u)
#define ECU_GW_507_HU_VC_CRUISE_SET_DISTANCE_LEVEL_1_CHOICE (1u)
#define ECU_GW_507_HU_VC_CRUISE_SET_DISTANCE_LEVEL_2_CHOICE (2u)
#define ECU_GW_507_HU_VC_CRUISE_SET_DISTANCE_LEVEL_3_CHOICE (3u)
#define ECU_GW_507_HU_VC_CRUISE_SET_DISTANCE_LEVEL_4_CHOICE (4u)
#define ECU_GW_507_HU_VC_CRUISE_SET_DISTANCE_LEVEL_5_CHOICE (5u)
#define ECU_GW_507_HU_VC_CRUISE_SET_DISTANCE_RESERVED_CHOICE (6u)
#define ECU_GW_507_HU_VC_CRUISE_SET_DISTANCE_INVALID_CHOICE (7u)

#define ECU_GW_507_HU_VC_CRUISE_CONTROL_NO__REQUEST_CHOICE (0u)
#define ECU_GW_507_HU_VC_CRUISE_CONTROL_ACC__ACTIVATE_CHOICE (1u)
#define ECU_GW_507_HU_VC_CRUISE_CONTROL_ACC__RESUME_CHOICE (2u)
#define ECU_GW_507_HU_VC_CRUISE_CONTROL_IACC__ACTIVATE_CHOICE (3u)
#define ECU_GW_507_HU_VC_CRUISE_CONTROL_IACC__RESUME_CHOICE (4u)
#define ECU_GW_507_HU_VC_CRUISE_CONTROL_CANCEL_CHOICE (5u)
#define ECU_GW_507_HU_VC_CRUISE_CONTROL_RESERVED_CHOICE (6u)
#define ECU_GW_507_HU_VC_CRUISE_CONTROL_INVALID_CHOICE (7u)

#define ECU_GW_507_HU_VC_CRUISE_SET_SPEED_NO__REQUEST_CHOICE (0u)
#define ECU_GW_507_HU_VC_CRUISE_SET_SPEED_1_250_CHOICE (1u)
#define ECU_GW_507_HU_VC_CRUISE_SET_SPEED_RESERVED_CHOICE (251u)
#define ECU_GW_507_HU_VC_CRUISE_SET_SPEED_INVALID_CHOICE (255u)

#define ECU_GW_507_HU_TUTORIALMODEL_INVALID_CHOICE (0u)
#define ECU_GW_507_HU_TUTORIALMODEL_OK_CHOICE (1u)
#define ECU_GW_507_HU_TUTORIALMODEL_CANCEL_CHOICE (2u)
#define ECU_GW_507_HU_TUTORIALMODEL_TEST_CHOICE (3u)

#define ECU_GW_507_HU_FRONT_RADAR_ACTIVE_INVALID_CHOICE (0u)
#define ECU_GW_507_HU_FRONT_RADAR_ACTIVE_ACTIVATE_CHOICE (1u)
#define ECU_GW_507_HU_FRONT_RADAR_ACTIVE_DEACTIVATE_CHOICE (2u)
#define ECU_GW_507_HU_FRONT_RADAR_ACTIVE_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_APA_ACTIVE3_INVALID_CHOICE (0u)
#define ECU_GW_507_HU_APA_ACTIVE3_ACTIVATE_CHOICE (1u)

#define ECU_GW_507_HU_APA_ACTIVE2_INVALID_CHOICE (0u)
#define ECU_GW_507_HU_APA_ACTIVE2_ACTIVATE_CHOICE (1u)
#define ECU_GW_507_HU_APA_ACTIVE2_DEACTIVATE_CHOICE (2u)
#define ECU_GW_507_HU_APA_ACTIVE2_RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_NDA_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_NDA_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_NDA_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_NDA_ENABLE___RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_FCW_SETTING_EARLY_CHOICE (0u)
#define ECU_GW_507_HU_FCW_SETTING_NORMAL_CHOICE (1u)
#define ECU_GW_507_HU_FCW_SETTING_LATE_CHOICE (2u)
#define ECU_GW_507_HU_FCW_SETTING_OFF_CHOICE (3u)
#define ECU_GW_507_HU_FCW_SETTING_RESERVED_CHOICE (4u)
#define ECU_GW_507_HU_FCW_SETTING_INVALID_CHOICE (7u)

#define ECU_GW_507_HU_BSDLCA_SETTING_EARLY_CHOICE (0u)
#define ECU_GW_507_HU_BSDLCA_SETTING_NORMAL_CHOICE (1u)
#define ECU_GW_507_HU_BSDLCA_SETTING_LATE_CHOICE (2u)
#define ECU_GW_507_HU_BSDLCA_SETTING_OFF_CHOICE (3u)
#define ECU_GW_507_HU_BSDLCA_SETTING_RESERVED_CHOICE (4u)
#define ECU_GW_507_HU_BSDLCA_SETTING_INVALID_CHOICE (7u)

#define ECU_GW_507_HU_FULL_SPEED_PANORAMIC_SELECT_NOT__ACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_FULL_SPEED_PANORAMIC_SELECT_OPEN_CHOICE (1u)
#define ECU_GW_507_HU_FULL_SPEED_PANORAMIC_SELECT_CLOSE_CHOICE (2u)
#define ECU_GW_507_HU_FULL_SPEED_PANORAMIC_SELECT_INVALID_CHOICE (3u)

#define ECU_GW_507_HU_DOOR_OPEN_WARNING_SELECT_NOT__ACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_DOOR_OPEN_WARNING_SELECT_OPEN_CHOICE (1u)
#define ECU_GW_507_HU_DOOR_OPEN_WARNING_SELECT_CLOSE_CHOICE (2u)
#define ECU_GW_507_HU_DOOR_OPEN_WARNING_SELECT_INVALID_CHOICE (3u)

#define ECU_GW_507_HU_NDA_AUDIO_WAR_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_NDA_AUDIO_WAR_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_NDA_AUDIO_WAR_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_NDA_AUDIO_WAR_ENABLE___RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_NDA_NAV_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_NDA_NAV_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_507_HU_NDA_NAV_ENABLE_ON_CHOICE (2u)
#define ECU_GW_507_HU_NDA_NAV_ENABLE___RESERVED_CHOICE (3u)

#define ECU_GW_507_HU_NDA_SET_SPD_MODE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_NDA_SET_SPD_MODE_MANUAL__NORMAL_CHOICE (1u)
#define ECU_GW_507_HU_NDA_SET_SPD_MODE_AUTO__SPORT_CHOICE (2u)
#define ECU_GW_507_HU_NDA_SET_SPD_MODE_AUTO__ECO_CHOICE (3u)

#define ECU_GW_507_HU_OVERSPEED_WARNING_OFFSET__10_20KM_H_CHOICE (0u)
#define ECU_GW_507_HU_OVERSPEED_WARNING_OFFSET_RESERVED_CHOICE (31u)
#define ECU_GW_507_HU_OVERSPEED_WARNING_OFFSET_INVALID__CHOICE (47u)

#define ECU_GW_507_HU_LANE_CHANGE_STYLE_INACTIVE_CHOICE (0u)
#define ECU_GW_507_HU_LANE_CHANGE_STYLE_SOFT_CHOICE (1u)
#define ECU_GW_507_HU_LANE_CHANGE_STYLE_COMFORTABLE_CHOICE (2u)
#define ECU_GW_507_HU_LANE_CHANGE_STYLE_RADICAL_CHOICE (3u)
#define ECU_GW_507_HU_LANE_CHANGE_STYLE_RESERVE_CHOICE (4u)

#define ECU_GW_516_HU_CURRENT_LOCATION_VALID_VALID_CHOICE (0u)
#define ECU_GW_516_HU_CURRENT_LOCATION_VALID_NOT__VALID_CHOICE (1u)

#define ECU_GW_516_HU_CURRENT_LOCATION_LONGITUDE__CHOICE (268435455u)

#define ECU_GW_516_HU_CURRENT_LOCATION_LATITUDE__CHOICE (134217727u)

#define ECU_GW_516_HU_LOCAL_TIME_VALID_VALID_CHOICE (0u)
#define ECU_GW_516_HU_LOCAL_TIME_VALID_NOT__VALID_CHOICE (1u)

#define ECU_GW_516_HU_AIR_HUMIDITY_0_100_CHOICE (0u)
#define ECU_GW_516_HU_AIR_HUMIDITY_RESERVED_CHOICE (101u)
#define ECU_GW_516_HU_AIR_HUMIDITY_INVALID_CHOICE (127u)

#define ECU_GW_516_HU_AIR_HUMIDITY_VALID_VALID_CHOICE (0u)
#define ECU_GW_516_HU_AIR_HUMIDITY_VALID_INVALID_CHOICE (1u)

#define ECU_GW_516_HU_LOCAL_TIME_SYSTEM_24H_CHOICE (0u)
#define ECU_GW_516_HU_LOCAL_TIME_SYSTEM_12H_CHOICE (1u)
#define ECU_GW_516_HU_LOCAL_TIME_SYSTEM_RESERVED_CHOICE (2u)
#define ECU_GW_516_HU_LOCAL_TIME_SYSTEM_INVALID_CHOICE (3u)

#define ECU_GW_516_HU_MAINTAIN_REMIND_REQ________CHOICE (0u)
#define ECU_GW_516_HU_MAINTAIN_REMIND_REQ______________CHOICE (1u)
#define ECU_GW_516_HU_MAINTAIN_REMIND_REQ__________________CHOICE (2u)
#define ECU_GW_516_HU_MAINTAIN_REMIND_REQ_INVALID_CHOICE (3u)

#define ECU_GW_516_HU_LEAVE_MAINTAIN_DAY_0_3100___CHOICE (0u)
#define ECU_GW_516_HU_LEAVE_MAINTAIN_DAY_RESERVED_CHOICE (3101u)
#define ECU_GW_516_HU_LEAVE_MAINTAIN_DAY_INVALID_CHOICE (4095u)

#define ECU_GW_516_HU_LEAVE_MAINTAIN_MILEAGE_0_100000_CHOICE (0u)
#define ECU_GW_516_HU_LEAVE_MAINTAIN_MILEAGE_RESERVED_CHOICE (100001u)
#define ECU_GW_516_HU_LEAVE_MAINTAIN_MILEAGE_INVALID_CHOICE (1048575u)

#define ECU_GW_516_HU_CURRENT_LOCATIONSTD_0_100M_CHOICE (0u)
#define ECU_GW_516_HU_CURRENT_LOCATIONSTD_RESERVED_CHOICE (10001u)

#define ECU_GW_530_IP_ENGINE_OFF_TIME_0_65533S_CHOICE (0u)
#define ECU_GW_530_IP_ENGINE_OFF_TIME_65534_OR__65534_CHOICE (65534u)
#define ECU_GW_530_IP_ENGINE_OFF_TIME_INVALID_CHOICE (65535u)

#define ECU_GW_530_IP_FUEL_LEVEL__FUEIL__E_CHOICE (0u)
#define ECU_GW_530_IP_FUEL_LEVEL__E___FUEIL___1_8_CHOICE (1u)
#define ECU_GW_530_IP_FUEL_LEVEL__1_8__FUEIL___1_4_CHOICE (2u)
#define ECU_GW_530_IP_FUEL_LEVEL__1_4__FUEIL___3_8_CHOICE (3u)
#define ECU_GW_530_IP_FUEL_LEVEL_3_8__FUEIL___1_2_CHOICE (4u)
#define ECU_GW_530_IP_FUEL_LEVEL___1_2__FUEIL___5_8_CHOICE (5u)
#define ECU_GW_530_IP_FUEL_LEVEL__5_8__FUEIL___3_4_CHOICE (6u)
#define ECU_GW_530_IP_FUEL_LEVEL__3_4__FUEIL___7_8_CHOICE (7u)
#define ECU_GW_530_IP_FUEL_LEVEL__7_8__FUEIL___F_CHOICE (8u)

#define ECU_GW_187_ESP_ABS_ACTIVE_STATUS_NOT_ACTIVE_CHOICE (0u)
#define ECU_GW_187_ESP_ABS_ACTIVE_STATUS_ACTIVE_CHOICE (1u)

#define ECU_GW_187_ESP_GEAR_HOLD_REQUEST_NOT_REQUEST_CHOICE (0u)
#define ECU_GW_187_ESP_GEAR_HOLD_REQUEST_REQUEST_CHOICE (1u)

#define ECU_GW_187_ESP_GEAR_HOLD_REQUEST_VALID_VALID_CHOICE (0u)
#define ECU_GW_187_ESP_GEAR_HOLD_REQUEST_VALID_NOT_VALID_CHOICE (1u)

#define ECU_GW_187_ESP_TCS_FAIL_STATUS_NOERROR_CHOICE (0u)
#define ECU_GW_187_ESP_TCS_FAIL_STATUS_ERROR_CHOICE (1u)

#define ECU_GW_187_ESP_ABS_FAIL_STATUS_NOERROR_CHOICE (0u)
#define ECU_GW_187_ESP_ABS_FAIL_STATUS_ERROR_CHOICE (1u)

#define ECU_GW_187_ESP_EBD_FAIL_STATUS_NOERROR_CHOICE (0u)
#define ECU_GW_187_ESP_EBD_FAIL_STATUS_ERROR_CHOICE (1u)

#define ECU_GW_187_ESP_ESP_FUNCTION_STATUS_OFF_CHOICE (0u)
#define ECU_GW_187_ESP_ESP_FUNCTION_STATUS_ON_CHOICE (1u)

#define ECU_GW_187_ESP_ESP_ACTIVE_STATUS_NOT_ACTIVE_CHOICE (0u)
#define ECU_GW_187_ESP_ESP_ACTIVE_STATUS_ACTIVE_CHOICE (1u)

#define ECU_GW_187_IBCU_BRAKE_FLUID_WARNING_NORMAL_CHOICE (0u)
#define ECU_GW_187_IBCU_BRAKE_FLUID_WARNING_LOW_CHOICE (1u)
#define ECU_GW_187_IBCU_BRAKE_FLUID_WARNING_EMPTY__RESERVED_CHOICE (2u)
#define ECU_GW_187_IBCU_BRAKE_FLUID_WARNING_INVALID_CHOICE (3u)

#define ECU_GW_187_EP_BI_CLEAR_DIAGNOSTIC_INFO_NORMAL_CHOICE (0u)
#define ECU_GW_187_EP_BI_CLEAR_DIAGNOSTIC_INFO_NOT_USED_CHOICE (1u)
#define ECU_GW_187_EP_BI_CLEAR_DIAGNOSTIC_INFO_EP_BI_REQUEST_EMS_TO_CLEAR__DIAGNOSTIC_INFO_CHOICE (2u)
#define ECU_GW_187_EP_BI_CLEAR_DIAGNOSTIC_INFO_EP_BI_HAS_CLEARED__DIAG_INFO_PER_EMS_REQUEST_CHOICE (3u)

#define ECU_GW_187_ESP_ENG_TORQ_DEC_ACTIVE_NOT_ACTIVE_CHOICE (0u)
#define ECU_GW_187_ESP_ENG_TORQ_DEC_ACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_187_ESP_ENG_TORQ_INC_FRONT_ACTIVE_NOT_ACTIVE_CHOICE (0u)
#define ECU_GW_187_ESP_ENG_TORQ_INC_FRONT_ACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_187_ESP_VEHICLE_SPEED_VALID_VALID_CHOICE (0u)
#define ECU_GW_187_ESP_VEHICLE_SPEED_VALID_NOT_VALID_CHOICE (1u)

#define ECU_GW_187_ESP_VEHICLE_SPEED_0_360KM_H_CHOICE (0u)
#define ECU_GW_187_ESP_VEHICLE_SPEED_RESERVED_CHOICE (6401u)
#define ECU_GW_187_ESP_VEHICLE_SPEED_INVALID_APA2_0_____CHOICE (8191u)

#define ECU_GW_187_EP_BI_MIL_REQ_NOT__REQUEST_CHOICE (0u)
#define ECU_GW_187_EP_BI_MIL_REQ_REQUEST_CHOICE (1u)

#define ECU_GW_187_ESP_ADBF_ACTIVE_NOT_ACTIVE_CHOICE (0u)
#define ECU_GW_187_ESP_ADBF_ACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_194_EMS_ENG_SPD_ERR_NO_ERROR_CHOICE (0u)
#define ECU_GW_194_EMS_ENG_SPD_ERR_ERROR_CHOICE (1u)

#define ECU_GW_194_EMS_IDLE_CTRL_STS_FALSE_CHOICE (0u)
#define ECU_GW_194_EMS_IDLE_CTRL_STS_TRUE_CHOICE (1u)

#define ECU_GW_194_EMS_ENG_RUN_REQ_NO_REQUEST_CHOICE (0u)
#define ECU_GW_194_EMS_ENG_RUN_REQ_1ST_PRIORITY_CHOICE (1u)
#define ECU_GW_194_EMS_ENG_RUN_REQ_2ND_PRIORITY_CHOICE (2u)
#define ECU_GW_194_EMS_ENG_RUN_REQ_3RD_PRIORITY_CHOICE (3u)

#define ECU_GW_194_EMS_ENG_FU_PUMP_STS_NOT_WORK_CHOICE (0u)
#define ECU_GW_194_EMS_ENG_FU_PUMP_STS_WORK_CHOICE (1u)
#define ECU_GW_194_EMS_ENG_FU_PUMP_STS_ERROR_CHOICE (2u)
#define ECU_GW_194_EMS_ENG_FU_PUMP_STS_NOT_USED_CHOICE (3u)

#define ECU_GW_194_EMS_ENG_STOP_INHB_NO_INHIBIT_CHOICE (0u)
#define ECU_GW_194_EMS_ENG_STOP_INHB_1ST_PRIORITY_CHOICE (1u)
#define ECU_GW_194_EMS_ENG_STOP_INHB_2ND_PRIORITY_CHOICE (2u)
#define ECU_GW_194_EMS_ENG_STOP_INHB_3RD_PRIORITY_CHOICE (3u)

#define ECU_GW_194_EMS_ENG_STRT_SUCCESS_NOT_SUCCESS_CHOICE (0u)
#define ECU_GW_194_EMS_ENG_STRT_SUCCESS_SUCCESS_CHOICE (1u)

#define ECU_GW_194_EMS_ENG_FU_CUT_OFF_FALSE_CHOICE (0u)
#define ECU_GW_194_EMS_ENG_FU_CUT_OFF_TRUE_CHOICE (1u)

#define ECU_GW_194_EMS_ENG_TQ_FLYWH_FAILR_NO_ERROR_CHOICE (0u)
#define ECU_GW_194_EMS_ENG_TQ_FLYWH_FAILR_ERROR_CHOICE (1u)

#define ECU_GW_194_EMS_ENG_STS_STOP_CHOICE (0u)
#define ECU_GW_194_EMS_ENG_STS_CRANK_CHOICE (1u)
#define ECU_GW_194_EMS_ENG_STS_RUNNING_CHOICE (2u)
#define ECU_GW_194_EMS_ENG_STS_RESERVED_CHOICE (3u)

#define ECU_GW_194_EMS_IGNKL15_POSN_NO_CHOICE (0u)
#define ECU_GW_194_EMS_IGNKL15_POSN_YES_CHOICE (1u)

#define ECU_GW_17_D_PCU_VEH_STS_STANDSTILL_CHOICE (0u)
#define ECU_GW_17_D_PCU_VEH_STS_EV__DRIVE_CHOICE (1u)
#define ECU_GW_17_D_PCU_VEH_STS_SERIAL__DRIVE_CHOICE (2u)
#define ECU_GW_17_D_PCU_VEH_STS_PARALLEL__DRIVE_CHOICE (3u)
#define ECU_GW_17_D_PCU_VEH_STS_REGENERATION_CHOICE (4u)
#define ECU_GW_17_D_PCU_VEH_STS___PARALLEL__CHARGE_CHOICE (5u)
#define ECU_GW_17_D_PCU_VEH_STS_IDLE__CHARGE_CHOICE (6u)
#define ECU_GW_17_D_PCU_VEH_STS_IDLE_CHOICE (7u)

#define ECU_GW_17_D_PCU_BMS_OPER_MOD_REQ_INITIALIZING_CHOICE (0u)
#define ECU_GW_17_D_PCU_BMS_OPER_MOD_REQ_WAKEUP_CHOICE (1u)
#define ECU_GW_17_D_PCU_BMS_OPER_MOD_REQ_PRE_CHARGE_CHOICE (2u)
#define ECU_GW_17_D_PCU_BMS_OPER_MOD_REQ_HV_ACTIVE_CHOICE (3u)
#define ECU_GW_17_D_PCU_BMS_OPER_MOD_REQ_POWERDOWN_CHOICE (4u)
#define ECU_GW_17_D_PCU_BMS_OPER_MOD_REQ___FAILURE_CHOICE (5u)
#define ECU_GW_17_D_PCU_BMS_OPER_MOD_REQ_SLEEP_CHOICE (6u)

#define ECU_GW_17_D_PCU_CHRG_ALLWD_NOTALLOW_CHOICE (0u)
#define ECU_GW_17_D_PCU_CHRG_ALLWD_ALLOW_CHOICE (1u)

#define ECU_GW_17_D_PCU_BATT_INTR_HEAT_ALLWD_NOTALLOW_CHOICE (0u)
#define ECU_GW_17_D_PCU_BATT_INTR_HEAT_ALLWD_ALLOW_CHOICE (1u)

#define ECU_GW_17_D_PCU_CHRG_UNLCK_I_LIM_REQ_NOT__LIMIT_CHOICE (0u)
#define ECU_GW_17_D_PCU_CHRG_UNLCK_I_LIM_REQ_LIMIT_CHOICE (1u)

#define ECU_GW_17_D_PCU_CHM_ASIGNAL_STS_INVALID_CHOICE (0u)
#define ECU_GW_17_D_PCU_CHM_ASIGNAL_STS_VALID_CHOICE (1u)

#define ECU_GW_17_D_PCU_CHRG_I_REQ_LIM_FAC_100__CHOICE (0u)
#define ECU_GW_17_D_PCU_CHRG_I_REQ_LIM_FAC_70__CHOICE (1u)
#define ECU_GW_17_D_PCU_CHRG_I_REQ_LIM_FAC_30__CHOICE (2u)
#define ECU_GW_17_D_PCU_CHRG_I_REQ_LIM_FAC_0__CHOICE (3u)

#define ECU_GW_17_D_PCU_CHRG_SUSP_REQ_UN_SUSPEND_CHOICE (0u)
#define ECU_GW_17_D_PCU_CHRG_SUSP_REQ_SUSPEND_CHOICE (1u)

#define ECU_GW_17_D_PCU_VEH_SPD_VLD_VALID_CHOICE (0u)
#define ECU_GW_17_D_PCU_VEH_SPD_VLD_NOT_VALID_CHOICE (1u)

#define ECU_GW_17_D_PCU_REAL_ACC_PEDL_VLD_VALID_CHOICE (0u)
#define ECU_GW_17_D_PCU_REAL_ACC_PEDL_VLD_INVALID_CHOICE (1u)

#define ECU_GW_17_D_PCU_K3_CLU_STS_OPEN_CHOICE (0u)
#define ECU_GW_17_D_PCU_K3_CLU_STS_NOT_OPEN_CHOICE (1u)

#define ECU_GW_17_D_PCU_FLYWH_TQ_TRANS_LOAD_ACT_INVLD_VALID_CHOICE (0u)
#define ECU_GW_17_D_PCU_FLYWH_TQ_TRANS_LOAD_ACT_INVLD_INVALID_CHOICE (1u)

#define ECU_GW_17_D_PCU_ENG_STRT_MOD_NO_START_CHOICE (0u)
#define ECU_GW_17_D_PCU_ENG_STRT_MOD_12_V_MOT_START_CHOICE (1u)
#define ECU_GW_17_D_PCU_ENG_STRT_MOD_CRANK_START_CHOICE (2u)
#define ECU_GW_17_D_PCU_ENG_STRT_MOD_CREEP_START_CHOICE (3u)
#define ECU_GW_17_D_PCU_ENG_STRT_MOD_PULSE_START_CHOICE (4u)
#define ECU_GW_17_D_PCU_ENG_STRT_MOD_SLIP_START_CHOICE (5u)
#define ECU_GW_17_D_PCU_ENG_STRT_MOD_BSG__START_CHOICE (6u)
#define ECU_GW_17_D_PCU_ENG_STRT_MOD_ISG__START_CHOICE (7u)

#define ECU_GW_17_D_PCU_SPD_CTRL_MOD_SELECT_NO_MODE_SELECT_CHOICE (0u)
#define ECU_GW_17_D_PCU_SPD_CTRL_MOD_SELECT_IDLE_CONTROL_SELECT_CHOICE (1u)
#define ECU_GW_17_D_PCU_SPD_CTRL_MOD_SELECT_FAST_SPEED_SELECT_CHOICE (2u)
#define ECU_GW_17_D_PCU_SPD_CTRL_MOD_SELECT_TQ_CONTROL_MODE_SELECT_CHOICE (3u)

#define ECU_GW_17_D_PCU_CLR_DIAGC_INFO_NORMAL_CHOICE (0u)
#define ECU_GW_17_D_PCU_CLR_DIAGC_INFO_NOT_USED_CHOICE (1u)
#define ECU_GW_17_D_PCU_CLR_DIAGC_INFO_PCU_REQUEST_EMS_TO_CLEAR_P1872_CHOICE (2u)
#define ECU_GW_17_D_PCU_CLR_DIAGC_INFO_PCU_HAS_CLEARED_DIAGINTOPER_EMS_REQUEST_CHOICE (3u)

#define ECU_GW_17_D_PCU_MIL_REQ_NOT_REQUEST_CHOICE (0u)
#define ECU_GW_17_D_PCU_MIL_REQ_REQUEST_CHOICE (1u)

#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_INITIAL_VALUE_CHOICE (0u)
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_1ST_GEAR_CHOICE (1u)
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_2ND_GEAR_CHOICE (2u)
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_3RD_GEAR_CHOICE (3u)
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_4TH_GEAR_CHOICE (4u)
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_5TH_GEAR_CHOICE (5u)
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_6TH_GEAR_CHOICE (6u)
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_7TH_GEAR_CHOICE (7u)
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_8TH_GEAR_CHOICE (8u)
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_REVERSE_CHOICE (9u)
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_NEUTRAL_CHOICE (10u)
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_RESERVED_11_CHOICE (11u)
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_RESERVED_12_CHOICE (12u)
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_RESERVED_14_CHOICE (14u)
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_INVALID_CHOICE (15u)

#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_VALID_VALID_CHOICE (0u)
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_VALID_INVALID_CHOICE (1u)

#define ECU_GW_17_D_R_GEARBOX_ACTUAL_DRIVING_GEAR_NEUTRAL_CHOICE (0u)
#define ECU_GW_17_D_R_GEARBOX_ACTUAL_DRIVING_GEAR_1ST_GEAR_CHOICE (1u)
#define ECU_GW_17_D_R_GEARBOX_ACTUAL_DRIVING_GEAR_INITIAL__CHOICE (2u)
#define ECU_GW_17_D_R_GEARBOX_ACTUAL_DRIVING_GEAR_SHIFT_IN_PROGRESS_CHOICE (3u)

#define ECU_GW_17_D_PCU_PT_STS_CHRG_CRP_NONE_CHOICE (0u)
#define ECU_GW_17_D_PCU_PT_STS_CHRG_CRP_IDLE_CHARGE_CHOICE (1u)
#define ECU_GW_17_D_PCU_PT_STS_CHRG_CRP_CREEP_CHOICE (2u)
#define ECU_GW_17_D_PCU_PT_STS_CHRG_CRP_IDLE_CHARGE_AND_CREEP_CHOICE (3u)

#define ECU_GW_17_D_PCU_ENG_TQ_FLYWH_REQ_VLD_VALID_CHOICE (0u)
#define ECU_GW_17_D_PCU_ENG_TQ_FLYWH_REQ_VLD_INVALID_CHOICE (1u)

#define ECU_GW_17_D_PCU_BRK_PEDL_STS1_PRESSED_CHOICE (0u)
#define ECU_GW_17_D_PCU_BRK_PEDL_STS1_NOT__PRESSED_CHOICE (1u)

#define ECU_GW_17_D_PCU_FU_CUT_OFF_REQ_NOT_REQUEST_CHOICE (0u)
#define ECU_GW_17_D_PCU_FU_CUT_OFF_REQ_REQUEST_CHOICE (1u)

#define ECU_GW_17_D_PCU_ENG_TQ_FLYWH_ALLWD_MAX_VLD_VALID_CHOICE (0u)
#define ECU_GW_17_D_PCU_ENG_TQ_FLYWH_ALLWD_MAX_VLD_INVALID_CHOICE (1u)

#define ECU_GW_17_D_PCU_BRK_PEDL_STS2_NOT__PRESSED_CHOICE (0u)
#define ECU_GW_17_D_PCU_BRK_PEDL_STS2_PRESSED_CHOICE (1u)

#define ECU_GW_17_D_PCU_ENG_IGN_AG_INTV_ENBL_UNABLE_CHOICE (0u)
#define ECU_GW_17_D_PCU_ENG_IGN_AG_INTV_ENBL_ENABLE_CHOICE (1u)

#define ECU_GW_17_D_PCU_EMS_SURGE_DAMPER_ENA_DISABLE_CHOICE (0u)
#define ECU_GW_17_D_PCU_EMS_SURGE_DAMPER_ENA_ENABLE_CHOICE (1u)

#define ECU_GW_17_D_PCU_STRT_INHB_NO_INJECTION_INHIBITION_DURING_START_CHOICE (0u)
#define ECU_GW_17_D_PCU_STRT_INHB_INJECTION_INHIBITION_DURING_START_CHOICE (1u)

#define ECU_GW_17_D_PCU_STRT_TRQ_CTL_NO_TORQUE_CONTROL_DURING_START_CHOICE (0u)
#define ECU_GW_17_D_PCU_STRT_TRQ_CTL_TORQUE_CONTROL_DURING_START_CHOICE (1u)

#define ECU_GW_17_D_PCU_ENG_STP_ORD_NOT_REQUEST_CHOICE (0u)
#define ECU_GW_17_D_PCU_ENG_STP_ORD_REQUEST_CHOICE (1u)

#define ECU_GW_17_D_PCU_ENG_STRT_ORD_NO_TREQUEST_CHOICE (0u)
#define ECU_GW_17_D_PCU_ENG_STRT_ORD_REQUEST_CHOICE (1u)

#define ECU_GW_17_D_PCU_FRONT_MOT_STS_NOT__READY_CHOICE (0u)
#define ECU_GW_17_D_PCU_FRONT_MOT_STS_READY_________________________________CHOICE (1u)

#define ECU_GW_17_D_PCU_ESP_TQ_REQ_AVL_FRONT_AVAILABLE_CHOICE (0u)
#define ECU_GW_17_D_PCU_ESP_TQ_REQ_AVL_FRONT_NOT_AVAILABLE_CHOICE (1u)

#define ECU_GW_17_D_PCU_ECGP_OVRD_NO_OVERRIDE_CHOICE (0u)
#define ECU_GW_17_D_PCU_ECGP_OVRD_DRIVER_OVERRIDE_CHOICE (1u)

#define ECU_GW_17_D_PCU_QECACC_NO_ERROR_CHOICE (0u)
#define ECU_GW_17_D_PCU_QECACC_REVERSIBLE_ERROR_CHOICE (1u)
#define ECU_GW_17_D_PCU_QECACC_IRREVERSIBLE_ERROR_CHOICE (2u)
#define ECU_GW_17_D_PCU_QECACC_NOT_DEFINED_CHOICE (3u)

#define ECU_GW_17_D_PCU_ACC_REQ_POSSIBLE_NOERROR_CHOICE (0u)
#define ECU_GW_17_D_PCU_ACC_REQ_POSSIBLE_ERROR_CHOICE (1u)

#define ECU_GW_17_D_PCU_ENG_STS_NOT__READY_CHOICE (0u)
#define ECU_GW_17_D_PCU_ENG_STS_READY_____________________________________________CHOICE (1u)

#define ECU_GW_17_D_PCU_ENG_CLUTCH_STS_ENGAGED__CHOICE (0u)
#define ECU_GW_17_D_PCU_ENG_CLUTCH_STS_DISENGAGED_CHOICE (1u)

#define ECU_GW_17_D_PCU_PWR_INDCD_REAL_TQ_WHL_FAILR_VALID_CHOICE (0u)
#define ECU_GW_17_D_PCU_PWR_INDCD_REAL_TQ_WHL_FAILR_INVALID_CHOICE (1u)

#define ECU_GW_17_D_PCU_FRONT_MOT_STS_VLD_INVALID_CHOICE (0u)
#define ECU_GW_17_D_PCU_FRONT_MOT_STS_VLD_VALID_CHOICE (1u)

#define ECU_GW_17_D_PCU_ENG_STS_VLD_INVALID_CHOICE (0u)
#define ECU_GW_17_D_PCU_ENG_STS_VLD_VALID_CHOICE (1u)

#define ECU_GW_17_D_PCU_ENG_CLUTCH_STS_VLD_INVALID_CHOICE (0u)
#define ECU_GW_17_D_PCU_ENG_CLUTCH_STS_VLD_VALID_CHOICE (1u)

#define ECU_GW_17_D_PCU_REAR_MOT_STS_VLD_INVALID_CHOICE (0u)
#define ECU_GW_17_D_PCU_REAR_MOT_STS_VLD_VALID_CHOICE (1u)

#define ECU_GW_17_D_PCU_START_STOP_ACTIVE_NOT_ACTIVE____________0_CHOICE (0u)
#define ECU_GW_17_D_PCU_START_STOP_ACTIVE_ACTIVE_________________________________________1_CHOICE (1u)

#define ECU_GW_17_D_PCU_START_STOP_ACTIVE_VLD_INVALID_CHOICE (0u)
#define ECU_GW_17_D_PCU_START_STOP_ACTIVE_VLD_VALID_CHOICE (1u)

#define ECU_GW_17_D_PCU_MB_REGEN_MAX_FRONT_WHL_VLD_INVALID_CHOICE (0u)
#define ECU_GW_17_D_PCU_MB_REGEN_MAX_FRONT_WHL_VLD_VALID_CHOICE (1u)

#define ECU_GW_17_D_PCU_MB_REGEN_MAX_WHL_QLFR_NOT_INTIALIZED_CHOICE (0u)
#define ECU_GW_17_D_PCU_MB_REGEN_MAX_WHL_QLFR_NORMAL_CHOICE (1u)
#define ECU_GW_17_D_PCU_MB_REGEN_MAX_WHL_QLFR_FAULTY_CHOICE (2u)

#define ECU_GW_17_D_PCU_APA_TORQ_REQUEST_AVAILABLE_NOT_AVAILABLE_CHOICE (0u)
#define ECU_GW_17_D_PCU_APA_TORQ_REQUEST_AVAILABLE_AVAILABLE_CHOICE (1u)

#define ECU_GW_17_D_PCU_ACC_PEDL_VLD_VALID_CHOICE (0u)
#define ECU_GW_17_D_PCU_ACC_PEDL_VLD_INVALID_CHOICE (1u)

#define ECU_GW_17_D_PCU_PWR_TRAIN_STS_STOP_CHOICE (0u)
#define ECU_GW_17_D_PCU_PWR_TRAIN_STS_CRANK_CHOICE (1u)
#define ECU_GW_17_D_PCU_PWR_TRAIN_STS_RUNNING_CHOICE (2u)
#define ECU_GW_17_D_PCU_PWR_TRAIN_STS______CHOICE (3u)

#define ECU_GW_17_D_PCU_APA_REQUEST_ENABLE_NO_REQUEST_CHOICE (0u)
#define ECU_GW_17_D_PCU_APA_REQUEST_ENABLE_CONTROL_ENABLED_CHOICE (1u)
#define ECU_GW_17_D_PCU_APA_REQUEST_ENABLE___CONTROL_DISABLE_CHOICE (2u)
#define ECU_GW_17_D_PCU_APA_REQUEST_ENABLE_INVALID_CHOICE (3u)

#define ECU_GW_17_D_PCU_ESP_TQ_REQ_AVL_REAR_AVAILABLE_CHOICE (0u)
#define ECU_GW_17_D_PCU_ESP_TQ_REQ_AVL_REAR_NOT_AVAILABLE_CHOICE (1u)

#define ECU_GW_17_D_PCU_REAR_MOT_STS_NOT__READY_CHOICE (0u)
#define ECU_GW_17_D_PCU_REAR_MOT_STS_READY_CHOICE (1u)

#define ECU_GW_17_E_EPS_MEASURED_TORSION_BAR_TORQUE___MEASURED__TORSION__BAR__TORQUE__C_0X800__0_01______________________EPS_ECU________________INITIAL__________0____________________________________INVALID__________0X_FFF____CHOICE (0u)

#define ECU_GW_17_E_EPS_PINIONANG_VALID_VALID_CHOICE (0u)
#define ECU_GW_17_E_EPS_PINIONANG_VALID_INVALID_CHOICE (1u)

#define ECU_GW_17_E_EPS_PINIONANG_RESERVED_CHOICE (14410u)

#define ECU_GW_17_E_EPS_MEASURED_TORSION_BAR_TORQ_VALID______CHOICE (0u)
#define ECU_GW_17_E_EPS_MEASURED_TORSION_BAR_TORQ_VALID________CHOICE (1u)

#define ECU_GW_17_E_EPS_HANDWHEEL_RELANG_VALID_VALID_CHOICE (0u)
#define ECU_GW_17_E_EPS_HANDWHEEL_RELANG_VALID_INVALID_CHOICE (1u)

#define ECU_GW_17_E_EPS_LAT_CTRL_ACTIVE_NOT__ACTIVED_CHOICE (0u)
#define ECU_GW_17_E_EPS_LAT_CTRL_ACTIVE_ACTIVED_CHOICE (1u)

#define ECU_GW_17_E_EPS_LAT_CTRL_AVAILABILITY_STATUS_NOT__AVAILABILITY__CHOICE (0u)
#define ECU_GW_17_E_EPS_LAT_CTRL_AVAILABILITY_STATUS_AVAILABILITY_CHOICE (1u)
#define ECU_GW_17_E_EPS_LAT_CTRL_AVAILABILITY_STATUS_FAILURE_CHOICE (2u)
#define ECU_GW_17_E_EPS_LAT_CTRL_AVAILABILITY_STATUS_RESERVED_CHOICE (3u)

#define ECU_ACC_1_BA_ACC_MOTOR_TORQUE_MAX_LIMIT_REQUEST___RESERVED_CHOICE (2047u)

#define ECU_ACC_1_BA_ACC_MOTOR_TORQUE_MIN_LIMIT_REQUEST___RESERVED_CHOICE (2047u)

#define ECU_ACC_1_BA_ACC_LAT_ANG_REQ_RESERVED_CHOICE (14410u)

#define ECU_ACC_1_BA_ACC_LAT_ANG_REQ_ACTIVE_NOT__ACTIVE_CHOICE (0u)
#define ECU_ACC_1_BA_ACC_LAT_ANG_REQ_ACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_WHEEL_SPEED_FR_VALID_DATA_VALID_CHOICE (0u)
#define ECU_GW_20_B_WHEEL_SPEED_FR_VALID_DATA_NOT_VALID_CHOICE (1u)

#define ECU_GW_20_B_WHEEL_SPEED_FR_DIRECTION_FORWARD_CHOICE (0u)
#define ECU_GW_20_B_WHEEL_SPEED_FR_DIRECTION_BACKWARD_CHOICE (1u)
#define ECU_GW_20_B_WHEEL_SPEED_FR_DIRECTION_STANDSTILL_CHOICE (2u)
#define ECU_GW_20_B_WHEEL_SPEED_FR_DIRECTION_INVALID_CHOICE (3u)

#define ECU_GW_20_B_WHEEL_SPEED_FL_VALID_DATA_VALID_CHOICE (0u)
#define ECU_GW_20_B_WHEEL_SPEED_FL_VALID_DATA_NOT_VALID_CHOICE (1u)

#define ECU_GW_20_B_WHEEL_SPEED_FL_DIRECTION_FORWARD_CHOICE (0u)
#define ECU_GW_20_B_WHEEL_SPEED_FL_DIRECTION_BACKWARD_CHOICE (1u)
#define ECU_GW_20_B_WHEEL_SPEED_FL_DIRECTION_STANDSTILL_CHOICE (2u)
#define ECU_GW_20_B_WHEEL_SPEED_FL_DIRECTION_INVALID_CHOICE (3u)

#define ECU_GW_20_B_ABS_TOD_FAST_OPEN_REQUEST_PASSIVE_CHOICE (0u)
#define ECU_GW_20_B_ABS_TOD_FAST_OPEN_REQUEST_OPEN_CLUTCH_CHOICE (1u)
#define ECU_GW_20_B_ABS_TOD_FAST_OPEN_REQUEST_TORQUEMAXLIMIT_CHOICE (2u)
#define ECU_GW_20_B_ABS_TOD_FAST_OPEN_REQUEST_ERROR_CHOICE (3u)

#define ECU_GW_20_B_WHEEL_SPEED_RR_VALID_DATA_VALID_CHOICE (0u)
#define ECU_GW_20_B_WHEEL_SPEED_RR_VALID_DATA_NOT_VALID_CHOICE (1u)

#define ECU_GW_20_B_WHEEL_SPEED_RR_DIRECTION_FORWARD_CHOICE (0u)
#define ECU_GW_20_B_WHEEL_SPEED_RR_DIRECTION_BACKWARD_CHOICE (1u)
#define ECU_GW_20_B_WHEEL_SPEED_RR_DIRECTION_STANDSTILL_CHOICE (2u)
#define ECU_GW_20_B_WHEEL_SPEED_RR_DIRECTION_INVALID_CHOICE (3u)

#define ECU_GW_20_B_WHEEL_SPEED_RL_VALID_DATA_VALID_CHOICE (0u)
#define ECU_GW_20_B_WHEEL_SPEED_RL_VALID_DATA_NOT_VALID_CHOICE (1u)

#define ECU_GW_20_B_WHEEL_SPEED_RL_DIRECTION_FORWARD_CHOICE (0u)
#define ECU_GW_20_B_WHEEL_SPEED_RL_DIRECTION_BACKWARD_CHOICE (1u)
#define ECU_GW_20_B_WHEEL_SPEED_RL_DIRECTION_STANDSTILL_CHOICE (2u)
#define ECU_GW_20_B_WHEEL_SPEED_RL_DIRECTION_INVALID_CHOICE (3u)

#define ECU_GW_20_B_ESP_VEHICLE_SPEED_REFERENCE_0_360KM_H_CHOICE (0u)
#define ECU_GW_20_B_ESP_VEHICLE_SPEED_REFERENCE_RESERVED_CHOICE (6401u)
#define ECU_GW_20_B_ESP_VEHICLE_SPEED_REFERENCE_INVALID_CHOICE (8191u)

#define ECU_GW_20_B_ESP_URGENCY_BRAKE_ALARM_NOT_ACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_URGENCY_BRAKE_ALARM_ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_ECD_ACTIVE_NOT_ACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_ECD_ACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_ECD_AVAILABLE_VALID_CHOICE (0u)
#define ECU_GW_20_B_ESP_ECD_AVAILABLE_INVALID_CHOICE (1u)

#define ECU_GW_20_B_ESP_MAS_CYL_BRAKE_PRESSURE_VALID_VALID_CHOICE (0u)
#define ECU_GW_20_B_ESP_MAS_CYL_BRAKE_PRESSURE_VALID_INVALID_CHOICE (1u)

#define ECU_GW_20_B_ESP_AUTO_HOLD_STANDBY_NOT_ACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_AUTO_HOLD_STANDBY_ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_BRAKE_LIGHT_ON_REQUEST_BRAKELIGHT_OFF_CHOICE (0u)
#define ECU_GW_20_B_ESP_BRAKE_LIGHT_ON_REQUEST_BRAKELIGHT_ON_CHOICE (1u)
#define ECU_GW_20_B_ESP_BRAKE_LIGHT_ON_REQUEST_NOTUSED_CHOICE (2u)
#define ECU_GW_20_B_ESP_BRAKE_LIGHT_ON_REQUEST_SIGNALNOTAVAILABLE_CHOICE (3u)

#define ECU_GW_20_B_ESP_AUTO_HOLD_ACTIVE_NOT_ACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_AUTO_HOLD_ACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_AUTO_HOLD_AVAILABLE_VALID_CHOICE (0u)
#define ECU_GW_20_B_ESP_AUTO_HOLD_AVAILABLE_INVALID_CHOICE (1u)

#define ECU_GW_20_B_ESP_HHC_AVAILABLE_AVAILABLE_CHOICE (0u)
#define ECU_GW_20_B_ESP_HHC_AVAILABLE_NOT_AVAILABLE_CHOICE (1u)

#define ECU_GW_20_B_ESP_HHC_ACTIVE_FUNCTIONISNOTINACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_HHC_ACTIVE_FUNCTIONISINACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_BRAKE_FORCE_NOBRAKEFORCE_CHOICE (0u)
#define ECU_GW_20_B_ESP_BRAKE_FORCE_HAVEBRAKEFORCE_CHOICE (1u)

#define ECU_GW_20_B_ESP_AB_AACTIVE_NOTACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_AB_AACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_AB_AAVAILABLE_NOTAVAILABLE_CHOICE (0u)
#define ECU_GW_20_B_ESP_AB_AAVAILABLE_AVAILABLE_CHOICE (1u)

#define ECU_GW_20_B_ESP_PREFILL_ACTIVE_NOTACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_PREFILL_ACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_PREFILL_AVAILABLE_NOTAVAILABLE_CHOICE (0u)
#define ECU_GW_20_B_ESP_PREFILL_AVAILABLE_AVAILABLE_CHOICE (1u)

#define ECU_GW_20_B_ESP_AEB_AVAILABLE_NOTAVAILABLE_CHOICE (0u)
#define ECU_GW_20_B_ESP_AEB_AVAILABLE_AVAILABLE_CHOICE (1u)

#define ECU_GW_20_B_ESP_AE_BDEC_ACTIVE_NOTACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_AE_BDEC_ACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_AW_BACTIVE_NOTACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_AW_BACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_AW_BAVAILABLE_NOTAVAILABLE_CHOICE (0u)
#define ECU_GW_20_B_ESP_AW_BAVAILABLE_AVAILABLE_CHOICE (1u)

#define ECU_GW_20_B_ESP_BRAKE_OVER_HEAT_BRAKE_DISC_TEMP_NOTHIGH_CHOICE (0u)
#define ECU_GW_20_B_ESP_BRAKE_OVER_HEAT_BRAKE_DISC_TEMP_TEMPTOOHIGH_CHOICE (1u)

#define ECU_GW_20_B_ESP_CDD_ACTIVE_NOTACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_CDD_ACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_CDD_AVAILABLE_NOTAVAILABLE_CHOICE (0u)
#define ECU_GW_20_B_ESP_CDD_AVAILABLE_AVAILABLE_CHOICE (1u)

#define ECU_GW_20_B_ESP_VEHICLE_STANDSTILL_NOTSTANDSTILL_CHOICE (0u)
#define ECU_GW_20_B_ESP_VEHICLE_STANDSTILL_STANDSTILL_CHOICE (1u)

#define ECU_GW_20_B_ESP_VDC_ACTIVE_NOT_ACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_VDC_ACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_TCS_ACTIVE_NOT_ACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_TCS_ACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_ONLY_ABS_ACTIVE_NOT_ACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_ONLY_ABS_ACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_QDCACC_NOERROR_CHOICE (0u)
#define ECU_GW_20_B_ESP_QDCACC_ERROR_CHOICE (1u)
#define ECU_GW_20_B_ESP_QDCACC_RESERVED_2_CHOICE (2u)
#define ECU_GW_20_B_ESP_QDCACC_RESERVED_3_CHOICE (3u)

#define ECU_GW_20_B_ESP_CDD_ACTIVE_APA_NOTACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_CDD_ACTIVE_APA_ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_CDD_AVAILABLE_APA_NOTAVAILABLE_CHOICE (0u)
#define ECU_GW_20_B_ESP_CDD_AVAILABLE_APA_AVAILABLE_CHOICE (1u)

#define ECU_GW_20_B_ESP_INCREASE_PRESSURE_REQ_OK_NOT_OK_CHOICE (0u)
#define ECU_GW_20_B_ESP_INCREASE_PRESSURE_REQ_OK_OK_CHOICE (1u)

#define ECU_GW_20_B_ESP_HDC_STATUS_OFF_CHOICE (0u)
#define ECU_GW_20_B_ESP_HDC_STATUS_ON_CHOICE (1u)
#define ECU_GW_20_B_ESP_HDC_STATUS_STANDBY_CHOICE (2u)
#define ECU_GW_20_B_ESP_HDC_STATUS_ERROR_CHOICE (3u)

#define ECU_GW_20_B_ESP_HBB_ACTIVE_STATUS_NOT_ACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_HBB_ACTIVE_STATUS_ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_CDP_PARKING_ACTIVE_FOR_ACC_ACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_CDP_PARKING_ACTIVE_FOR_ACC_NOT__ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_CDP_PARKING_AVAIL_FOR_ACC_AVAILABLE_CHOICE (0u)
#define ECU_GW_20_B_ESP_CDP_PARKING_AVAIL_FOR_ACC_NOT_AVAILABLE_CHOICE (1u)

#define ECU_GW_20_B_IBCU_BRAKE_DISC_HIGH_TEMP_WARNING_NO_FAILURE_CHOICE (0u)
#define ECU_GW_20_B_IBCU_BRAKE_DISC_HIGH_TEMP_WARNING_OVERHEAT_LEVEL1_CHOICE (1u)
#define ECU_GW_20_B_IBCU_BRAKE_DISC_HIGH_TEMP_WARNING_OVERHEAT_LEVEL2_CHOICE (2u)
#define ECU_GW_20_B_IBCU_BRAKE_DISC_HIGH_TEMP_WARNING_RESERVED_CHOICE (3u)

#define ECU_GW_20_B_ESP_PREFILLFOR_APA_ACTIVE_NOTACTIVE_CHOICE (0u)
#define ECU_GW_20_B_ESP_PREFILLFOR_APA_ACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_20_B_ESP_PREFILLFOR_APA_AVAILABLE_NOTAVAILABLE_CHOICE (0u)
#define ECU_GW_20_B_ESP_PREFILLFOR_APA_AVAILABLE_AVAILABLE_CHOICE (1u)

#define ECU_GW_20_B_IBCU_BRK_PEDOPL_STS_GB_____________CHOICE (0u)
#define ECU_GW_20_B_IBCU_BRK_PEDOPL_STS_GB___________CHOICE (101u)
#define ECU_GW_20_B_IBCU_BRK_PEDOPL_STS_GB______CHOICE (254u)

#define ECU_GW_20_B_IBCU_BRK_PEDL_STS_GB_VLD_NOT_INITIALIZED_CHOICE (0u)
#define ECU_GW_20_B_IBCU_BRK_PEDL_STS_GB_VLD_NORMAL_CHOICE (1u)
#define ECU_GW_20_B_IBCU_BRK_PEDL_STS_GB_VLD_INVALID_CHOICE (2u)

#define ECU_GW_20_B_IBCU_PRECHECK_STATUS_NOT_CHECKED_CHOICE (0u)
#define ECU_GW_20_B_IBCU_PRECHECK_STATUS_IN_CHECKING_CHOICE (1u)
#define ECU_GW_20_B_IBCU_PRECHECK_STATUS_CHECKED_CHOICE (2u)
#define ECU_GW_20_B_IBCU_PRECHECK_STATUS_FAILED_CHOICE (3u)

#define ECU_GW_24_F_EPS_APA_ABORTFEEDBACK_NO_DRIVING_INTERUPTION_CHOICE (0u)
#define ECU_GW_24_F_EPS_APA_ABORTFEEDBACK_DRIVER_RECOVERY_CHOICE (1u)
#define ECU_GW_24_F_EPS_APA_ABORTFEEDBACK_TOO_HIGH_VEHICLE_SPEED_CHOICE (2u)
#define ECU_GW_24_F_EPS_APA_ABORTFEEDBACK_TOO_IMPORTANT_ANGULAR_ERROR_CHOICE (3u)
#define ECU_GW_24_F_EPS_APA_ABORTFEEDBACK_TOO_IMPORTANT_ANGULAR_SPEED_ERROR_CHOICE (4u)
#define ECU_GW_24_F_EPS_APA_ABORTFEEDBACK_DAE_THERMAL_SECURITY_CHOICE (5u)
#define ECU_GW_24_F_EPS_APA_ABORTFEEDBACK_DAE_LIMIT_SECURITY_CHOICE (6u)
#define ECU_GW_24_F_EPS_APA_ABORTFEEDBACK_OTHER_DEFAULT_CHOICE (7u)

#define ECU_GW_24_F_EPS_MODE_SWITCH_ST_NO_JUDGMENT_CHOICE (0u)
#define ECU_GW_24_F_EPS_MODE_SWITCH_ST_IN_JUDGMENT_CHOICE (1u)

#define ECU_GW_24_F_EPS_APA_EPAS_FAILED_NO__FAIL_CHOICE (0u)
#define ECU_GW_24_F_EPS_APA_EPAS_FAILED_FAIL_CHOICE (1u)

#define ECU_GW_24_F_EPS_TORQ_SENSOR_STATUS_NORMAL_CHOICE (0u)
#define ECU_GW_24_F_EPS_TORQ_SENSOR_STATUS_ABNORMAL_CHOICE (1u)

#define ECU_GW_24_F_EPS_LDW_SHAKE_LEV_STATUS_RESERVED_CHOICE (0u)
#define ECU_GW_24_F_EPS_LDW_SHAKE_LEV_STATUS_LOW_CHOICE (1u)
#define ECU_GW_24_F_EPS_LDW_SHAKE_LEV_STATUS_NORMAL_CHOICE (2u)
#define ECU_GW_24_F_EPS_LDW_SHAKE_LEV_STATUS_HIGH_CHOICE (3u)

#define ECU_GW_24_F_EPS_APA_CONTROL_FEEDBACK_CONTROL_DISABLE_CHOICE (0u)
#define ECU_GW_24_F_EPS_APA_CONTROL_FEEDBACK_CONTROL_ENABLED_CHOICE (1u)

#define ECU_GW_24_F_EPS_IACC_ABORTREASON_NO_DRIVING_INTERUPTION_CHOICE (0u)
#define ECU_GW_24_F_EPS_IACC_ABORTREASON_DRIVER_RECOVERY__OVER_RIDE__CHOICE (1u)
#define ECU_GW_24_F_EPS_IACC_ABORTREASON_VEHICLE_SPEED_ERROR_CHOICE (2u)
#define ECU_GW_24_F_EPS_IACC_ABORTREASON_REQUEST_ERROR_CHOICE (3u)
#define ECU_GW_24_F_EPS_IACC_ABORTREASON_DAE_THERMAL_SECURITY_CHOICE (4u)
#define ECU_GW_24_F_EPS_IACC_ABORTREASON_OTHER_DEFAULT_CHOICE (5u)
#define ECU_GW_24_F_EPS_IACC_ABORTREASON_ADAS_MESSAGE__ERROR__CD569____0X6__RESERVED___CHOICE (6u)
#define ECU_GW_24_F_EPS_IACC_ABORTREASON_RESERVED_CHOICE (7u)

#define ECU_GW_24_F_EPS_SYSTEM_ST_DISABLE_CHOICE (0u)
#define ECU_GW_24_F_EPS_SYSTEM_ST_OFF_CHOICE (1u)
#define ECU_GW_24_F_EPS_SYSTEM_ST_ENABLE_CHOICE (2u)
#define ECU_GW_24_F_EPS_SYSTEM_ST_WARM_INT_CHOICE (3u)
#define ECU_GW_24_F_EPS_SYSTEM_ST___RESERVED_CHOICE (4u)

#define ECU_GW_24_F_EPS_EPS_FAILED_NO_FAILURE_CHOICE (0u)
#define ECU_GW_24_F_EPS_EPS_FAILED_SLIGHT_FAILURE_CHOICE (1u)
#define ECU_GW_24_F_EPS_EPS_FAILED_CRITICAL_FAILURE_CHOICE (2u)
#define ECU_GW_24_F_EPS_EPS_FAILED_FATAL_FAILURE_CHOICE (3u)
#define ECU_GW_24_F_EPS_EPS_FAILED_RESERVED_CHOICE (4u)

#define ECU_GW_24_F_EPS_TORQUE_ASSIST_MODE_NORMAL_CHOICE (0u)
#define ECU_GW_24_F_EPS_TORQUE_ASSIST_MODE_LIGHT_CHOICE (1u)
#define ECU_GW_24_F_EPS_TORQUE_ASSIST_MODE_HEAVY_CHOICE (2u)
#define ECU_GW_24_F_EPS_TORQUE_ASSIST_MODE_UNKNOW_CHOICE (3u)

#define ECU_GW_24_F_EPS_CONCUSS_AVAILABILITY_STATUS_CONCUSS__AVAILABILITY____________________CHOICE (0u)
#define ECU_GW_24_F_EPS_CONCUSS_AVAILABILITY_STATUS_CONCUSS__ACTIVE___________CHOICE (1u)
#define ECU_GW_24_F_EPS_CONCUSS_AVAILABILITY_STATUS_EPS__CONCUSS_FAILURE__EPS_______________CHOICE (2u)
#define ECU_GW_24_F_EPS_CONCUSS_AVAILABILITY_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_28_B_BCM_LOW_BEAM_STATUS_OFF_CHOICE (0u)
#define ECU_GW_28_B_BCM_LOW_BEAM_STATUS_ON_CHOICE (1u)
#define ECU_GW_28_B_BCM_LOW_BEAM_STATUS_NOT_USED_CHOICE (2u)
#define ECU_GW_28_B_BCM_LOW_BEAM_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_28_B_BCM_HIGH_BEAM_STATUS_OFF_CHOICE (0u)
#define ECU_GW_28_B_BCM_HIGH_BEAM_STATUS_ON_CHOICE (1u)
#define ECU_GW_28_B_BCM_HIGH_BEAM_STATUS_NOT_USED_CHOICE (2u)
#define ECU_GW_28_B_BCM_HIGH_BEAM_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_28_B_BCM_TURN_LIGHT_SWITCH_STS_NOT__ACTIVED_CHOICE (0u)
#define ECU_GW_28_B_BCM_TURN_LIGHT_SWITCH_STS_LEFT__ACTIVED_CHOICE (1u)
#define ECU_GW_28_B_BCM_TURN_LIGHT_SWITCH_STS_RIGHT__ACTIVED_CHOICE (2u)
#define ECU_GW_28_B_BCM_TURN_LIGHT_SWITCH_STS_INVALID_CHOICE (3u)

#define ECU_GW_28_B_BCM_MIRROR_ADJUST_STS________0X1________________0X2________________0X3______CHOICE (0u)

#define ECU_GW_28_B_BCM_LOCK_TRIGGER_NONE_CHOICE (0u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER_RKE_____CHOICE (1u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER_PKE_____CHOICE (2u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER__________3_CHOICE (3u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER__________4_CHOICE (4u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER__________5_CHOICE (5u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER__________6_CHOICE (6u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER__________7_CHOICE (7u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER__________8_CHOICE (8u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER______________9_CHOICE (9u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER_HU_____CHOICE (10u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER_APA_______CHOICE (11u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER______________12_CHOICE (12u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER______________13_CHOICE (13u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER__________________CHOICE (14u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER_NFC_____CHOICE (15u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER_UWB_____________CHOICE (16u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER____________________CHOICE (17u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER__________18_CHOICE (18u)
#define ECU_GW_28_B_BCM_LOCK_TRIGGER______________19_CHOICE (19u)

#define ECU_GW_28_B_BCM_DRIVER_DOOR_STATUS_CLOSE_CHOICE (0u)
#define ECU_GW_28_B_BCM_DRIVER_DOOR_STATUS_OPEN_CHOICE (1u)

#define ECU_GW_28_B_BCM_TURN_INDICATOR_LEFT_OFF_CHOICE (0u)
#define ECU_GW_28_B_BCM_TURN_INDICATOR_LEFT_ON_CHOICE (1u)
#define ECU_GW_28_B_BCM_TURN_INDICATOR_LEFT_NOT_USED_CHOICE (2u)
#define ECU_GW_28_B_BCM_TURN_INDICATOR_LEFT_ERROR_CHOICE (3u)

#define ECU_GW_28_B_BCM_TURN_INDICATOR_RIGHT_OFF_CHOICE (0u)
#define ECU_GW_28_B_BCM_TURN_INDICATOR_RIGHT_ON_CHOICE (1u)
#define ECU_GW_28_B_BCM_TURN_INDICATOR_RIGHT_NOT_USED_CHOICE (2u)
#define ECU_GW_28_B_BCM_TURN_INDICATOR_RIGHT_ERROR_CHOICE (3u)

#define ECU_GW_28_B_BCM_HOOD_STATUS_CLOSE_CHOICE (0u)
#define ECU_GW_28_B_BCM_HOOD_STATUS_OPEN_CHOICE (1u)

#define ECU_GW_28_B_PEPS_START_CONTROLSIGNAL___NO__REQUEST_CHOICE (0u)
#define ECU_GW_28_B_PEPS_START_CONTROLSIGNAL_STARTUP__START_CHOICE (1u)
#define ECU_GW_28_B_PEPS_START_CONTROLSIGNAL_STARTUP__STOP_CHOICE (2u)
#define ECU_GW_28_B_PEPS_START_CONTROLSIGNAL___INVALID_CHOICE (3u)

#define ECU_GW_28_B_BCM_TRUNK_RELEASE_TRIGGER_NONE_CHOICE (0u)
#define ECU_GW_28_B_BCM_TRUNK_RELEASE_TRIGGER_RKE___________CHOICE (1u)
#define ECU_GW_28_B_BCM_TRUNK_RELEASE_TRIGGER_PKE___________CHOICE (2u)
#define ECU_GW_28_B_BCM_TRUNK_RELEASE_TRIGGER____________________3_CHOICE (3u)
#define ECU_GW_28_B_BCM_TRUNK_RELEASE_TRIGGER________________4_CHOICE (4u)
#define ECU_GW_28_B_BCM_TRUNK_RELEASE_TRIGGER____________________5_CHOICE (5u)
#define ECU_GW_28_B_BCM_TRUNK_RELEASE_TRIGGER________________6_CHOICE (6u)
#define ECU_GW_28_B_BCM_TRUNK_RELEASE_TRIGGER________________7_CHOICE (7u)
#define ECU_GW_28_B_BCM_TRUNK_RELEASE_TRIGGER____________________8_CHOICE (8u)
#define ECU_GW_28_B_BCM_TRUNK_RELEASE_TRIGGER________________________CHOICE (9u)

#define ECU_GW_28_B_PEPS_REMOTE_START_REQ___NOT__REMOTE__START_CHOICE (0u)
#define ECU_GW_28_B_PEPS_REMOTE_START_REQ___REMOTE__START_CHOICE (1u)
#define ECU_GW_28_B_PEPS_REMOTE_START_REQ_RESERVED_CHOICE (2u)
#define ECU_GW_28_B_PEPS_REMOTE_START_REQ_INVALID_CHOICE (3u)

#define ECU_GW_28_B_BCM_EMERGENCYLIGHTSTATUS_OFF_CHOICE (0u)
#define ECU_GW_28_B_BCM_EMERGENCYLIGHTSTATUS_ON_CHOICE (1u)
#define ECU_GW_28_B_BCM_EMERGENCYLIGHTSTATUS_NOT_USED_CHOICE (2u)
#define ECU_GW_28_B_BCM_EMERGENCYLIGHTSTATUS_ERROR_________CHOICE (3u)

#define ECU_GW_28_B_BCM_POWER_STATUS_FEEDBACK_OFF_CHOICE (0u)
#define ECU_GW_28_B_BCM_POWER_STATUS_FEEDBACK_ACC_CHOICE (1u)
#define ECU_GW_28_B_BCM_POWER_STATUS_FEEDBACK_ON_CHOICE (2u)
#define ECU_GW_28_B_BCM_POWER_STATUS_FEEDBACK_START_CHOICE (3u)

#define ECU_GW_28_B_BCM_REAR_DEFROSTERSTATUS_OFF_CHOICE (0u)
#define ECU_GW_28_B_BCM_REAR_DEFROSTERSTATUS_ON_CHOICE (1u)
#define ECU_GW_28_B_BCM_REAR_DEFROSTERSTATUS_NOT_USED_CHOICE (2u)
#define ECU_GW_28_B_BCM_REAR_DEFROSTERSTATUS_RESERVED_CHOICE (3u)

#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER_NONE_CHOICE (0u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER_RKE_____CHOICE (1u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER_PKE_____CHOICE (2u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER__________3_CHOICE (3u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER__________4_CHOICE (4u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER________________CHOICE (5u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER__________6_CHOICE (6u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER__________7_CHOICE (7u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER__________8_CHOICE (8u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER_HU_____CHOICE (9u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER______________10_CHOICE (10u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER______________11_CHOICE (11u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER_ACC_____________CHOICE (12u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER______________13_CHOICE (13u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER_NFC_____CHOICE (14u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER_UWB_____________CHOICE (15u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER____________________CHOICE (16u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER__________17_CHOICE (17u)
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER______________18_CHOICE (18u)

#define ECU_GW_28_B_BCM_REFUEL_REQ________0_CHOICE (0u)
#define ECU_GW_28_B_BCM_REFUEL_REQ________1_CHOICE (1u)

#define ECU_GW_28_B_PEPS_SHIFT_FORBID_RQ_ALLOW_SHIFT_CHOICE (0u)
#define ECU_GW_28_B_PEPS_SHIFT_FORBID_RQ_FORBID_SHIFT_CHOICE (1u)

#define ECU_GW_28_B_BCM_KEY_ALARM_STATUS___DISARMED_CHOICE (0u)
#define ECU_GW_28_B_BCM_KEY_ALARM_STATUS___PREARMED_CHOICE (1u)
#define ECU_GW_28_B_BCM_KEY_ALARM_STATUS___ARMED_CHOICE (2u)
#define ECU_GW_28_B_BCM_KEY_ALARM_STATUS___ACTIVATED_CHOICE (3u)

#define ECU_GW_2_D1_PEPS_LUGGAGE_UNLOCK_SIGNAL___INACTIVE_CHOICE (0u)
#define ECU_GW_2_D1_PEPS_LUGGAGE_UNLOCK_SIGNAL_________________CHOICE (1u)
#define ECU_GW_2_D1_PEPS_LUGGAGE_UNLOCK_SIGNAL__PE___________CHOICE (2u)
#define ECU_GW_2_D1_PEPS_LUGGAGE_UNLOCK_SIGNAL_________CHOICE (3u)

#define ECU_GW_2_D1_BCM_REVERSE_POSITION__NOT_IN__REVERSE_CHOICE (0u)
#define ECU_GW_2_D1_BCM_REVERSE_POSITION__IN__REVERSE_CHOICE (1u)

#define ECU_GW_2_D1_BCM_BRAKE_LAMP_STATUS_OFF_CHOICE (0u)
#define ECU_GW_2_D1_BCM_BRAKE_LAMP_STATUS_ON_CHOICE (1u)
#define ECU_GW_2_D1_BCM_BRAKE_LAMP_STATUS_NOT_USED_CHOICE (2u)
#define ECU_GW_2_D1_BCM_BRAKE_LAMP_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_2_D1_BCM_TRUNK_DOOR_STATUS_CLOSE_CHOICE (0u)
#define ECU_GW_2_D1_BCM_TRUNK_DOOR_STATUS_OPEN_CHOICE (1u)

#define ECU_GW_2_D1_BCM_RIGHT_REAR_DOOR_STATUS_CLOSE_CHOICE (0u)
#define ECU_GW_2_D1_BCM_RIGHT_REAR_DOOR_STATUS_OPEN_CHOICE (1u)

#define ECU_GW_2_D1_BCM_PASSENGER_DOOR_STATUS_CLOSE_CHOICE (0u)
#define ECU_GW_2_D1_BCM_PASSENGER_DOOR_STATUS_OPEN_CHOICE (1u)

#define ECU_GW_2_DE_IP_DRIVER_LCDALED_STS_NO__ERROR_CHOICE (0u)
#define ECU_GW_2_DE_IP_DRIVER_LCDALED_STS_ERROR_CHOICE (1u)

#define ECU_GW_2_DE_IP_PASSENGER_LCDALED_STS_NO__ERROR_CHOICE (0u)
#define ECU_GW_2_DE_IP_PASSENGER_LCDALED_STS_ERROR_CHOICE (1u)

#define ECU_GW_2_DE_IP_DIS_FAIL_NO_ERROR_CHOICE (0u)
#define ECU_GW_2_DE_IP_DIS_FAIL_ERROR_CHOICE (1u)

#define ECU_GW_2_DE_IP_Q_DASH_ACC_FAIL_NO_ERROR_CHOICE (0u)
#define ECU_GW_2_DE_IP_Q_DASH_ACC_FAIL_ERROR_CHOICE (1u)
#define ECU_GW_2_DE_IP_Q_DASH_ACC_FAIL_RESERVED_2_CHOICE (2u)
#define ECU_GW_2_DE_IP_Q_DASH_ACC_FAIL_RESERVED_3_CHOICE (3u)

#define ECU_GW_2_E6_EMS_COOLT_T_ERR_NO_ERROR_CHOICE (0u)
#define ECU_GW_2_E6_EMS_COOLT_T_ERR_ERROR_CHOICE (1u)

#define ECU_GW_2_E6_EMS_LO_BATT_ERR_NO_ERROR_CHOICE (0u)
#define ECU_GW_2_E6_EMS_LO_BATT_ERR_ERROR__CHOICE (1u)

#define ECU_GW_2_E6_EMS_CATALYST_WARM_UP_NOT_REQUEST_CHOICE (0u)
#define ECU_GW_2_E6_EMS_CATALYST_WARM_UP_REQUEST__CHOICE (1u)

#define ECU_GW_2_E6_EMS_GENERAL_DENO_STATUS_VALID_VALID_CHOICE (0u)
#define ECU_GW_2_E6_EMS_GENERAL_DENO_STATUS_VALID_INVALID_CHOICE (1u)

#define ECU_GW_2_E6_EMS_WARM_UP_CYCLE_NOT_ACHIEVED_CHOICE (0u)
#define ECU_GW_2_E6_EMS_WARM_UP_CYCLE_ACHIEVED_CHOICE (1u)

#define ECU_GW_2_E6_EMS_DRIVING_CYCLE_NOT_ACHIEVED_CHOICE (0u)
#define ECU_GW_2_E6_EMS_DRIVING_CYCLE_ACHIEVED_CHOICE (1u)

#define ECU_GW_2_E6_EMS_ALTITUDE_FACTOR_VALID_VALID_CHOICE (0u)
#define ECU_GW_2_E6_EMS_ALTITUDE_FACTOR_VALID_NOT_VALID_CHOICE (1u)

#define ECU_GW_2_E6_EMS_IGNITION_CYCLES_COUNTER_VALID_VALID_CHOICE (0u)
#define ECU_GW_2_E6_EMS_IGNITION_CYCLES_COUNTER_VALID_INVALID_CHOICE (1u)

#define ECU_ACC_31_A_ACC_AEB_TARGET_LNG_RANGE__70_180_CHOICE (0u)
#define ECU_ACC_31_A_ACC_AEB_TARGET_LNG_RANGE_RESERVED_CHOICE (501u)
#define ECU_ACC_31_A_ACC_AEB_TARGET_LNG_RANGE_NO_DISPLAY_CHOICE (511u)

#define ECU_ACC_31_A_ACC_AEB_TARGET_REL_SPEED__250_250_CHOICE (0u)
#define ECU_ACC_31_A_ACC_AEB_TARGET_REL_SPEED_RESERVED_CHOICE (501u)

#define ECU_ACC_31_A_ACC_AEB_TARGET_LAT_RANGE__50_50M_CHOICE (0u)
#define ECU_ACC_31_A_ACC_AEB_TARGET_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_ACC_31_A_ACC_ELK_ALERT_NO_WARNING_CHOICE (0u)
#define ECU_ACC_31_A_ACC_ELK_ALERT_LEFT__WARNING_CHOICE (1u)
#define ECU_ACC_31_A_ACC_ELK_ALERT_RIGHT__WARNING_CHOICE (2u)
#define ECU_ACC_31_A_ACC_ELK_ALERT_RESERVED_CHOICE (3u)

#define ECU_ACC_31_A_ACC_AEB_STATUS_OFF_CHOICE (0u)
#define ECU_ACC_31_A_ACC_AEB_STATUS_ON_CHOICE (1u)
#define ECU_ACC_31_A_ACC_AEB_STATUS__RESERVED_CHOICE (2u)
#define ECU_ACC_31_A_ACC_AEB_STATUS_FAILURE_CHOICE (3u)

#define ECU_ACC_31_A_ACC_AEB_TEXT_INFO_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_31_A_ACC_AEB_TEXT_INFO_AEB__ERROR_BY_CAMERA_CHOICE (1u)
#define ECU_ACC_31_A_ACC_AEB_TEXT_INFO_AEB__ERROR_BY_FR_CHOICE (2u)
#define ECU_ACC_31_A_ACC_AEB_TEXT_INFO_AEB__ERROR_BY__DASY_CHOICE (3u)
#define ECU_ACC_31_A_ACC_AEB_TEXT_INFO_AEB__ERROR_BY_FCR_CHOICE (4u)
#define ECU_ACC_31_A_ACC_AEB_TEXT_INFO_AEB__ERROR_BY_EP_BI_CHOICE (5u)
#define ECU_ACC_31_A_ACC_AEB_TEXT_INFO_AEB__ERROR_BY_SAS_CHOICE (6u)
#define ECU_ACC_31_A_ACC_AEB_TEXT_INFO_AEB__ERROR_BY_SRS_CHOICE (7u)
#define ECU_ACC_31_A_ACC_AEB_TEXT_INFO_AEB__ERROR_BY_EMS_CHOICE (8u)
#define ECU_ACC_31_A_ACC_AEB_TEXT_INFO_AEB__ERROR_BY_TCU_CHOICE (9u)
#define ECU_ACC_31_A_ACC_AEB_TEXT_INFO_AEB__ERROR_BY_OTHER_CHOICE (10u)
#define ECU_ACC_31_A_ACC_AEB_TEXT_INFO_AEB__ERROR_BY_HIGH_TEMPERATURE__CHOICE (11u)
#define ECU_ACC_31_A_ACC_AEB_TEXT_INFO_RESERVED_CHOICE (12u)

#define ECU_ACC_31_A_ACC_AEB_TARGETMODE_NONE_CHOICE (0u)
#define ECU_ACC_31_A_ACC_AEB_TARGETMODE_VIDEO_ONLY_MODE_CHOICE (1u)
#define ECU_ACC_31_A_ACC_AEB_TARGETMODE_RADER_ONLY_MODE_CHOICE (2u)
#define ECU_ACC_31_A_ACC_AEB_TARGETMODE_FUSION_MODE_CHOICE (3u)

#define ECU_ACC_31_A_ACC_VOICEINFO_NO_VOICE_CHOICE (0u)
#define ECU_ACC_31_A_ACC_VOICEINFO_LATENT_WARNING_VOIVE_CHOICE (1u)
#define ECU_ACC_31_A_ACC_VOICEINFO_FCW_AEB_VOICE_CHOICE (2u)
#define ECU_ACC_31_A_ACC_VOICEINFO_ACC_OBJECT_DETECT_VOICE_CHOICE (3u)
#define ECU_ACC_31_A_ACC_VOICEINFO_ACC_OBJECT_DISAPPEARED_VOICE_CHOICE (4u)
#define ECU_ACC_31_A_ACC_VOICEINFO_ACC_IACC_TAKEOVER_REQUEST_VOICE_CHOICE (5u)
#define ECU_ACC_31_A_ACC_VOICEINFO_LANE__LEFT_DANGEROUS_WARNING__VOICE_CHOICE (6u)
#define ECU_ACC_31_A_ACC_VOICEINFO_LANE__RIGHT_DANGEROUS_WARNING__VOICE_CHOICE (7u)
#define ECU_ACC_31_A_ACC_VOICEINFO_RESERVED_8_CHOICE (8u)
#define ECU_ACC_31_A_ACC_VOICEINFO_IACC__ACTIVE_VOICE_CHOICE (9u)
#define ECU_ACC_31_A_ACC_VOICEINFO_IACC_EXIT_VOICE_CHOICE (10u)
#define ECU_ACC_31_A_ACC_VOICEINFO_RESERVED_11_CHOICE (11u)
#define ECU_ACC_31_A_ACC_VOICEINFO_RESERVED_12_CHOICE (12u)
#define ECU_ACC_31_A_ACC_VOICEINFO_CRUISE_UNINTENDED_EXIT_CHOICE (13u)
#define ECU_ACC_31_A_ACC_VOICEINFO_TRAFFIC_WARNING_CHOICE (14u)
#define ECU_ACC_31_A_ACC_VOICEINFO_RESERVED_15_CHOICE (15u)

#define ECU_ACC_31_A_ACC_F_RADAR_FAILURE_STATUS__NO_FAILURE_CHOICE (0u)
#define ECU_ACC_31_A_ACC_F_RADAR_FAILURE_STATUS_BLIND_CHOICE (1u)
#define ECU_ACC_31_A_ACC_F_RADAR_FAILURE_STATUS_REVERSIBLE_FAILURE_CHOICE (2u)
#define ECU_ACC_31_A_ACC_F_RADAR_FAILURE_STATUS__IRRVERSIBLE_FAILURE_CHOICE (3u)

#define ECU_ACC_31_A_ACC_R_LANE_MARKER_TYPE_DASHED_CHOICE (0u)
#define ECU_ACC_31_A_ACC_R_LANE_MARKER_TYPE_SOLID_CHOICE (1u)
#define ECU_ACC_31_A_ACC_R_LANE_MARKER_TYPE_ROAD_EDGE_CHOICE (2u)
#define ECU_ACC_31_A_ACC_R_LANE_MARKER_TYPE_DOUBLE_LANE_MARK_CHOICE (3u)
#define ECU_ACC_31_A_ACC_R_LANE_MARKER_TYPE_BOTTS__DOTS_CHOICE (4u)
#define ECU_ACC_31_A_ACC_R_LANE_MARKER_TYPE_OTHER_CHOICE (5u)
#define ECU_ACC_31_A_ACC_R_LANE_MARKER_TYPE_FENCE_CHOICE (6u)
#define ECU_ACC_31_A_ACC_R_LANE_MARKER_TYPE_NO_DISPLAY_CHOICE (7u)
#define ECU_ACC_31_A_ACC_R_LANE_MARKER_TYPE_FISHBONE_CHOICE (8u)
#define ECU_ACC_31_A_ACC_R_LANE_MARKER_TYPE_DASHED_FISHBONE_CHOICE (9u)

#define ECU_ACC_31_A_ACC_LAS_MODE_SELECTION_STATUS_RESERVED_0_CHOICE (0u)
#define ECU_ACC_31_A_ACC_LAS_MODE_SELECTION_STATUS_LDW_CHOICE (1u)
#define ECU_ACC_31_A_ACC_LAS_MODE_SELECTION_STATUS_LKA_CHOICE (2u)
#define ECU_ACC_31_A_ACC_LAS_MODE_SELECTION_STATUS_LCS_CHOICE (3u)
#define ECU_ACC_31_A_ACC_LAS_MODE_SELECTION_STATUS_RESERVED_4_CHOICE (4u)
#define ECU_ACC_31_A_ACC_LAS_MODE_SELECTION_STATUS_OFF_CHOICE (7u)

#define ECU_ACC_31_A_ACC_IACCHWA_ENABLE_OFF_CHOICE (0u)
#define ECU_ACC_31_A_ACC_IACCHWA_ENABLE_ON_CHOICE (1u)

#define ECU_ACC_31_A_ACC_LAS_WARNING_MODE_SELECTION_STS_RESERVED_0_CHOICE (0u)
#define ECU_ACC_31_A_ACC_LAS_WARNING_MODE_SELECTION_STS_SOUND_CHOICE (1u)
#define ECU_ACC_31_A_ACC_LAS_WARNING_MODE_SELECTION_STS_VIBRATION_CHOICE (2u)
#define ECU_ACC_31_A_ACC_LAS_WARNING_MODE_SELECTION_STS_SOUND_AND_VIBRATION_CHOICE (3u)
#define ECU_ACC_31_A_ACC_LAS_WARNING_MODE_SELECTION_STS_RESERVED_4_CHOICE (4u)

#define ECU_ACC_31_A_ACC_HOST_LANE_RIGHT_STATUS_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_31_A_ACC_HOST_LANE_RIGHT_STATUS_TRACKING_CHOICE (1u)
#define ECU_ACC_31_A_ACC_HOST_LANE_RIGHT_STATUS_INTERVENTION_CHOICE (2u)
#define ECU_ACC_31_A_ACC_HOST_LANE_RIGHT_STATUS_WARNING__0X4__CENTERING__CHOICE (3u)
#define ECU_ACC_31_A_ACC_HOST_LANE_RIGHT_STATUS_CROSSING__CHOICE (5u)
#define ECU_ACC_31_A_ACC_HOST_LANE_RIGHT_STATUS_UDLC_WAIT_ACTIVE_CHOICE (6u)
#define ECU_ACC_31_A_ACC_HOST_LANE_RIGHT_STATUS_AC_CACTIVE_CHOICE (7u)
#define ECU_ACC_31_A_ACC_HOST_LANE_RIGHT_STATUS_UDLC_NOT_ACTIVE_CHOICE (8u)
#define ECU_ACC_31_A_ACC_HOST_LANE_RIGHT_STATUS__IAC_CACTIVE_CHOICE (9u)
#define ECU_ACC_31_A_ACC_HOST_LANE_RIGHT_STATUS_NI_DACTIVE_CHOICE (10u)

#define ECU_ACC_31_A_ACC_HOST_LANE_LEFT_STATUS_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_31_A_ACC_HOST_LANE_LEFT_STATUS_TRACKING_CHOICE (1u)
#define ECU_ACC_31_A_ACC_HOST_LANE_LEFT_STATUS_INTERVENTION_CHOICE (2u)
#define ECU_ACC_31_A_ACC_HOST_LANE_LEFT_STATUS_WARNING__0X4__CENTERING__CHOICE (3u)
#define ECU_ACC_31_A_ACC_HOST_LANE_LEFT_STATUS_CROSSING__CHOICE (5u)
#define ECU_ACC_31_A_ACC_HOST_LANE_LEFT_STATUS_UDLC_WAIT_ACTIVE_CHOICE (6u)
#define ECU_ACC_31_A_ACC_HOST_LANE_LEFT_STATUS_AC_CACTIVE_CHOICE (7u)
#define ECU_ACC_31_A_ACC_HOST_LANE_LEFT_STATUS_UDLC_NOT_ACTIVE_CHOICE (8u)
#define ECU_ACC_31_A_ACC_HOST_LANE_LEFT_STATUS__IAC_CACTIVE_CHOICE (9u)
#define ECU_ACC_31_A_ACC_HOST_LANE_LEFT_STATUS_NI_DACTIVE_CHOICE (10u)

#define ECU_ACC_31_A_ACC_L_LANE_MARKER_TYPE_DASHED_CHOICE (0u)
#define ECU_ACC_31_A_ACC_L_LANE_MARKER_TYPE_SOLID_CHOICE (1u)
#define ECU_ACC_31_A_ACC_L_LANE_MARKER_TYPE_ROAD_EDGE_CHOICE (2u)
#define ECU_ACC_31_A_ACC_L_LANE_MARKER_TYPE_DOUBLE_LANE_MARK_CHOICE (3u)
#define ECU_ACC_31_A_ACC_L_LANE_MARKER_TYPE_BOTTS__DOTS_CHOICE (4u)
#define ECU_ACC_31_A_ACC_L_LANE_MARKER_TYPE_OTHER_CHOICE (5u)
#define ECU_ACC_31_A_ACC_L_LANE_MARKER_TYPE_FENCE_CHOICE (6u)
#define ECU_ACC_31_A_ACC_L_LANE_MARKER_TYPE_NO_DISPLAY_CHOICE (7u)
#define ECU_ACC_31_A_ACC_L_LANE_MARKER_TYPE_FISHBONE_CHOICE (8u)
#define ECU_ACC_31_A_ACC_L_LANE_MARKER_TYPE_DASHED_FISHBONE_CHOICE (9u)

#define ECU_ACC_31_A_ACC_ROAD_CURVATURE__0_03_0_03_CHOICE (0u)
#define ECU_ACC_31_A_ACC_ROAD_CURVATURE_RESERVED_CHOICE (121u)

#define ECU_ACC_31_A_ACC_ROAD_CURVATURE_NEAR__0_03_0_03_CHOICE (0u)
#define ECU_ACC_31_A_ACC_ROAD_CURVATURE_NEAR_RESERVED_CHOICE (121u)

#define ECU_ACC_31_A_ACC_ROAD_CURVATURE_FAR__0_03_0_03_CHOICE (0u)
#define ECU_ACC_31_A_ACC_ROAD_CURVATURE_FAR_RESERVED_CHOICE (121u)

#define ECU_ACC_31_A_ACC_LANE_CHANGE_STATUS________CHOICE (0u)
#define ECU_ACC_31_A_ACC_LANE_CHANGE_STATUS____________1_CHOICE (1u)
#define ECU_ACC_31_A_ACC_LANE_CHANGE_STATUS____________2_CHOICE (2u)
#define ECU_ACC_31_A_ACC_LANE_CHANGE_STATUS__________CHOICE (3u)

#define ECU_ACC_31_A_ACC_IACCHWA_MODE_OFF_CHOICE (0u)
#define ECU_ACC_31_A_ACC_IACCHWA_MODE_STANDBY_CHOICE (1u)
#define ECU_ACC_31_A_ACC_IACCHWA_MODE_PASSIVE_CHOICE (2u)
#define ECU_ACC_31_A_ACC_IACCHWA_MODE_ACTIVE_CHOICE (3u)
#define ECU_ACC_31_A_ACC_IACCHWA_MODE_SUSPEND_CHOICE (4u)
#define ECU_ACC_31_A_ACC_IACCHWA_MODE__PROHIBITION_CHOICE (5u)
#define ECU_ACC_31_A_ACC_IACCHWA_MODE_RESERVED_CHOICE (6u)
#define ECU_ACC_31_A_ACC_IACCHWA_MODE_FAILURE_CHOICE (7u)

#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_IACC__CANCEL_CHOICE (1u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_IACC_DEACTIVATE_CHOICE (2u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_IACC_UNINTENDED_EXIT_CHOICE (3u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_UNABLE_TO_ACTIVATE_IACC_CHOICE (4u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_LANE_CONDITION_NOT_AVAILABLE_CHOICE (5u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_ADR_DVR__STATUS_NOT__MATCH_CHOICE (6u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_LONGITUDINAL_CONTROL_NOT_AVAILABLE_CHOICE (7u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_IACC_NOT_AVAILABLE_BY_EPS_CHOICE (8u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_EXCEED_SPEED_LIMIT_CHOICE (9u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_DRIVER_OVERRIDES_STEERING_CHOICE (10u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_CAUTION_ABOUT_DRIVING_SAFTY_CHOICE (11u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER__SYSTEM_ERROR_CHOICE (12u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER__PROHIBITION_REQUEST_FOR_SAFESTOP_CHOICE (13u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_TURN_LIGHT_SWITCH_ON_CHOICE (14u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_HANDS_ON_PLZ_CHOICE (15u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER___PLEASE_TURN_ON_IACC_IN_INCALL__CHOICE (16u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER__UNABLE_TO_ACTIVE_IN_CURVE_CHOICE (17u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER__UNABLE_TO_ACTIVE_FOR_NOT_IN_LANE_CROSSING_LANE_CHOICE (18u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_LONGITUDE__EXIT_CHOICE (19u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_TAKEOVER_REQUEST_WITH_SAFETY_STOPING_CHOICE (20u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_TAKEOVER_REQUEST_WITH_SAFETY_STOP_COMPLETED_CHOICE (21u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_OTHER_SYSTEM_ERROR_CHOICE (22u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_UNABLE_TO_ACTIVE_IN__BAD_WEATHER_CHOICE (23u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_PROHIBITION_REQUEST_FOR_RDF_CHOICE (24u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_LIGHTS_OFF_PLEASE_CHOICE (25u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER________________________CHOICE (26u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER___DRIVER__DROWSY_OR__DISTRACTED_CHOICE (27u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_HWA_RECOMMEND_CHOICE (28u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_LANE_MISSING_CHOICE (29u)
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER__________________________0X1_F_____________________0X20___________________0X21___________________0X22___________________________________________0X23_________________________0X24___________________0X25____________________CHOICE (30u)

#define ECU_ACC_31_A_ACC_DRIVER_HANDS_OFF_STATUS_HANDS_OFF_CHOICE (0u)
#define ECU_ACC_31_A_ACC_DRIVER_HANDS_OFF_STATUS_HANDS_ON__LEVEL1_CHOICE (1u)
#define ECU_ACC_31_A_ACC_DRIVER_HANDS_OFF_STATUS_HAND_ON__LEVEL2_CHOICE (2u)
#define ECU_ACC_31_A_ACC_DRIVER_HANDS_OFF_STATUS_UNKOWN_CHOICE (3u)

#define ECU_ACC_31_A_ACC_TARGET_BASED_LATERAL_CONTROL_NO_LATERAL_CONTROL_CHOICE (0u)
#define ECU_ACC_31_A_ACC_TARGET_BASED_LATERAL_CONTROL_AROUND__BASED_CHOICE (1u)
#define ECU_ACC_31_A_ACC_TARGET_BASED_LATERAL_CONTROL_LANE_BASED_CHOICE (2u)
#define ECU_ACC_31_A_ACC_TARGET_BASED_LATERAL_CONTROL_TARGET_BASED_CHOICE (3u)

#define ECU_ACC_31_A_ACC_EMERGENCY_LIGHTING_REQUEST_NO_REQUEST_CHOICE (0u)
#define ECU_ACC_31_A_ACC_EMERGENCY_LIGHTING_REQUEST_LEVEL1_CHOICE (1u)
#define ECU_ACC_31_A_ACC_EMERGENCY_LIGHTING_REQUEST_LEVEL2_CHOICE (2u)
#define ECU_ACC_31_A_ACC_EMERGENCY_LIGHTING_REQUEST_OFF_CHOICE (3u)

#define ECU_ACC_31_A_ACC_LL_LANE_DETECTION_NOT_DETECTED_CHOICE (0u)
#define ECU_ACC_31_A_ACC_LL_LANE_DETECTION_DASHED_CHOICE (1u)
#define ECU_ACC_31_A_ACC_LL_LANE_DETECTION_SOLID_CHOICE (2u)
#define ECU_ACC_31_A_ACC_LL_LANE_DETECTION_FENCE_ROAD_EDGE_CHOICE (3u)

#define ECU_ACC_31_A_ADC_ECAS_MODE_REQ_NO__REQUEST_CHOICE (0u)
#define ECU_ACC_31_A_ADC_ECAS_MODE_REQ_AUTO_DISABLE_CHOICE (1u)
#define ECU_ACC_31_A_ADC_ECAS_MODE_REQ_MANUAL_DISABLE_CHOICE (2u)
#define ECU_ACC_31_A_ADC_ECAS_MODE_REQ_DISABLE_CHOICE (3u)
#define ECU_ACC_31_A_ADC_ECAS_MODE_REQ_STANDARD_HEIGHT_CHOICE (4u)
#define ECU_ACC_31_A_ADC_ECAS_MODE_REQ_RESERVED_CHOICE (5u)

#define ECU_ACC_31_A_ACC_RR_LANE_DETECTION_NOT_DETECTED_CHOICE (0u)
#define ECU_ACC_31_A_ACC_RR_LANE_DETECTION_DASHED_CHOICE (1u)
#define ECU_ACC_31_A_ACC_RR_LANE_DETECTION_SOLID_CHOICE (2u)
#define ECU_ACC_31_A_ACC_RR_LANE_DETECTION_FENCE_ROAD_EDGE_CHOICE (3u)

#define ECU_ACC_31_A_ACC_HIGH_BEAM_CONTROL_NO__REQUEST_CHOICE (0u)
#define ECU_ACC_31_A_ACC_HIGH_BEAM_CONTROL_REQUEST_CHOICE (1u)
#define ECU_ACC_31_A_ACC_HIGH_BEAM_CONTROL_RESERVED_CHOICE (2u)

#define ECU_ACC_31_A_ACC_ELK_MODE__OFF_CHOICE (0u)
#define ECU_ACC_31_A_ACC_ELK_MODE__PASSIVE_CHOICE (1u)
#define ECU_ACC_31_A_ACC_ELK_MODE_ACTIVE_CHOICE (2u)
#define ECU_ACC_31_A_ACC_ELK_MODE__FAULT_CHOICE (3u)
#define ECU_ACC_31_A_ACC_ELK_MODE__RESERVED__CHOICE (4u)

#define ECU_ACC_31_A_ACC_ELK_INTERVENTION_MODE__OFF_CHOICE (0u)
#define ECU_ACC_31_A_ACC_ELK_INTERVENTION_MODE___ROAD_EDGE_CHOICE (1u)
#define ECU_ACC_31_A_ACC_ELK_INTERVENTION_MODE___OVERTAKING_CHOICE (2u)
#define ECU_ACC_31_A_ACC_ELK_INTERVENTION_MODE___ONCOMING__CHOICE (3u)

#define ECU_ACC_31_A_ACC_ELK_ENABLE_STATUS_OFF_CHOICE (0u)
#define ECU_ACC_31_A_ACC_ELK_ENABLE_STATUS_ON_CHOICE (1u)

#define ECU_ACC_31_A_ACC_LNG_TAKE_OVER_REQ_REASON________CHOICE (0u)
#define ECU_ACC_31_A_ACC_LNG_TAKE_OVER_REQ_REASON____________________CHOICE (1u)
#define ECU_ACC_31_A_ACC_LNG_TAKE_OVER_REQ_REASON________________2_CHOICE (2u)
#define ECU_ACC_31_A_ACC_LNG_TAKE_OVER_REQ_REASON______________________CHOICE (3u)
#define ECU_ACC_31_A_ACC_LNG_TAKE_OVER_REQ_REASON____________________________________________CHOICE (4u)
#define ECU_ACC_31_A_ACC_LNG_TAKE_OVER_REQ_REASON________________5_CHOICE (5u)
#define ECU_ACC_31_A_ACC_LNG_TAKE_OVER_REQ_REASON______________________________________CHOICE (6u)
#define ECU_ACC_31_A_ACC_LNG_TAKE_OVER_REQ_REASON_____________ESP__TCS__AEB_________CHOICE (7u)
#define ECU_ACC_31_A_ACC_LNG_TAKE_OVER_REQ_REASON______________CHOICE (8u)
#define ECU_ACC_31_A_ACC_LNG_TAKE_OVER_REQ_REASON_____ODD_____CHOICE (9u)
#define ECU_ACC_31_A_ACC_LNG_TAKE_OVER_REQ_REASON______CHOICE (10u)

#define ECU_GW_355_EMS_CRUISE_SWITCH_ON_OFF_OFF_CHOICE (0u)
#define ECU_GW_355_EMS_CRUISE_SWITCH_ON_OFF_ON_CHOICE (1u)

#define ECU_GW_355_EMS_CRUISE_SWITCH_RESUME_INACTIVE_CHOICE (0u)
#define ECU_GW_355_EMS_CRUISE_SWITCH_RESUME_ACITVE_CHOICE (1u)

#define ECU_GW_355_EMS_CRUISE_SWITCH_CANCEL_INACTIVE_CHOICE (0u)
#define ECU_GW_355_EMS_CRUISE_SWITCH_CANCEL_ACITVE_CHOICE (1u)

#define ECU_GW_355_EMS_CRUISE_SWITCH_SET_INACTIVE_CHOICE (0u)
#define ECU_GW_355_EMS_CRUISE_SWITCH_SET_ACITVE_CHOICE (1u)

#define ECU_GW_355_EMS_CRUISE_DISTANCE_INACTIVE_CHOICE (0u)
#define ECU_GW_355_EMS_CRUISE_DISTANCE_ACITVE_CHOICE (1u)

#define ECU_GW_3_AF_HU_SLOPE_GRADIENT_10M__UNKNOWN_CHOICE (767u)

#define ECU_GW_3_AF_HU_SLOPE_GRADIENT_20M__UNKNOWN_CHOICE (1023u)

#define ECU_GW_3_AF_HU_SLOPE_GRADIENT_30M__UNKNOWN_CHOICE (1023u)

#define ECU_GW_3_AF_HU_SLOPE_GRADIENT_40M__UNKNOWN_CHOICE (1023u)

#define ECU_GW_3_AF_HU_SLOPE_GRADIENT_50M__UNKNOWN_CHOICE (1023u)

#define ECU_GW_3_AF_HU_SLOPE_GRADIENT_100M__UNKNOWN_CHOICE (1023u)

#define ECU_GW_3_AF_HU_INTERVAL_VELOCITY_INFO__UNKNOWN_CHOICE (0u)
#define ECU_GW_3_AF_HU_INTERVAL_VELOCITY_INFO________________CHOICE (1u)
#define ECU_GW_3_AF_HU_INTERVAL_VELOCITY_INFO________________0X3_RESERVED_CHOICE (2u)

#define ECU_GW_3_AF_HU_INTERVAL_VELOCITY_DIS__0_600M_CHOICE (0u)
#define ECU_GW_3_AF_HU_INTERVAL_VELOCITY_DIS_OUT_OF__RANGE_CHOICE (61u)
#define ECU_GW_3_AF_HU_INTERVAL_VELOCITY_DIS_RESERVED_CHOICE (62u)
#define ECU_GW_3_AF_HU_INTERVAL_VELOCITY_DIS_UNKNOWN_CHOICE (63u)

#define ECU_GW_3_AF_HU_ACCIDENT_PRONE_UNKNOWN_CHOICE (0u)
#define ECU_GW_3_AF_HU_ACCIDENT_PRONE__________________CHOICE (1u)
#define ECU_GW_3_AF_HU_ACCIDENT_PRONE_RESERVE_0X3_INVALID_CHOICE (2u)

#define ECU_GW_3_AF_HU_ACCIDENT_PRONE_DISTANCE__0_600M_CHOICE (0u)
#define ECU_GW_3_AF_HU_ACCIDENT_PRONE_DISTANCE_OUT_OF__RANGE_CHOICE (61u)
#define ECU_GW_3_AF_HU_ACCIDENT_PRONE_DISTANCE_RESERVED_CHOICE (62u)
#define ECU_GW_3_AF_HU_ACCIDENT_PRONE_DISTANCE_UNKNOWN_CHOICE (63u)

#define ECU_GW_3_AF_HU_BRIDGE_INFO_UNKNOWN_CHOICE (0u)
#define ECU_GW_3_AF_HU_BRIDGE_INFO__________1_CHOICE (1u)
#define ECU_GW_3_AF_HU_BRIDGE_INFO________CHOICE (2u)
#define ECU_GW_3_AF_HU_BRIDGE_INFO__________3_CHOICE (3u)

#define ECU_GW_3_AF_HU_BRIDGE_DIS__0_600M_CHOICE (0u)
#define ECU_GW_3_AF_HU_BRIDGE_DIS_OUT_OF__RANGE_CHOICE (61u)
#define ECU_GW_3_AF_HU_BRIDGE_DIS_RESERVED_CHOICE (62u)
#define ECU_GW_3_AF_HU_BRIDGE_DIS_UNKNOWN_CHOICE (63u)

#define ECU_GW_3_AF_HU_SERVICE_ROAD_UNKNOWN_CHOICE (0u)
#define ECU_GW_3_AF_HU_SERVICE_ROAD________________CHOICE (1u)
#define ECU_GW_3_AF_HU_SERVICE_ROAD_RESERVE_CHOICE (2u)
#define ECU_GW_3_AF_HU_SERVICE_ROAD_INVALID_CHOICE (3u)

#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_UNLIMITED_CHOICE (0u)
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_SL_5_CHOICE (1u)
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_SL_10_CHOICE (2u)
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_SL_160_CHOICE (32u)
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_UNKNOWN_CHOICE (254u)
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_INVALID_CHOICE (255u)

#define ECU_GW_3_AF_HU_ENTER_RAMP_INFO_UNKNOWN_CHOICE (0u)
#define ECU_GW_3_AF_HU_ENTER_RAMP_INFO__________1_CHOICE (1u)
#define ECU_GW_3_AF_HU_ENTER_RAMP_INFO________CHOICE (2u)
#define ECU_GW_3_AF_HU_ENTER_RAMP_INFO__________3_CHOICE (3u)

#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_UNITS_UNKNOWN__CHOICE (0u)
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_UNITS_UNIT_KPH_CHOICE (1u)
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_UNITS_UNIT_MPH_CHOICE (2u)
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_UNITS_RESERVED_CHOICE (3u)

#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_STATUS_VALID_CHOICE (0u)
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_STATUS_INVALID_CHOICE (1u)
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_STATUS_RESERVED_2_CHOICE (2u)
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_STATUS_RESERVED_3_CHOICE (3u)

#define ECU_GW_3_AF_HU_RAMP_INFO_UNKNOWN_CHOICE (0u)
#define ECU_GW_3_AF_HU_RAMP_INFO________________________CHOICE (1u)
#define ECU_GW_3_AF_HU_RAMP_INFO______________________CHOICE (2u)
#define ECU_GW_3_AF_HU_RAMP_INFO____________________CHOICE (3u)

#define ECU_GW_3_AF_HU_NAV_STATUS_NORMAL_CHOICE (0u)
#define ECU_GW_3_AF_HU_NAV_STATUS_ERROR_CHOICE (1u)

#define ECU_GW_3_AF_HU_ENTER_CURVE_INFO__UNKNOWN_CHOICE (0u)
#define ECU_GW_3_AF_HU_ENTER_CURVE_INFO__________1_CHOICE (1u)
#define ECU_GW_3_AF_HU_ENTER_CURVE_INFO________CHOICE (2u)
#define ECU_GW_3_AF_HU_ENTER_CURVE_INFO__________3_CHOICE (3u)

#define ECU_GW_3_AF_HU_NAV_CURRENT_ROAD_TYPE__0X0__ROAD__TYPE__UNKNOWN___SMALL_ROAD___WALKING__STREET_CHOICE (0u)
#define ECU_GW_3_AF_HU_NAV_CURRENT_ROAD_TYPE______________CHOICE (1u)
#define ECU_GW_3_AF_HU_NAV_CURRENT_ROAD_TYPE____________2_CHOICE (2u)
#define ECU_GW_3_AF_HU_NAV_CURRENT_ROAD_TYPE____________3_CHOICE (3u)
#define ECU_GW_3_AF_HU_NAV_CURRENT_ROAD_TYPE______4_CHOICE (4u)
#define ECU_GW_3_AF_HU_NAV_CURRENT_ROAD_TYPE________CHOICE (5u)
#define ECU_GW_3_AF_HU_NAV_CURRENT_ROAD_TYPE________________________________________CHOICE (6u)
#define ECU_GW_3_AF_HU_NAV_CURRENT_ROAD_TYPE______7_CHOICE (7u)

#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_TYPE_UNKNOWN_CHOICE (0u)
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_TYPE_SPEED__LIMIT__SIGN_CHOICE (1u)
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_TYPE_ROAD__CAMERA_CHOICE (2u)
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_TYPE_INTERVAL__VELOCITY_CHOICE (3u)

#define ECU_GW_3_AF_HU_CURVE_DISTANCE__0_600M_CHOICE (0u)
#define ECU_GW_3_AF_HU_CURVE_DISTANCE_OUT_OF__RANGE_CHOICE (61u)
#define ECU_GW_3_AF_HU_CURVE_DISTANCE_RESERVED_CHOICE (62u)
#define ECU_GW_3_AF_HU_CURVE_DISTANCE_UNKNOWN_CHOICE (63u)

#define ECU_GW_3_AF_HU_RAMP_DISTANCE__0_3000M_CHOICE (0u)
#define ECU_GW_3_AF_HU_RAMP_DISTANCE_RESERVED_CHOICE (301u)
#define ECU_GW_3_AF_HU_RAMP_DISTANCE_OUT_OF__RANGE_CHOICE (1022u)
#define ECU_GW_3_AF_HU_RAMP_DISTANCE_UNKNOWN_CHOICE (1023u)

#define ECU_GW_3_AF_HU_NOVICE_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_3_AF_HU_NOVICE_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_3_AF_HU_NOVICE_ENABLE_ON_CHOICE (2u)
#define ECU_GW_3_AF_HU_NOVICE_ENABLE_RESERVED_CHOICE (3u)

#define ECU_GW_3_AF_HU_SPEED_LIMIT_DISTANCE__0_600M_CHOICE (0u)
#define ECU_GW_3_AF_HU_SPEED_LIMIT_DISTANCE_OUT_OF__RANGE_CHOICE (61u)
#define ECU_GW_3_AF_HU_SPEED_LIMIT_DISTANCE_RESERVED_CHOICE (62u)
#define ECU_GW_3_AF_HU_SPEED_LIMIT_DISTANCE_UNKNOWN_CHOICE (63u)

#define ECU_GW_3_AF_HU_SERVICE_ROAD_DIS__0_600M_CHOICE (0u)
#define ECU_GW_3_AF_HU_SERVICE_ROAD_DIS_OUT_OF__RANGE_CHOICE (61u)
#define ECU_GW_3_AF_HU_SERVICE_ROAD_DIS_RESERVED_CHOICE (62u)
#define ECU_GW_3_AF_HU_SERVICE_ROAD_DIS_UNKNOWN_CHOICE (63u)

#define ECU_GW_3_AF_HU_EHP_HEART_FLAG______0_CHOICE (0u)
#define ECU_GW_3_AF_HU_EHP_HEART_FLAG______1_CHOICE (1u)

#define ECU_GW_3_AF_HU_EHR_HEART_FLAG______0_CHOICE (0u)
#define ECU_GW_3_AF_HU_EHR_HEART_FLAG______1_CHOICE (1u)

#define ECU_GW_3_B3_BCM_DOOR_HANDLE_TIME_DIFFERENCE_0MS_CHOICE (0u)
#define ECU_GW_3_B3_BCM_DOOR_HANDLE_TIME_DIFFERENCE_5MS_CHOICE (1u)
#define ECU_GW_3_B3_BCM_DOOR_HANDLE_TIME_DIFFERENCE______CHOICE (251u)
#define ECU_GW_3_B3_BCM_DOOR_HANDLE_TIME_DIFFERENCE_INVALID_CHOICE (255u)

#define ECU_GW_3_B3_BCM_PASSENGE_DOOR_HANDLE_STATUS______0_CHOICE (0u)
#define ECU_GW_3_B3_BCM_PASSENGE_DOOR_HANDLE_STATUS__________1_CHOICE (1u)
#define ECU_GW_3_B3_BCM_PASSENGE_DOOR_HANDLE_STATUS__________2_CHOICE (2u)
#define ECU_GW_3_B3_BCM_PASSENGE_DOOR_HANDLE_STATUS______3_CHOICE (3u)

#define ECU_GW_3_B3_BCM_RIGHT_REAR_DOOR_HANDLE_STATUS______0_CHOICE (0u)
#define ECU_GW_3_B3_BCM_RIGHT_REAR_DOOR_HANDLE_STATUS__________1_CHOICE (1u)
#define ECU_GW_3_B3_BCM_RIGHT_REAR_DOOR_HANDLE_STATUS__________2_CHOICE (2u)
#define ECU_GW_3_B3_BCM_RIGHT_REAR_DOOR_HANDLE_STATUS______3_CHOICE (3u)

#define ECU_GW_3_B3_BCM_REAR_FOGLAMP_STATUS_OFF_CHOICE (0u)
#define ECU_GW_3_B3_BCM_REAR_FOGLAMP_STATUS_ON_CHOICE (1u)
#define ECU_GW_3_B3_BCM_REAR_FOGLAMP_STATUS_NOT_USED_CHOICE (2u)
#define ECU_GW_3_B3_BCM_REAR_FOGLAMP_STATUS_ERROR_CHOICE (3u)

#define ECU_GW_3_B3_BCM_BRAKE_LAMP_ERROR________0_CHOICE (0u)
#define ECU_GW_3_B3_BCM_BRAKE_LAMP_ERROR________1_CHOICE (1u)

#define ECU_GW_3_B3_BCM_RIGHT_REAR_FOGLAMP_ERROR________0_CHOICE (0u)
#define ECU_GW_3_B3_BCM_RIGHT_REAR_FOGLAMP_ERROR________1_CHOICE (1u)

#define ECU_GW_3_B3_BCM_LEFT_REAR_FOGLAMP_ERROR________0_CHOICE (0u)
#define ECU_GW_3_B3_BCM_LEFT_REAR_FOGLAMP_ERROR________1_CHOICE (1u)

#define ECU_GW_3_B3_BCM_REAR_POSITION_LAMP_ERROR________0_CHOICE (0u)
#define ECU_GW_3_B3_BCM_REAR_POSITION_LAMP_ERROR________1_CHOICE (1u)

#define ECU_GW_3_B3_LCM_REVERSE_LIGHT_STS_OFF_CHOICE (0u)
#define ECU_GW_3_B3_LCM_REVERSE_LIGHT_STS_ON_CHOICE (1u)
#define ECU_GW_3_B3_LCM_REVERSE_LIGHT_STS_NOT_USED_CHOICE (2u)
#define ECU_GW_3_B3_LCM_REVERSE_LIGHT_STS_ERROR_CHOICE (3u)

#define ECU_GW_3_B3_BCM_REVERSE_LAMP_ERROR________0_CHOICE (0u)
#define ECU_GW_3_B3_BCM_REVERSE_LAMP_ERROR________1_CHOICE (1u)

#define ECU_GW_3_B3_BCM_CHM_LAMP_ERROR________0_CHOICE (0u)
#define ECU_GW_3_B3_BCM_CHM_LAMP_ERROR________1_CHOICE (1u)

#define ECU_GW_3_BD_HU_CSLA_ENABLE_OFF_CHOICE (0u)
#define ECU_GW_3_BD_HU_CSLA_ENABLE_ALL__SPEED__LIMIT_CHOICE (1u)
#define ECU_GW_3_BD_HU_CSLA_ENABLE_ROAD__CAMERA_CHOICE (2u)
#define ECU_GW_3_BD_HU_CSLA_ENABLE_INVALID_CHOICE (3u)

#define ECU_GW_3_BD_HU_HWA_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_HWA_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_3_BD_HU_HWA_ENABLE_ON_CHOICE (2u)
#define ECU_GW_3_BD_HU_HWA_ENABLE_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_IRLC_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_IRLC_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_3_BD_HU_IRLC_ENABLE_ON_CHOICE (2u)
#define ECU_GW_3_BD_HU_IRLC_ENABLE_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_ELK_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_ELK_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_3_BD_HU_ELK_ENABLE_ON_CHOICE (2u)
#define ECU_GW_3_BD_HU_ELK_ENABLE_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_LANE_CHANGE_REQ_NO_REQUEST_CHOICE (0u)
#define ECU_GW_3_BD_HU_LANE_CHANGE_REQ_LANE_CHANGE_TO_LEFT_CHOICE (1u)
#define ECU_GW_3_BD_HU_LANE_CHANGE_REQ___LANE_CHANGE_TO_RIGHT_CHOICE (2u)
#define ECU_GW_3_BD_HU_LANE_CHANGE_REQ_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_ESS_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_ESS_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_3_BD_HU_ESS_ENABLE_ON_CHOICE (2u)
#define ECU_GW_3_BD_HU_ESS_ENABLE_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_TLA_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_TLA_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_3_BD_HU_TLA_ENABLE_ON_CHOICE (2u)
#define ECU_GW_3_BD_HU_TLA_ENABLE_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_ADS_ROAD_VOICE_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_ADS_ROAD_VOICE_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_3_BD_HU_ADS_ROAD_VOICE_ENABLE_ON_CHOICE (2u)
#define ECU_GW_3_BD_HU_ADS_ROAD_VOICE_ENABLE___RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_ADS_RESCUE_CONFIRM_NO_RESPONSE_CHOICE (0u)
#define ECU_GW_3_BD_HU_ADS_RESCUE_CONFIRM_DO_NOT_NEED_RESCUE_CHOICE (1u)
#define ECU_GW_3_BD_HU_ADS_RESCUE_CONFIRM_NEED_RESCUE_CHOICE (2u)
#define ECU_GW_3_BD_HU_ADS_RESCUE_CONFIRM_CANCEL_CHOICE (3u)

#define ECU_GW_3_BD_HU_UDLC_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_UDLC_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_3_BD_HU_UDLC_ENABLE_ON_CHOICE (2u)
#define ECU_GW_3_BD_HU_UDLC_ENABLE_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_TRANSPARENT_VALUE_CAR_REQUEST_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_TRANSPARENT_VALUE_CAR_REQUEST_0____100___________0X66_0X7F____RESERVED_CHOICE (1u)

#define ECU_GW_3_BD_HU_3_DAVM_REQ_DISABLE_CHOICE (0u)
#define ECU_GW_3_BD_HU_3_DAVM_REQ_ENABLE_CHOICE (1u)
#define ECU_GW_3_BD_HU_3_DAVM_REQ_RESERVED_CHOICE (2u)
#define ECU_GW_3_BD_HU_3_DAVM_REQ_INVALID_CHOICE (3u)

#define ECU_GW_3_BD_HU_ADS_LANE_CHANGE_VOICE_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_ADS_LANE_CHANGE_VOICE_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_3_BD_HU_ADS_LANE_CHANGE_VOICE_ENABLE_ON_CHOICE (2u)
#define ECU_GW_3_BD_HU_ADS_LANE_CHANGE_VOICE_ENABLE___RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_ADS_SAFE_VOICE_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_ADS_SAFE_VOICE_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_3_BD_HU_ADS_SAFE_VOICE_ENABLE_ON_CHOICE (2u)
#define ECU_GW_3_BD_HU_ADS_SAFE_VOICE_ENABLE___RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_AVM_MAP_DISPLAY_FEEDBACK_RESERVED_CHOICE (0u)
#define ECU_GW_3_BD_HU_AVM_MAP_DISPLAY_FEEDBACK_OPEN_CHOICE (1u)
#define ECU_GW_3_BD_HU_AVM_MAP_DISPLAY_FEEDBACK_CLOSED_CHOICE (2u)
#define ECU_GW_3_BD_HU_AVM_MAP_DISPLAY_FEEDBACK_INVALID_CHOICE (3u)

#define ECU_GW_3_BD_HU_REBROADCAST_REQ_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_REBROADCAST_REQ_QUIT_CHOICE (1u)
#define ECU_GW_3_BD_HU_REBROADCAST_REQ_ENTER_CHOICE (2u)
#define ECU_GW_3_BD_HU_REBROADCAST_REQ_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_NO__REQUEST_CHOICE (0u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_ALL__LEFT_CHOICE (1u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_ALL__RIGHT_CHOICE (2u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_ALL___FRONT_CHOICE (3u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_ALL__REAR_CHOICE (4u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_180____FRONT_CHOICE (5u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_LEFT__RIGHT_CHOICE (6u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_180___REAR_CHOICE (7u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_ALL_3_D_FRONT_CHOICE (8u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_ALL_3_D_REAR_CHOICE (9u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_ALL_3_D_LEFT_CHOICE (10u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_ALL_3_D_RIGHT_CHOICE (11u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_ALL_3_D_LEFT_FRONT_CHOICE (12u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_ALL_3_D_RIGHT_FRONT_CHOICE (13u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_ALL_3_D_LEFT_REAR_CHOICE (14u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_ALL_3_D_RIGHT_REAR_CHOICE (15u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_ALL__FRONT_LOOKDOWN_CHOICE (16u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_ALL__REAR_LOOKDOWN_CHOICE (17u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_ALL__TOP_FRONT_CHOICE (18u)
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_RESERVED_CHOICE (19u)

#define ECU_GW_3_BD_HU_REAL_TIME_REQ_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_REAL_TIME_REQ_QUIT_CHOICE (1u)
#define ECU_GW_3_BD_HU_REAL_TIME_REQ_ENTER_CHOICE (2u)
#define ECU_GW_3_BD_HU_REAL_TIME_REQ_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_DVR_EDIT_SELECTED_NOT__SELECTED_CHOICE (0u)
#define ECU_GW_3_BD_HU_DVR_EDIT_SELECTED_SELECTED_CHOICE (1u)

#define ECU_GW_3_BD_HU_VISION_ANGLE_REQ_NO__REQUEST_CHOICE (0u)
#define ECU_GW_3_BD_HU_VISION_ANGLE_REQ_120_______CHOICE (1u)
#define ECU_GW_3_BD_HU_VISION_ANGLE_REQ_180_______CHOICE (2u)
#define ECU_GW_3_BD_HU_VISION_ANGLE_REQ_INVALID_CHOICE (3u)

#define ECU_GW_3_BD_HU_AUTO_VIEW_SET_OFF_CHOICE (0u)
#define ECU_GW_3_BD_HU_AUTO_VIEW_SET_ON_CHOICE (1u)

#define ECU_GW_3_BD_HU_SD_CAPACITY_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_SD_CAPACITY_QUIT_CHOICE (1u)
#define ECU_GW_3_BD_HU_SD_CAPACITY_DISPLAY_REQ_CHOICE (2u)
#define ECU_GW_3_BD_HU_SD_CAPACITY_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_SEEOFFANIMATION_NOTACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_SEEOFFANIMATION_ACTIVE_CHOICE (1u)

#define ECU_GW_3_BD_HU_TUID_REQ___NO_REQUEST_CHOICE (0u)
#define ECU_GW_3_BD_HU_TUID_REQ_REQUEST_CHOICE (1u)
#define ECU_GW_3_BD_HU_TUID_REQ___RESERVED_CHOICE (2u)
#define ECU_GW_3_BD_HU_TUID_REQ_INVALID_CHOICE (3u)

#define ECU_GW_3_BD_HU_REGISTER_STATUS_NO_REGISTER_CHOICE (0u)
#define ECU_GW_3_BD_HU_REGISTER_STATUS_REGISTER_SUCCEED_CHOICE (1u)
#define ECU_GW_3_BD_HU_REGISTER_STATUS_REGISTER_UNSUCCESSFUL_CHOICE (2u)
#define ECU_GW_3_BD_HU_REGISTER_STATUS_REGISTERED_CHOICE (3u)

#define ECU_GW_3_BD_HU_SURRONDING_MONITOR_DONE_NO__FEEDBACK_CHOICE (0u)
#define ECU_GW_3_BD_HU_SURRONDING_MONITOR_DONE_FINISHED_CHOICE (1u)

#define ECU_GW_3_BD_HU_BCALL_REQ_NO_REQUEST_CHOICE (0u)
#define ECU_GW_3_BD_HU_BCALL_REQ_CALL_UP__________CHOICE (1u)
#define ECU_GW_3_BD_HU_BCALL_REQ_HANG_UP_________0X3__RESERVED_CHOICE (2u)

#define ECU_GW_3_BD_HU_DVR_ERROR_RECORD_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_DVR_ERROR_RECORD_QUIT_CHOICE (1u)
#define ECU_GW_3_BD_HU_DVR_ERROR_RECORD_DISPLAY_REQ_CHOICE (2u)
#define ECU_GW_3_BD_HU_DVR_ERROR_RECORD_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_DVR_SYSTEM_IMPRINT_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_DVR_SYSTEM_IMPRINT_QUIT_CHOICE (1u)
#define ECU_GW_3_BD_HU_DVR_SYSTEM_IMPRINT_DISPLAY_REQ_CHOICE (2u)
#define ECU_GW_3_BD_HU_DVR_SYSTEM_IMPRINT_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_VC_VR_RECORDING_CHOICE (0u)
#define ECU_GW_3_BD_HU_VC_VR_RECOGNIZING_CHOICE (1u)
#define ECU_GW_3_BD_HU_VC_VR_DISPLAY_CHOICE (2u)
#define ECU_GW_3_BD_HU_VC_VR_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_HUD_POS_ADJUST_INC_NOT_ACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_HUD_POS_ADJUST_INC_ACTIVE_CHOICE (1u)

#define ECU_GW_3_BD_HU_HUD_POS_ADJUST_DEC_NOT_ACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_HUD_POS_ADJUST_DEC_ACTIVE_CHOICE (1u)

#define ECU_GW_3_BD_HU_COMPASS__0_360___CHOICE (0u)
#define ECU_GW_3_BD_HU_COMPASS___RESERVED_CHOICE (361u)
#define ECU_GW_3_BD_HU_COMPASS_INVALID__VALUE_CHOICE (511u)

#define ECU_GW_3_BD_HU_APA_ACTIVE_DISACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_APA_ACTIVE_ACTIVE_CHOICE (1u)

#define ECU_GW_3_BD_HU_REMOTE_DISP_STS_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_REMOTE_DISP_STS_ACTIVE_CHOICE (1u)

#define ECU_GW_3_BD_HU_LAEB_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_LAEB_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_3_BD_HU_LAEB_ENABLE_ON_CHOICE (2u)
#define ECU_GW_3_BD_HU_LAEB_ENABLE_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_INVALID_CHOICE (0u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_FM1_CHOICE (1u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_FM2_CHOICE (2u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_FM3_CHOICE (3u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_AM1_CHOICE (4u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_AM2_5_CHOICE (5u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_AM2_6_CHOICE (6u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_MW2_CHOICE (7u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_LW_CHOICE (8u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_OIRT_CHOICE (9u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO______10_CHOICE (10u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_HDD__AUDIO__________CHOICE (16u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_HDD__VIDEO_CHOICE (17u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_USB_____CHOICE (18u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_USB__VIDEO_CHOICE (19u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO__________20_CHOICE (20u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_AUX_CHOICE (21u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_DISC_CHOICE (22u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO____________CHOICE (23u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO__________24_CHOICE (24u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO__________25_CHOICE (25u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO__________26_CHOICE (26u)
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO______27_CHOICE (27u)

#define ECU_GW_3_BD_HU_APA_REMOTE_DISP_STS_OFF_CHOICE (0u)
#define ECU_GW_3_BD_HU_APA_REMOTE_DISP_STS_ON_CHOICE (1u)

#define ECU_GW_3_BD_HU_RADS_SWITCH_INVALID_CHOICE (0u)
#define ECU_GW_3_BD_HU_RADS_SWITCH_ON_CHOICE (1u)
#define ECU_GW_3_BD_HU_RADS_SWITCH_OFF_CHOICE (2u)
#define ECU_GW_3_BD_HU_RADS_SWITCH_SUSPEND_CHOICE (3u)

#define ECU_GW_3_BD_HU_LANGUAGE_SYNC_CHINESE_CHOICE (0u)
#define ECU_GW_3_BD_HU_LANGUAGE_SYNC_ENGLISH_CHOICE (1u)
#define ECU_GW_3_BD_HU_LANGUAGE_SYNC_RUSSIAN_CHOICE (2u)
#define ECU_GW_3_BD_HU_LANGUAGE_SYNC_ARABIC_____________CHOICE (3u)

#define ECU_GW_3_BD_HU_ASP_REMIND_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_ASP_REMIND_ENABLE_OFF_CHOICE (1u)
#define ECU_GW_3_BD_HU_ASP_REMIND_ENABLE_ON_CHOICE (2u)
#define ECU_GW_3_BD_HU_ASP_REMIND_ENABLE_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_PAC_MODE_SELECT_NORMAL_CHOICE (0u)
#define ECU_GW_3_BD_HU_PAC_MODE_SELECT_PARALLEL_CHOICE (1u)
#define ECU_GW_3_BD_HU_PAC_MODE_SELECT_ASISTANT_LINE_OFF_CHOICE (2u)
#define ECU_GW_3_BD_HU_PAC_MODE_SELECT_INVALID_CHOICE (3u)

#define ECU_GW_3_BD_HU_EXT_REMOTE_DETECT_UPLOAD_STATUS_INVALID_CHOICE (0u)
#define ECU_GW_3_BD_HU_EXT_REMOTE_DETECT_UPLOAD_STATUS_YES_CHOICE (1u)
#define ECU_GW_3_BD_HU_EXT_REMOTE_DETECT_UPLOAD_STATUS_NO_CHOICE (2u)
#define ECU_GW_3_BD_HU_EXT_REMOTE_DETECT_UPLOAD_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_ASP_MODE_SELECT_IDLE_CHOICE (0u)
#define ECU_GW_3_BD_HU_ASP_MODE_SELECT_HU_ASP_MODE_CHOICE (1u)
#define ECU_GW_3_BD_HU_ASP_MODE_SELECT_APP_ASP_MODE_CHOICE (2u)
#define ECU_GW_3_BD_HU_ASP_MODE_SELECT_CANCLE_CHOICE (3u)
#define ECU_GW_3_BD_HU_ASP_MODE_SELECT_RESERVED_CHOICE (4u)
#define ECU_GW_3_BD_HU_ASP_MODE_SELECT_INVALID_CHOICE (7u)

#define ECU_GW_3_BD_HU_CROSS_PARKING_MODE_SET_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_CROSS_PARKING_MODE_SET_BACK__IN_CHOICE (1u)
#define ECU_GW_3_BD_HU_CROSS_PARKING_MODE_SET_HEAD__IN_CHOICE (2u)
#define ECU_GW_3_BD_HU_CROSS_PARKING_MODE_SET_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_ASP_SWITCH_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_ASP_SWITCH_OFF_CHOICE (1u)
#define ECU_GW_3_BD_HU_ASP_SWITCH_ON_CHOICE (2u)
#define ECU_GW_3_BD_HU_ASP_SWITCH_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_APA_MODE_SELECT_PARALLEL__MODE_________CHOICE (0u)
#define ECU_GW_3_BD_HU_APA_MODE_SELECT_CROSS__MODE_________CHOICE (1u)
#define ECU_GW_3_BD_HU_APA_MODE_SELECT__POC__MODE__________CHOICE (2u)
#define ECU_GW_3_BD_HU_APA_MODE_SELECT_INVALID_CHOICE (3u)
#define ECU_GW_3_BD_HU_APA_MODE_SELECT_ECHELON__MODE___________CHOICE (4u)
#define ECU_GW_3_BD_HU_APA_MODE_SELECT_FUNCTION__OFF_CHOICE (5u)
#define ECU_GW_3_BD_HU_APA_MODE_SELECT_DEFAULT_CHOICE (6u)
#define ECU_GW_3_BD_HU_APA_MODE_SELECT_NO_SELECTION_CHOICE (7u)

#define ECU_GW_3_BD_HU_REAR_FOGLAMP_SET_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_REAR_FOGLAMP_SET_OFF_0X2_ON_0X3__RESERVE_CHOICE (1u)

#define ECU_GW_3_BD_HU_AUTO_HEAD_LI_SET_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_AUTO_HEAD_LI_SET_OFF_0X2________0X3________0X4__________0X5_0X7__RESERVE_CHOICE (1u)

#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_COLOUR_1_CHOICE (1u)
#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_COLOUR_2_CHOICE (2u)
#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_COLOUR_3_CHOICE (3u)
#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_COLOUR_4_CHOICE (4u)
#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_COLOUR_5_CHOICE (5u)
#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_COLOUR_6_CHOICE (6u)
#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_COLOUR_7_CHOICE (7u)
#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_COLOUR_8_CHOICE (8u)
#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_COLOUR_9_CHOICE (9u)
#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_COLOUR_10_CHOICE (10u)
#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_COLOUR_11_CHOICE (11u)
#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_COLOUR_12_CHOICE (12u)
#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_COLOUR_13_CHOICE (13u)
#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_COLOUR_14_CHOICE (14u)
#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_RESERVED_CHOICE (15u)

#define ECU_GW_3_BD_HU_AVMDVR_REPLAY_MODE_REQ_NO_REQUEST_CHOICE (0u)
#define ECU_GW_3_BD_HU_AVMDVR_REPLAY_MODE_REQ_ENTER_CYCLE_MODE_BROWSE_CHOICE (1u)
#define ECU_GW_3_BD_HU_AVMDVR_REPLAY_MODE_REQ_ENTER_EMERGENCY_MODE_BROWSE_CHOICE (2u)
#define ECU_GW_3_BD_HU_AVMDVR_REPLAY_MODE_REQ_ENTER_PHOTO_MODE_BROWSE_CHOICE (3u)
#define ECU_GW_3_BD_HU_AVMDVR_REPLAY_MODE_REQ_ENTER_DAS_MODE_BROWSE_CHOICE (4u)
#define ECU_GW_3_BD_HU_AVMDVR_REPLAY_MODE_REQ_RESERVED_5_CHOICE (5u)
#define ECU_GW_3_BD_HU_AVMDVR_REPLAY_MODE_REQ_RESERVED_6_CHOICE (6u)
#define ECU_GW_3_BD_HU_AVMDVR_REPLAY_MODE_REQ_RESERVED_7_CHOICE (7u)

#define ECU_GW_3_BD_HU_WHEEL_HUB_SET_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_WHEEL_HUB_SET_TYPE_1_CHOICE (1u)
#define ECU_GW_3_BD_HU_WHEEL_HUB_SET_TYPE_2_CHOICE (2u)
#define ECU_GW_3_BD_HU_WHEEL_HUB_SET_TYPE_3_CHOICE (3u)
#define ECU_GW_3_BD_HU_WHEEL_HUB_SET_TYPE_4_CHOICE (4u)
#define ECU_GW_3_BD_HU_WHEEL_HUB_SET___RESERVED_CHOICE (5u)

#define ECU_GW_3_BD_HU_LICENSE_NUMBER_SET_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_SET_SET__NUMBER_1_CHOICE (1u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_SET___SET__NUMBER_2_CHOICE (2u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_SET___SET__NUMBER_3_CHOICE (3u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_SET___SET__NUMBER_4_CHOICE (4u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_SET___SET__NUMBER_5_CHOICE (5u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_SET___SET__NUMBER_6_CHOICE (6u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_SET___SET__NUMBER_7_CHOICE (7u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_SET___SET__NUMBER_8_CHOICE (8u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_SET___SET__NUMBER_9_CHOICE (9u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_SET___RESERVED_CHOICE (10u)

#define ECU_GW_3_BD_HU_LICENSE_NUMBER_INACTIVE_CHOICE (0u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_A_CHOICE (1u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_B_CHOICE (2u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_C_CHOICE (3u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_D_CHOICE (4u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_E_CHOICE (5u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_F_CHOICE (6u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_G_CHOICE (7u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_H_CHOICE (8u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_I_CHOICE (9u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_J_CHOICE (10u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_K_CHOICE (11u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_L_CHOICE (12u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_M_CHOICE (13u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_N_CHOICE (14u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_O_CHOICE (15u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_P_CHOICE (16u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_Q_CHOICE (17u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_R_CHOICE (18u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_S_CHOICE (19u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_T_CHOICE (20u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_U_CHOICE (21u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_V_CHOICE (22u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_W_CHOICE (23u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_X_CHOICE (24u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_Y_CHOICE (25u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_Z_CHOICE (26u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_____27_CHOICE (27u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_____28_CHOICE (28u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_0_CHOICE (29u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_1_CHOICE (30u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_2_CHOICE (31u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_3_CHOICE (32u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_4_CHOICE (33u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_5_CHOICE (34u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_6_CHOICE (35u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_7_CHOICE (36u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_8_CHOICE (37u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_9_CHOICE (38u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____39_CHOICE (39u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____40_CHOICE (40u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____41_CHOICE (41u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____42_CHOICE (42u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____43_CHOICE (43u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____44_CHOICE (44u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____45_CHOICE (45u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____46_CHOICE (46u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____47_CHOICE (47u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____48_CHOICE (48u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____49_CHOICE (49u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____50_CHOICE (50u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____51_CHOICE (51u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____52_CHOICE (52u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____53_CHOICE (53u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____54_CHOICE (54u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____55_CHOICE (55u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____56_CHOICE (56u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____57_CHOICE (57u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____58_CHOICE (58u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____59_CHOICE (59u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____60_CHOICE (60u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____61_CHOICE (61u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____62_CHOICE (62u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____63_CHOICE (63u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____64_CHOICE (64u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____65_CHOICE (65u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____66_CHOICE (66u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____67_CHOICE (67u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____68_CHOICE (68u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____69_CHOICE (69u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____70_CHOICE (70u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____71_CHOICE (71u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____72_CHOICE (72u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____73_CHOICE (73u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____74_CHOICE (74u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____75_CHOICE (75u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER____76_CHOICE (76u)
#define ECU_GW_3_BD_HU_LICENSE_NUMBER___RESERVED_CHOICE (77u)

#define ECU_GW_3_BD_HU_LICENSE_NUMBER_CHECK_SUM___________1__________2_____________N__XOR_0X_FF_CHOICE (0u)

#define ECU_GW_3_BD_HU_APA_THEME_CHANGE_DAY_CHOICE (0u)
#define ECU_GW_3_BD_HU_APA_THEME_CHANGE_NIGHT_CHOICE (1u)
#define ECU_GW_3_BD_HU_APA_THEME_CHANGE_RACE_CHOICE (2u)
#define ECU_GW_3_BD_HU_APA_THEME_CHANGE_RESERVED_CHOICE (3u)

#define ECU_GW_3_BD_HU_DVR_UPDATE_REQ_NO_ACTION___________CHOICE (0u)
#define ECU_GW_3_BD_HU_DVR_UPDATE_REQ_UPDATE_REQ_____________CHOICE (1u)
#define ECU_GW_3_BD_HU_DVR_UPDATE_REQ_RESERVED_________2_CHOICE (2u)
#define ECU_GW_3_BD_HU_DVR_UPDATE_REQ_RESERVED_________3_CHOICE (3u)

#define ECU_GW_3_C4_HU_ENTER_TUNNEL_INFO__UNKNOWN_CHOICE (0u)
#define ECU_GW_3_C4_HU_ENTER_TUNNEL_INFO__________1_CHOICE (1u)
#define ECU_GW_3_C4_HU_ENTER_TUNNEL_INFO________CHOICE (2u)
#define ECU_GW_3_C4_HU_ENTER_TUNNEL_INFO__________3_CHOICE (3u)

#define ECU_GW_3_C4_HU_ROAD_CURVATURE___0_16192____0_00001_________________________CHOICE (0u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE__0_00001___0_16192_________________________CHOICE (512u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE__UNKNOWN_CHOICE (1023u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE__0____________0_______CHOICE (8191u)

#define ECU_GW_3_C4_HU_TUNNEL_DISTANCE__0_600M_CHOICE (0u)
#define ECU_GW_3_C4_HU_TUNNEL_DISTANCE_OUT_OF__RANGE_CHOICE (61u)
#define ECU_GW_3_C4_HU_TUNNEL_DISTANCE_RESERVED_CHOICE (62u)
#define ECU_GW_3_C4_HU_TUNNEL_DISTANCE_UNKNOWN_CHOICE (63u)

#define ECU_GW_3_C4_HU_ROAD_CURVATURE_FAR___0_16192____0_00001_________________________CHOICE (0u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_FAR__0_00001___0_16192_________________________CHOICE (512u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_FAR__UNKNOWN_CHOICE (1023u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_FAR__0____________0_______CHOICE (8191u)

#define ECU_GW_3_C4_HU_TUNNEL_LENGTH__0_600M_CHOICE (0u)
#define ECU_GW_3_C4_HU_TUNNEL_LENGTH_OUT_OF__RANGE_CHOICE (61u)
#define ECU_GW_3_C4_HU_TUNNEL_LENGTH_RESERVED_CHOICE (62u)
#define ECU_GW_3_C4_HU_TUNNEL_LENGTH_UNKNOWN_CHOICE (63u)

#define ECU_GW_3_C4_HU_NAV_GUIGANCE_STATUS__________________CHOICE (0u)
#define ECU_GW_3_C4_HU_NAV_GUIGANCE_STATUS________________CHOICE (1u)
#define ECU_GW_3_C4_HU_NAV_GUIGANCE_STATUS_RESERVED_2_CHOICE (2u)
#define ECU_GW_3_C4_HU_NAV_GUIGANCE_STATUS_RESERVED_3_CHOICE (3u)

#define ECU_GW_3_C4_HU_RAMP_SIDE_UNKNOWN_CHOICE (0u)
#define ECU_GW_3_C4_HU_RAMP_SIDE__________1_CHOICE (1u)
#define ECU_GW_3_C4_HU_RAMP_SIDE__________2_CHOICE (2u)
#define ECU_GW_3_C4_HU_RAMP_SIDE__________3_CHOICE (3u)

#define ECU_GW_3_C4_HU_FORWARD_ROAD_TYPE__0X0__ROAD__TYPE__UNKNOWN___SMALL_ROAD___WALKING__STREET_CHOICE (0u)
#define ECU_GW_3_C4_HU_FORWARD_ROAD_TYPE______________CHOICE (1u)
#define ECU_GW_3_C4_HU_FORWARD_ROAD_TYPE____________2_CHOICE (2u)
#define ECU_GW_3_C4_HU_FORWARD_ROAD_TYPE____________3_CHOICE (3u)
#define ECU_GW_3_C4_HU_FORWARD_ROAD_TYPE______4_CHOICE (4u)
#define ECU_GW_3_C4_HU_FORWARD_ROAD_TYPE________CHOICE (5u)
#define ECU_GW_3_C4_HU_FORWARD_ROAD_TYPE________________________________________CHOICE (6u)
#define ECU_GW_3_C4_HU_FORWARD_ROAD_TYPE______7_CHOICE (7u)

#define ECU_GW_3_C4_HU_LANE_CNT_UNKNOWN_0X1_0X5___________________0X6_________6__0X7____________________________CHOICE (0u)

#define ECU_GW_3_C4_HU_TOLL_INFO_______________CHOICE (0u)
#define ECU_GW_3_C4_HU_TOLL_INFO______________CHOICE (1u)
#define ECU_GW_3_C4_HU_TOLL_INFO______CHOICE (2u)
#define ECU_GW_3_C4_HU_TOLL_INFO_INVALID_CHOICE (3u)

#define ECU_GW_3_C4_HU_TOLL_DIS__0_600M_CHOICE (0u)
#define ECU_GW_3_C4_HU_TOLL_DIS_OUT_OF__RANGE_CHOICE (61u)
#define ECU_GW_3_C4_HU_TOLL_DIS_RESERVED_CHOICE (62u)
#define ECU_GW_3_C4_HU_TOLL_DIS_UNKNOWN_CHOICE (63u)

#define ECU_GW_3_C4_HU_ROAD_TRAFFIC_FLOW_UNKNOWN_CHOICE (0u)
#define ECU_GW_3_C4_HU_ROAD_TRAFFIC_FLOW______1_CHOICE (1u)
#define ECU_GW_3_C4_HU_ROAD_TRAFFIC_FLOW______2_CHOICE (2u)
#define ECU_GW_3_C4_HU_ROAD_TRAFFIC_FLOW________0X4___________0X5__________0X6_RESERVED_0X7_INVALID_CHOICE (3u)

#define ECU_GW_3_C4_HU_MAP_DATA_UPDATE_STATUS________CHOICE (0u)
#define ECU_GW_3_C4_HU_MAP_DATA_UPDATE_STATUS_1___________CHOICE (1u)
#define ECU_GW_3_C4_HU_MAP_DATA_UPDATE_STATUS_3___________CHOICE (2u)
#define ECU_GW_3_C4_HU_MAP_DATA_UPDATE_STATUS_6___________CHOICE (3u)
#define ECU_GW_3_C4_HU_MAP_DATA_UPDATE_STATUS_1_________CHOICE (4u)
#define ECU_GW_3_C4_HU_MAP_DATA_UPDATE_STATUS__RESERVED_CHOICE (5u)
#define ECU_GW_3_C4_HU_MAP_DATA_UPDATE_STATUS_INVALID_CHOICE (7u)

#define ECU_GW_3_C4_HU_TO_NUMCHANGE_OF_LANES_DIST__0_600M_CHOICE (0u)
#define ECU_GW_3_C4_HU_TO_NUMCHANGE_OF_LANES_DIST_OUT_OF__RANGE_CHOICE (61u)
#define ECU_GW_3_C4_HU_TO_NUMCHANGE_OF_LANES_DIST_RESERVED_CHOICE (62u)
#define ECU_GW_3_C4_HU_TO_NUMCHANGE_OF_LANES_DIST_UNKNOWN_CHOICE (63u)

#define ECU_GW_3_C4_HU_LANE_CHANGTYPE_NO_CHANGE__0X1__MERGE_CHOICE (0u)
#define ECU_GW_3_C4_HU_LANE_CHANGTYPE_SEPARATE___0X3_INVALID_CHOICE (2u)

#define ECU_GW_3_C4_HU_ROAD_CURVATURE_10M___0_16192____0_00001_________________________CHOICE (0u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_10M__0_00001___0_16192_________________________CHOICE (512u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_10M__UNKNOWN_CHOICE (1023u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_10M__0____________0_______CHOICE (8191u)

#define ECU_GW_3_C4_HU_ROAD_CURVATURE_20M___0_16192____0_00001_________________________CHOICE (0u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_20M__0_00001___0_16192_________________________CHOICE (512u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_20M__UNKNOWN_CHOICE (1279u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_20M__0____________0_______CHOICE (8191u)

#define ECU_GW_3_C4_HU_ROAD_CURVATURE_30M___0_16192____0_00001_________________________CHOICE (0u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_30M__0_00001___0_16192_________________________CHOICE (512u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_30M__UNKNOWN_CHOICE (1535u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_30M__0____________0_______CHOICE (8191u)

#define ECU_GW_3_C4_HU_ROAD_CURVATURE_40M___0_16192____0_00001_________________________CHOICE (0u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_40M__0_00001___0_16192_________________________CHOICE (512u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_40M__UNKNOWN_CHOICE (1791u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_40M__0____________0_______CHOICE (8191u)

#define ECU_GW_3_C4_HU_ROAD_CURVATURE_50M___0_16192____0_00001_________________________CHOICE (0u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_50M__0_00001___0_16192_________________________CHOICE (512u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_50M__UNKNOWN_CHOICE (2047u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_50M__0____________0_______CHOICE (8191u)

#define ECU_GW_3_C4_HU_ROAD_CURVATURE_60M___0_16192____0_00001_________________________CHOICE (0u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_60M__0_00001___0_16192_________________________CHOICE (512u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_60M__UNKNOWN_CHOICE (2303u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_60M__0____________0_______CHOICE (8191u)

#define ECU_GW_3_C4_HU_ROAD_CURVATURE_70M___0_16192____0_00001_________________________CHOICE (0u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_70M__0_00001___0_16192_________________________CHOICE (512u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_70M__UNKNOWN_CHOICE (2559u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_70M__0____________0_______CHOICE (8191u)

#define ECU_GW_3_C4_HU_ROAD_CURVATURE_80M___0_16192____0_00001_________________________CHOICE (0u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_80M__0_00001___0_16192_________________________CHOICE (512u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_80M__UNKNOWN_CHOICE (4351u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_80M__0____________0_______CHOICE (8191u)

#define ECU_GW_3_C4_HU_ROAD_CURVATURE_90M___0_16192____0_00001_________________________CHOICE (0u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_90M__0_00001___0_16192_________________________CHOICE (512u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_90M__UNKNOWN_CHOICE (4607u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_90M__0____________0_______CHOICE (8191u)

#define ECU_GW_3_C4_HU_ROAD_CURVATURE_100M___0_16192____0_00001_________________________CHOICE (0u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_100M__0_00001___0_16192_________________________CHOICE (512u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_100M__UNKNOWN_CHOICE (4863u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_100M__0____________0_______CHOICE (8191u)

#define ECU_GW_3_C4_HU_ROAD_CURVATURE_300M___0_16192____0_00001_________________________CHOICE (0u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_300M__0_00001___0_16192_________________________CHOICE (512u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_300M__UNKNOWN_CHOICE (5119u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_300M__0____________0_______CHOICE (8191u)

#define ECU_GW_3_C4_HU_ROAD_CURVATURE_400M___0_16192____0_00001_________________________CHOICE (0u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_400M__0_00001___0_16192_________________________CHOICE (512u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_400M__UNKNOWN_CHOICE (5375u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_400M__0____________0_______CHOICE (8191u)

#define ECU_GW_3_C4_HU_ROAD_CURVATURE_600M___0_16192____0_00001_________________________CHOICE (0u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_600M__0_00001___0_16192_________________________CHOICE (512u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_600M__UNKNOWN_CHOICE (5631u)
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_600M__0____________0_______CHOICE (8191u)

#define ECU_GW_3_C4_HU_MAP_MATCH_STATUS_SUCCESSL_CHOICE (0u)
#define ECU_GW_3_C4_HU_MAP_MATCH_STATUS_FAIL_CHOICE (1u)
#define ECU_GW_3_C4_HU_MAP_MATCH_STATUS______2_CHOICE (2u)
#define ECU_GW_3_C4_HU_MAP_MATCH_STATUS______3_CHOICE (3u)

#define ECU_GW_3_FD_BCM_DRIVE_MODE_NORMAL_CHOICE (0u)
#define ECU_GW_3_FD_BCM_DRIVE_MODE_ECO_CHOICE (1u)
#define ECU_GW_3_FD_BCM_DRIVE_MODE_SPORT___CHOICE (2u)
#define ECU_GW_3_FD_BCM_DRIVE_MODE_SNOW_CHOICE (3u)
#define ECU_GW_3_FD_BCM_DRIVE_MODE_SPORT__CHOICE (4u)
#define ECU_GW_3_FD_BCM_DRIVE_MODE_SMART_CHOICE (5u)
#define ECU_GW_3_FD_BCM_DRIVE_MODE_RACE_CHOICE (6u)
#define ECU_GW_3_FD_BCM_DRIVE_MODE_RESERVED_CHOICE (7u)
#define ECU_GW_3_FD_BCM_DRIVE_MODE_INVALID_CHOICE (15u)

#define ECU_GW_3_FD_BCM_EPS_TORQ_SYN_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_3_FD_BCM_EPS_TORQ_SYN_STATUS_ON_CHOICE (1u)
#define ECU_GW_3_FD_BCM_EPS_TORQ_SYN_STATUS_OFF_CHOICE (2u)
#define ECU_GW_3_FD_BCM_EPS_TORQ_SYN_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_3_FD_BCM_DRV_MOD_SW_STS_INITIAL_CHOICE (0u)
#define ECU_GW_3_FD_BCM_DRV_MOD_SW_STS_BACK_CHOICE (1u)
#define ECU_GW_3_FD_BCM_DRV_MOD_SW_STS_FORWARD_CHOICE (2u)
#define ECU_GW_3_FD_BCM_DRV_MOD_SW_STS_FAULT_CHOICE (3u)

#define ECU_GW_3_FD_BCM_EPS_TORQUE_MODE_NORMAL__CHOICE (0u)
#define ECU_GW_3_FD_BCM_EPS_TORQUE_MODE_LIGHT__CHOICE (1u)
#define ECU_GW_3_FD_BCM_EPS_TORQUE_MODE_HEAVY__CHOICE (2u)
#define ECU_GW_3_FD_BCM_EPS_TORQUE_MODE_RESERVED_CHOICE (3u)

#define ECU_GW_3_FD_BCM_POWER_MANAGE_LEVEL_VALID_CHOICE (0u)
#define ECU_GW_3_FD_BCM_POWER_MANAGE_LEVEL_LEVEL1_CHOICE (1u)
#define ECU_GW_3_FD_BCM_POWER_MANAGE_LEVEL___LEVEL2_CHOICE (2u)
#define ECU_GW_3_FD_BCM_POWER_MANAGE_LEVEL___LEVEL3_CHOICE (3u)
#define ECU_GW_3_FD_BCM_POWER_MANAGE_LEVEL___LEVEL4_CHOICE (4u)
#define ECU_GW_3_FD_BCM_POWER_MANAGE_LEVEL_RESERVE_CHOICE (5u)
#define ECU_GW_3_FD_BCM_POWER_MANAGE_LEVEL_INVALID_CHOICE (7u)

#define ECU_GW_3_FD_BCM_REAR_FOGLAMP_STATUS_FB_INACTIVE_CHOICE (0u)
#define ECU_GW_3_FD_BCM_REAR_FOGLAMP_STATUS_FB_OFF_0X2_ON_0X3__RESERVE_CHOICE (1u)

#define ECU_GW_3_FD_BCM_AUT_HEAD_LI_STS_INACTIVE_CHOICE (0u)
#define ECU_GW_3_FD_BCM_AUT_HEAD_LI_STS_OFF_0X2________0X3________0X4__________0X5_0X7__RESERVE_CHOICE (1u)

#define ECU_GW_3_FD_BCM_FRONT_WINDSHIELD_WARM_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_3_FD_BCM_FRONT_WINDSHIELD_WARM_STATUS_ON_CHOICE (1u)
#define ECU_GW_3_FD_BCM_FRONT_WINDSHIELD_WARM_STATUS_OFF__CHOICE (2u)
#define ECU_GW_3_FD_BCM_FRONT_WINDSHIELD_WARM_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_3_FD_BCM_SWITCH_DIMMERLEVEL__________CHOICE (0u)
#define ECU_GW_3_FD_BCM_SWITCH_DIMMERLEVEL_LEVEL1__LEVEL21_CHOICE (1u)
#define ECU_GW_3_FD_BCM_SWITCH_DIMMERLEVEL_INVALID_CHOICE (31u)

#define ECU_GW_3_FF_BCM_MUSIC_PLAY_REQUEST_SIGNAL_INACTIVE__CHOICE (0u)
#define ECU_GW_3_FF_BCM_MUSIC_PLAY_REQUEST_SIGNAL_START__CHOICE (1u)
#define ECU_GW_3_FF_BCM_MUSIC_PLAY_REQUEST_SIGNAL_END__CHOICE (2u)
#define ECU_GW_3_FF_BCM_MUSIC_PLAY_REQUEST_SIGNAL__ILLEGAL_CHOICE (3u)

#define ECU_GW_3_FF_BCM_MUSIC_LIGHT_MODE_SELECT_STS_INACTIVE_CHOICE (0u)
#define ECU_GW_3_FF_BCM_MUSIC_LIGHT_MODE_SELECT_STS_LIGHT__MODE1_CHOICE (1u)
#define ECU_GW_3_FF_BCM_MUSIC_LIGHT_MODE_SELECT_STS_LIGHT__MODE2_CHOICE (2u)
#define ECU_GW_3_FF_BCM_MUSIC_LIGHT_MODE_SELECT_STS_LIGHT__MODE3_CHOICE (3u)
#define ECU_GW_3_FF_BCM_MUSIC_LIGHT_MODE_SELECT_STS_LIGHT__MODE4_CHOICE (4u)
#define ECU_GW_3_FF_BCM_MUSIC_LIGHT_MODE_SELECT_STS_LIGHT__MODE5_CHOICE (5u)
#define ECU_GW_3_FF_BCM_MUSIC_LIGHT_MODE_SELECT_STS_LIGHT__MODE6_CHOICE (6u)
#define ECU_GW_3_FF_BCM_MUSIC_LIGHT_MODE_SELECT_STS_LIGHT__MODE7_CHOICE (7u)

#define ECU_GW_3_FF_BCM_FOLLOW_ME_TURNON_OFF_CHOICE (0u)
#define ECU_GW_3_FF_BCM_FOLLOW_ME_TURNON_ON_CHOICE (1u)

#define ECU_GW_3_FF_PEPS_WELCOME_LIGHT_STAUS_INACTIVE_CHOICE (0u)
#define ECU_GW_3_FF_PEPS_WELCOME_LIGHT_STAUS_ON_CHOICE (1u)
#define ECU_GW_3_FF_PEPS_WELCOME_LIGHT_STAUS_OFF_CHOICE (2u)
#define ECU_GW_3_FF_PEPS_WELCOME_LIGHT_STAUS_RESERVED_CHOICE (3u)

#define ECU_GW_3_FF_BCM_MUSICLIGHTFEEDBACK_INACTIVE_CHOICE (0u)
#define ECU_GW_3_FF_BCM_MUSICLIGHTFEEDBACK_ENTER_CHOICE (1u)
#define ECU_GW_3_FF_BCM_MUSICLIGHTFEEDBACK_EXIT_CHOICE (2u)
#define ECU_GW_3_FF_BCM_MUSICLIGHTFEEDBACK_RESERVED_CHOICE (3u)

#define ECU_GW_3_FF_BCM_FRONT_POSITION_LAMP_ERROR________0_CHOICE (0u)
#define ECU_GW_3_FF_BCM_FRONT_POSITION_LAMP_ERROR________1_CHOICE (1u)

#define ECU_GW_3_FF_BCM_AUTO_HEADLIGHT_STS_NOT__ACTIVED_CHOICE (0u)
#define ECU_GW_3_FF_BCM_AUTO_HEADLIGHT_STS_ACTIVED_CHOICE (1u)

#define ECU_GW_3_FF_BCM_FRONT_FOGLAMP_STATUS_OFF_CHOICE (0u)
#define ECU_GW_3_FF_BCM_FRONT_FOGLAMP_STATUS_ON_CHOICE (1u)
#define ECU_GW_3_FF_BCM_FRONT_FOGLAMP_STATUS_NOT_USED_CHOICE (2u)
#define ECU_GW_3_FF_BCM_FRONT_FOGLAMP_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_3_FF_BCM_POSITION_LAMP_STATUS_OFF_CHOICE (0u)
#define ECU_GW_3_FF_BCM_POSITION_LAMP_STATUS_ON_CHOICE (1u)
#define ECU_GW_3_FF_BCM_POSITION_LAMP_STATUS_NOT_USED_CHOICE (2u)
#define ECU_GW_3_FF_BCM_POSITION_LAMP_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_3_FF_BCM_RIGHT_FRONT_FOGLAMP_ERROR________0_CHOICE (0u)
#define ECU_GW_3_FF_BCM_RIGHT_FRONT_FOGLAMP_ERROR________1_CHOICE (1u)

#define ECU_GW_3_FF_BCM_LEFT_FRONT_FOGLAMP_ERROR________0_CHOICE (0u)
#define ECU_GW_3_FF_BCM_LEFT_FRONT_FOGLAMP_ERROR________1_CHOICE (1u)

#define ECU_GW_3_FF_BCM_RIGHT_LOW_BEAM_ERROR________0_CHOICE (0u)
#define ECU_GW_3_FF_BCM_RIGHT_LOW_BEAM_ERROR________1_CHOICE (1u)

#define ECU_GW_3_FF_BCM_LEFT_LOW_BEAM_ERROR________0_CHOICE (0u)
#define ECU_GW_3_FF_BCM_LEFT_LOW_BEAM_ERROR________1_CHOICE (1u)

#define ECU_GW_3_FF_BCM_RIGHT_DAY_LAMP_ERROR________0_CHOICE (0u)
#define ECU_GW_3_FF_BCM_RIGHT_DAY_LAMP_ERROR________1_CHOICE (1u)

#define ECU_GW_3_FF_BCM_LEFT_DAY_LAMP_ERROR________0_CHOICE (0u)
#define ECU_GW_3_FF_BCM_LEFT_DAY_LAMP_ERROR________1_CHOICE (1u)

#define ECU_GW_3_FF_BCM_TURN_INDICATOR_RIGHT_ERROR________0_CHOICE (0u)
#define ECU_GW_3_FF_BCM_TURN_INDICATOR_RIGHT_ERROR________1_CHOICE (1u)

#define ECU_GW_3_FF_BCM_TURN_INDICATOR_LEFT_ERROR________0_CHOICE (0u)
#define ECU_GW_3_FF_BCM_TURN_INDICATOR_LEFT_ERROR________1_CHOICE (1u)

#define ECU_GW_3_FF_BCM_POSITION_LAMP_SWITCH_STATUS_OFF_CHOICE (0u)
#define ECU_GW_3_FF_BCM_POSITION_LAMP_SWITCH_STATUS_ON_CHOICE (1u)

#define ECU_GW_3_FF_LCM_DRL_STS_NOT__ACTIVED_CHOICE (0u)
#define ECU_GW_3_FF_LCM_DRL_STS_ACTIVED_CHOICE (1u)

#define ECU_GW_3_FF_BCM_FOLLOW_ME_HOME_LIGHT_SET_STATUS_INVALID_CHOICE (0u)
#define ECU_GW_3_FF_BCM_FOLLOW_ME_HOME_LIGHT_SET_STATUS_OFF_CHOICE (1u)
#define ECU_GW_3_FF_BCM_FOLLOW_ME_HOME_LIGHT_SET_STATUS_10S_CHOICE (2u)
#define ECU_GW_3_FF_BCM_FOLLOW_ME_HOME_LIGHT_SET_STATUS_30S_CHOICE (3u)
#define ECU_GW_3_FF_BCM_FOLLOW_ME_HOME_LIGHT_SET_STATUS_60S_CHOICE (4u)
#define ECU_GW_3_FF_BCM_FOLLOW_ME_HOME_LIGHT_SET_STATUS_120S_CHOICE (5u)
#define ECU_GW_3_FF_BCM_FOLLOW_ME_HOME_LIGHT_SET_STATUS_RESERVED_6_CHOICE (6u)
#define ECU_GW_3_FF_BCM_FOLLOW_ME_HOME_LIGHT_SET_STATUS_RESERVED_7_CHOICE (7u)

#define ECU_GW_3_FF_BCM_FLOOR_LAMP_STATUS_OFF_CHOICE (0u)
#define ECU_GW_3_FF_BCM_FLOOR_LAMP_STATUS_ON_CHOICE (1u)
#define ECU_GW_3_FF_BCM_FLOOR_LAMP_STATUS_NOT_USED_CHOICE (2u)
#define ECU_GW_3_FF_BCM_FLOOR_LAMP_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_3_FF_BCM_HIGH_BEAM_LAMP_ERROR_NO_ERROR_CHOICE (0u)
#define ECU_GW_3_FF_BCM_HIGH_BEAM_LAMP_ERROR__ERROR_CHOICE (1u)

#define ECU_GW_51_E_TPMS_LF_TEMPERATURE_WARNING_NO_TEMPERATURE_WARNING_CHOICE (0u)
#define ECU_GW_51_E_TPMS_LF_TEMPERATURE_WARNING_TEMPERATURE_WARNING_CHOICE (1u)

#define ECU_GW_51_E_TPMS_RF_TEMPERATURE_WARNING_NO_TEMPERATURE_WARNING_CHOICE (0u)
#define ECU_GW_51_E_TPMS_RF_TEMPERATURE_WARNING_TEMPERATURE_WARNING_CHOICE (1u)

#define ECU_GW_51_E_TPMS_RR_TEMPERATURE_WARNING_NO_TEMPERATURE_WARNING_CHOICE (0u)
#define ECU_GW_51_E_TPMS_RR_TEMPERATURE_WARNING_TEMPERATURE_WARNING_CHOICE (1u)

#define ECU_GW_51_E_TPMS_LR_TEMPERATURE_WARNING_NO_TEMPERATURE_WARNING_CHOICE (0u)
#define ECU_GW_51_E_TPMS_LR_TEMPERATURE_WARNING_TEMPERATURE_WARNING_CHOICE (1u)

#define ECU_GW_51_E_TPMS_TIRE_POSITION_NO_ANY_SENSOR_CHOICE (0u)
#define ECU_GW_51_E_TPMS_TIRE_POSITION_LEFT__FRONT_TIRE__0X2__RIGHT__FRONT_TIRE_CHOICE (1u)
#define ECU_GW_51_E_TPMS_TIRE_POSITION_RIGHT__REAR_TIRE__0X4__LEFT__REAR_TIRE_CHOICE (3u)
#define ECU_GW_51_E_TPMS_TIRE_POSITION_RESEVED__CHOICE (5u)

#define ECU_GW_51_E_TPMS_LF_LEAKAGE_WARNING_NO_ANY_TIRE_CHOICE (0u)
#define ECU_GW_51_E_TPMS_LF_LEAKAGE_WARNING_LEFT__FRONT_TIRE_QUIK_LEAKAGE_CHOICE (1u)
#define ECU_GW_51_E_TPMS_LF_LEAKAGE_WARNING_LEFT__FRONT_TIRE_SLOW_LEAKAGE_CHOICE (2u)
#define ECU_GW_51_E_TPMS_LF_LEAKAGE_WARNING_RESERVED_CHOICE (3u)

#define ECU_GW_51_E_TPMS_RF_LEAKAGE_WARNING_NO_ANY_TIRE_CHOICE (0u)
#define ECU_GW_51_E_TPMS_RF_LEAKAGE_WARNING_RIGHT__FRONT_TIRE__QUIK_LEAKAGE_CHOICE (1u)
#define ECU_GW_51_E_TPMS_RF_LEAKAGE_WARNING_RIGHT__FRONT_TIRE__SLOW_LEAKAGE_CHOICE (2u)
#define ECU_GW_51_E_TPMS_RF_LEAKAGE_WARNING_RESERVED_CHOICE (3u)

#define ECU_GW_51_E_TPMS_RR_LEAKAGE_WARNING_NO_ANY_TIRE_CHOICE (0u)
#define ECU_GW_51_E_TPMS_RR_LEAKAGE_WARNING_RIGHT__REAR_TIRE_QUIK_LEAKAGE_CHOICE (1u)
#define ECU_GW_51_E_TPMS_RR_LEAKAGE_WARNING_RIGHT__REAR_TIRE_SLOW_LEAKAGE_CHOICE (2u)

#define ECU_GW_51_E_TPMS_LR_LEAKAGE_WARNING_NO_ANY_TIRE_CHOICE (0u)
#define ECU_GW_51_E_TPMS_LR_LEAKAGE_WARNING_LEFT__REAR_TIRE_QUIK_LEAKAGE_1_CHOICE (1u)
#define ECU_GW_51_E_TPMS_LR_LEAKAGE_WARNING_LEFT__REAR_TIRE_QUIK_LEAKAGE_2_CHOICE (2u)
#define ECU_GW_51_E_TPMS_LR_LEAKAGE_WARNING_RESERVED_CHOICE (3u)

#define ECU_GW_51_E_TPMS_SUGGESTION_NO_WARNING_CHOICE (0u)
#define ECU_GW_51_E_TPMS_SUGGESTION_SLOW_DOWN_____________CHOICE (1u)
#define ECU_GW_51_E_TPMS_SUGGESTION_CHECK_TIRE_____________CHOICE (2u)
#define ECU_GW_51_E_TPMS_SUGGESTION_RENEWAL_TIRE_____________CHOICE (3u)
#define ECU_GW_51_E_TPMS_SUGGESTION_LOW_PRESSURE______________CHOICE (4u)
#define ECU_GW_51_E_TPMS_SUGGESTION_LOW_PRESSURE_CAUSED_BY_TEMPERATURE____________________________CHOICE (5u)
#define ECU_GW_51_E_TPMS_SUGGESTION_RESEVED_CHOICE (6u)

#define ECU_GW_51_E_TPMS_COMMENDATORYPRESSURE_INVALID_CHOICE (0u)
#define ECU_GW_51_E_TPMS_COMMENDATORYPRESSURE_2_0BAR_CHOICE (1u)
#define ECU_GW_51_E_TPMS_COMMENDATORYPRESSURE_2_1BAR_CHOICE (2u)
#define ECU_GW_51_E_TPMS_COMMENDATORYPRESSURE_2_2BAR_CHOICE (3u)
#define ECU_GW_51_E_TPMS_COMMENDATORYPRESSURE_2_3BAR_CHOICE (4u)
#define ECU_GW_51_E_TPMS_COMMENDATORYPRESSURE_2_4_CHOICE (5u)
#define ECU_GW_51_E_TPMS_COMMENDATORYPRESSURE_2_5BAR_CHOICE (6u)
#define ECU_GW_51_E_TPMS_COMMENDATORYPRESSURE_2_6BAR_CHOICE (7u)
#define ECU_GW_51_E_TPMS_COMMENDATORYPRESSURE_2_7BAR_CHOICE (8u)
#define ECU_GW_51_E_TPMS_COMMENDATORYPRESSURE_2_9BAR_CHOICE (9u)
#define ECU_GW_51_E_TPMS_COMMENDATORYPRESSURE_RESEVED_CHOICE (10u)

#define ECU_GW_51_E_TPMS_AERATE_FLAG_INVALID_CHOICE (0u)
#define ECU_GW_51_E_TPMS_AERATE_FLAG_ACTIVE_CHOICE (1u)

#define ECU_GW_28_C_GW_MFS_SET_REDUCE_SWITCH_SIGNAL____________CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_SET_REDUCE_SWITCH_SIGNAL__________CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_SET_REDUCE_SWITCH_SIGNAL________CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_SET_REDUCE_SWITCH_SIGNAL_ERROR_CHOICE (3u)

#define ECU_GW_28_C_GW_MFS_RES_PLUS_SWITCH_SIGNAL____________CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_RES_PLUS_SWITCH_SIGNAL__________CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_RES_PLUS_SWITCH_SIGNAL________CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_RES_PLUS_SWITCH_SIGNAL_ERROR_CHOICE (3u)

#define ECU_GW_28_C_GW_MFS_CANCLE_SWITCH_SIGNAL____________CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_CANCLE_SWITCH_SIGNAL__________CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_CANCLE_SWITCH_SIGNAL________CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_CANCLE_SWITCH_SIGNAL_ERROR_CHOICE (3u)

#define ECU_GW_28_C_GW_MFS_CRUSIE_SWITCH_SIGNAL____________CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_CRUSIE_SWITCH_SIGNAL__________CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_CRUSIE_SWITCH_SIGNAL________CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_CRUSIE_SWITCH_SIGNAL_ERROR_CHOICE (3u)

#define ECU_GW_28_C_GW_MFS_EPS_SWITCH____________CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_EPS_SWITCH__________CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_EPS_SWITCH________CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_EPS_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_28_C_GW_MFS_IAC_CENABLE_SWITCH_SIGNAL____________CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_IAC_CENABLE_SWITCH_SIGNAL__________CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_IAC_CENABLE_SWITCH_SIGNAL________CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_IAC_CENABLE_SWITCH_SIGNAL_ERROR_CHOICE (3u)

#define ECU_GW_28_C_GW_MFS_LIM_SWITCH_SIGNAL____________CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_LIM_SWITCH_SIGNAL__________CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_LIM_SWITCH_SIGNAL________CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_LIM_SWITCH_SIGNAL_ERROR_CHOICE (3u)

#define ECU_GW_28_C_GW_MFS_DIST_SWITCH_SIGNAL____________CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_DIST_SWITCH_SIGNAL__________CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_DIST_SWITCH_SIGNAL________CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_DIST_SWITCH_SIGNAL_ERROR_CHOICE (3u)

#define ECU_GW_28_C_GW_MFS_HOD_SYSTEM_STATUS_NO_FAULT_CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_HOD_SYSTEM_STATUS_FAULT_CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_HOD_SYSTEM_STATUS_BLOCK_CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_HOD_SYSTEM_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_28_C_GW_MFS_HANDSOFF_DETECT_RESULT_NO__TOUCH_CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_HANDSOFF_DETECT_RESULT_LEFT__WHEEL__TOUCH_CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_HANDSOFF_DETECT_RESULT_RIGHT__WHEEL__TOUCH_CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_HANDSOFF_DETECT_RESULT_REAR__WHEEL__TOUCH_CHOICE (3u)
#define ECU_GW_28_C_GW_MFS_HANDSOFF_DETECT_RESULT_LEFT__WHEEL__GRIP_CHOICE (4u)
#define ECU_GW_28_C_GW_MFS_HANDSOFF_DETECT_RESULT_RIGHT__WHEEL__GRIP_CHOICE (5u)
#define ECU_GW_28_C_GW_MFS_HANDSOFF_DETECT_RESULT_BOTH_SIDE_TOUCH_CHOICE (6u)
#define ECU_GW_28_C_GW_MFS_HANDSOFF_DETECT_RESULT___BOTH_SIDE__GRIP_CHOICE (7u)

#define ECU_GW_28_C_GW_MFS_DIST_PLUS_SWITCH_SIGNAL____________CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_DIST_PLUS_SWITCH_SIGNAL__________CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_DIST_PLUS_SWITCH_SIGNAL________CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_DIST_PLUS_SWITCH_SIGNAL_ERROR_CHOICE (3u)

#define ECU_GW_28_C_GW_MFS_DIST_REDUCE_SWITCH_SIGNAL____________CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_DIST_REDUCE_SWITCH_SIGNAL__________CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_DIST_REDUCE_SWITCH_SIGNAL________CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_DIST_REDUCE_SWITCH_SIGNAL_ERROR_CHOICE (3u)

#define ECU_GW_28_C_GW_MFS_HOD_CALIBRATED_STATUS_NOT__CALIBRATED_CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_HOD_CALIBRATED_STATUS_CALIBRATED_CHOICE (1u)

#define ECU_GW_28_C_GW_MFS_HOD_LIN_STATUS_NO_FAULT_CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_HOD_LIN_STATUS_FAULT_CHOICE (1u)

#define ECU_GW_28_C_GW_MFS_HOD_APP_STATUS_NO_FAULT_CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_HOD_APP_STATUS_FAULT_CHOICE (1u)

#define ECU_GW_28_C_GW_MFS_HANDSOFF_ABILITY_DETECT__HANDS_OFF_CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_HANDSOFF_ABILITY_DETECT__HANDS_ON_WITHOUT_TAKEOVER_ABILITY_CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_HANDSOFF_ABILITY_DETECT__HANDS_ON_WITH_TAKEOVER_ABILITY_CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_HANDSOFF_ABILITY_DETECT__UNKOWN_CHOICE (3u)
#define ECU_GW_28_C_GW_MFS_HANDSOFF_ABILITY_DETECT_RESERVED_CHOICE (4u)

#define ECU_GW_28_C_GW_MFS_HOD_SENSER_STATUS_NO_FAULT_CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_HOD_SENSER_STATUS_FAULT_CHOICE (1u)

#define ECU_GW_28_C_GW_MFS_ERS_REDUCE_SWITCH____________CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_ERS_REDUCE_SWITCH__________CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_ERS_REDUCE_SWITCH________CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_ERS_REDUCE_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_28_C_GW_MFS_ERS_PLUS_SWITCH____________CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_ERS_PLUS_SWITCH__________CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_ERS_PLUS_SWITCH________CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_ERS_PLUS_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_28_C_GW_MFS_DIAG_INFO_SW_28_C______CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_DIAG_INFO_SW_28_C______________CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_DIAG_INFO_SW_28_C_________16_V_CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_DIAG_INFO_SW_28_C_________9_V_CHOICE (3u)
#define ECU_GW_28_C_GW_MFS_DIAG_INFO_SW_28_C_REVERSED_CHOICE (4u)
#define ECU_GW_28_C_GW_MFS_DIAG_INFO_SW_28_C_INVALID_CHOICE (7u)

#define ECU_GW_28_C_GW_MFS_GEARSHIFT_PLUS_SWITCH____________CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_GEARSHIFT_PLUS_SWITCH__________CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_GEARSHIFT_PLUS_SWITCH________CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_GEARSHIFT_PLUS_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_28_C_GW_MFS_GEARSHIFT_REDUCE_SWITCH____________CHOICE (0u)
#define ECU_GW_28_C_GW_MFS_GEARSHIFT_REDUCE_SWITCH__________CHOICE (1u)
#define ECU_GW_28_C_GW_MFS_GEARSHIFT_REDUCE_SWITCH________CHOICE (2u)
#define ECU_GW_28_C_GW_MFS_GEARSHIFT_REDUCE_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_331_TCU_FAILURE_LAMP_OFF_CHOICE (0u)
#define ECU_GW_331_TCU_FAILURE_LAMP_ON_CHOICE (1u)

#define ECU_GW_331_TCU_TRANS_TEMP_WARNING_NO_WARNING_REQUEST_CHOICE (0u)
#define ECU_GW_331_TCU_TRANS_TEMP_WARNING_TRANSMISSION_HOT_CHOICE (1u)
#define ECU_GW_331_TCU_TRANS_TEMP_WARNING_TRANSMISSION_OVERHEAT_CHOICE (2u)
#define ECU_GW_331_TCU_TRANS_TEMP_WARNING_TRANSMISSION_COLD_CHOICE (3u)

#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_INITIAL_VALUE_CHOICE (0u)
#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_1ST_GEAR_CHOICE (1u)
#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_2ND_GEAR_CHOICE (2u)
#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_3RD_GEAR_CHOICE (3u)
#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_4TH_GEAR_CHOICE (4u)
#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_5TH_GEAR_CHOICE (5u)
#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_6TH_GEAR_CHOICE (6u)
#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_PARKING_CHOICE (7u)
#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_REVERSE_CHOICE (8u)
#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_NEUTRAL_CHOICE (9u)
#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_D_RANGE_CHOICE (10u)
#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_S_RANGE_CHOICE (11u)
#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_7TH_GEAR_CHOICE (12u)
#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_8TH_GEAR_CHOICE (13u)
#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_UNAVAILABLE_CHOICE (14u)
#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_INVALID_CHOICE (15u)

#define ECU_GW_331_TCU_PARK_REL_A_POSN_IP_REQ_NO__DISPLAY_REQUEST_CHOICE (0u)
#define ECU_GW_331_TCU_PARK_REL_A_POSN_IP_REQ_PRESS__BRAKE_TO_RELEASE_PARK_CHOICE (1u)
#define ECU_GW_331_TCU_PARK_REL_A_POSN_IP_REQ_PRESS__UNLOCK__BUTTON_TO_RELEASE__PARK_CHOICE (2u)
#define ECU_GW_331_TCU_PARK_REL_A_POSN_IP_REQ_SLOW_SPEED_DOWN_TO_SHIFT_LEVER_CHOICE (3u)

#define ECU_GW_331_TCU_PARK_REL_M_POSN_IP_REQ_NO__DISPLAY_REQUEST_CHOICE (0u)
#define ECU_GW_331_TCU_PARK_REL_M_POSN_IP_REQ_MOVE__SHIFT__LEVER_TO_RIGHT_CHOICE (1u)

#define ECU_GW_331_TCU_PARK_SELECT_IP_REQ_NO__DISPLAY_REQUEST_CHOICE (0u)
#define ECU_GW_331_TCU_PARK_SELECT_IP_REQ_ONLY__SHIFT_TO__PARK_WHEN_VEHICLE_IS_STATIONARY_CHOICE (1u)

#define ECU_GW_331_TCU_ESL_FAULT_IP_REQ_NO__DISPLAY_REQUEST_CHOICE (0u)
#define ECU_GW_331_TCU_ESL_FAULT_IP_REQ_SHIFT__LEVER_MALFUNCTION___SERVICE__REQUIRED_CHOICE (1u)

#define ECU_GW_331_TCU_ARC_FAULT_IP_REQ_NO__DISPLAY_REQUEST_CHOICE (0u)
#define ECU_GW_331_TCU_ARC_FAULT_IP_REQ_PARK___ACTUATOR__FAULT___SERVICE__REQUIRED__CHOICE (1u)

#define ECU_GW_331_TCU_POWERPLANT_STATUS_IP_REQ_NO__DISPLAY_REQUEST_CHOICE (0u)
#define ECU_GW_331_TCU_POWERPLANT_STATUS_IP_REQ_SHIFT_LEVER_AFTER_POWERPLANT_STATUS_IS_RUNNING_CHOICE (1u)

#define ECU_GW_331_TCU_TRANS_FAULT_LEVEL_NORMAL_CHOICE (0u)
#define ECU_GW_331_TCU_TRANS_FAULT_LEVEL_FAULT_LEVEL1_JUST_STORE_DTC__CHOICE (1u)
#define ECU_GW_331_TCU_TRANS_FAULT_LEVEL_FAULT_LEVEL2_STORE_DTC_WARNING__CHOICE (2u)
#define ECU_GW_331_TCU_TRANS_FAULT_LEVEL_FAULT_LEVEL3__LIMPHOME__CHOICE (3u)
#define ECU_GW_331_TCU_TRANS_FAULT_LEVEL_FAULT_LEVEL4__NO_DCT__SHAFT__CHOICE (4u)
#define ECU_GW_331_TCU_TRANS_FAULT_LEVEL_FAULT_LEVEL5__DRIVE_OPEN__CHOICE (5u)

#define ECU_GW_1_AF_TCU_STL_KFAILURE_NORMAL_CHOICE (0u)
#define ECU_GW_1_AF_TCU_STL_KFAILURE_ERROR_CHOICE (1u)

#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_VALID_VALID_CHOICE (0u)
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_VALID_INVALID_CHOICE (1u)

#define ECU_GW_1_AF_TCU_SHIFT_POSTION_VALID_VALID_CHOICE (0u)
#define ECU_GW_1_AF_TCU_SHIFT_POSTION_VALID_INVALID_CHOICE (1u)

#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_NEUTRAL_CHOICE (0u)
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_1ST_GEAR_CHOICE (1u)
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_2ND_GEAR_CHOICE (2u)
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_3RD_GEAR_CHOICE (3u)
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_4TH_GEAR_CHOICE (4u)
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_5TH_GEAR_CHOICE (5u)
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_6TH_GEAR_CHOICE (6u)
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_7TH_GEAR_CHOICE (7u)
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_8TH_GEAR_CHOICE (8u)
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_REVERSE_CHOICE (9u)
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_PARKING_CHOICE (10u)
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_RESERVED_11_CHOICE (11u)
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_RESERVED_13_CHOICE (13u)
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_RESERVED_14_CHOICE (14u)
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_INVALID_CHOICE (15u)

#define ECU_GW_1_AF_TCU_GEAR_SHIFT_POSITION_PARKING_CHOICE (0u)
#define ECU_GW_1_AF_TCU_GEAR_SHIFT_POSITION_REVERSE_CHOICE (1u)
#define ECU_GW_1_AF_TCU_GEAR_SHIFT_POSITION_NEUTRAL_CHOICE (2u)
#define ECU_GW_1_AF_TCU_GEAR_SHIFT_POSITION_D_CHOICE (3u)
#define ECU_GW_1_AF_TCU_GEAR_SHIFT_POSITION_D3_CHOICE (4u)
#define ECU_GW_1_AF_TCU_GEAR_SHIFT_POSITION_D2_CHOICE (5u)
#define ECU_GW_1_AF_TCU_GEAR_SHIFT_POSITION_L_CHOICE (6u)
#define ECU_GW_1_AF_TCU_GEAR_SHIFT_POSITION_M_S_CHOICE (7u)
#define ECU_GW_1_AF_TCU_GEAR_SHIFT_POSITION_RESERVED_CHOICE (8u)
#define ECU_GW_1_AF_TCU_GEAR_SHIFT_POSITION___INITIAL_VALUE_CHOICE (13u)
#define ECU_GW_1_AF_TCU_GEAR_SHIFT_POSITION___UNRELIABLE_CHOICE (14u)
#define ECU_GW_1_AF_TCU_GEAR_SHIFT_POSITION___INVALID_CHOICE (15u)

#define ECU_GW_1_AF_TCU_ACTUAL_PRESELECT_GEAR_INITIAL_CHOICE (0u)
#define ECU_GW_1_AF_TCU_ACTUAL_PRESELECT_GEAR_1ST_GEAR_CHOICE (1u)
#define ECU_GW_1_AF_TCU_ACTUAL_PRESELECT_GEAR_2ND_GEAR_CHOICE (2u)
#define ECU_GW_1_AF_TCU_ACTUAL_PRESELECT_GEAR_3RD_GEAR_CHOICE (3u)
#define ECU_GW_1_AF_TCU_ACTUAL_PRESELECT_GEAR_4TH_GEAR_CHOICE (4u)
#define ECU_GW_1_AF_TCU_ACTUAL_PRESELECT_GEAR_5TH_GEAR_CHOICE (5u)
#define ECU_GW_1_AF_TCU_ACTUAL_PRESELECT_GEAR_6TH_GEAR_CHOICE (6u)
#define ECU_GW_1_AF_TCU_ACTUAL_PRESELECT_GEAR_7TH_GEAR_CHOICE (7u)
#define ECU_GW_1_AF_TCU_ACTUAL_PRESELECT_GEAR_8TH_GEAR_CHOICE (8u)
#define ECU_GW_1_AF_TCU_ACTUAL_PRESELECT_GEAR_REVERSE_CHOICE (9u)
#define ECU_GW_1_AF_TCU_ACTUAL_PRESELECT_GEAR_NEUTRAL_CHOICE (10u)
#define ECU_GW_1_AF_TCU_ACTUAL_PRESELECT_GEAR_RESERVED_CHOICE (11u)
#define ECU_GW_1_AF_TCU_ACTUAL_PRESELECT_GEAR_INVALID_CHOICE (15u)

#define ECU_GW_1_AF_TCU_THO_STATE_INITIAL_VALUE_CHOICE (0u)
#define ECU_GW_1_AF_TCU_THO_STATE_PREPARE_PHASE_CHOICE (1u)
#define ECU_GW_1_AF_TCU_THO_STATE_SPEED_PHASE_CHOICE (2u)
#define ECU_GW_1_AF_TCU_THO_STATE_TORQUE_PHASE_CHOICE (3u)
#define ECU_GW_1_AF_TCU_THO_STATE_REINSTATEMENT__CHOICE (4u)
#define ECU_GW_1_AF_TCU_THO_STATE_THO_NOT_ACTIVE_CHOICE (5u)
#define ECU_GW_1_AF_TCU_THO_STATE_RESERVED_CHOICE (6u)
#define ECU_GW_1_AF_TCU_THO_STATE_INVALID_CHOICE (7u)

#define ECU_GW_1_AF_TCU_TIP_SWITCH_SIGNAL_NOT__ACTIVE_CHOICE (0u)
#define ECU_GW_1_AF_TCU_TIP_SWITCH_SIGNAL_TIP_PLUS_ACTIVE_CHOICE (1u)
#define ECU_GW_1_AF_TCU_TIP_SWITCH_SIGNAL_TIP_MINUS_ACTIVE_CHOICE (2u)
#define ECU_GW_1_AF_TCU_TIP_SWITCH_SIGNAL_INVALID_CHOICE (3u)

#define ECU_GW_320_GW_DCAN_DIAG_STS_DCAN___________0_CHOICE (0u)
#define ECU_GW_320_GW_DCAN_DIAG_STS_DCAN___________1_CHOICE (1u)

#define ECU_GW_320_GW_GATEWAY_FAILURE_FLAG_NOT__FAILURE_CHOICE (0u)
#define ECU_GW_320_GW_GATEWAY_FAILURE_FLAG_FAILURE_CHOICE (1u)

#define ECU_GW_320_GW_ADS_SEC_OC_VERIFY_FAILURE_FLAG_NOT__FAILURE_CHOICE (0u)
#define ECU_GW_320_GW_ADS_SEC_OC_VERIFY_FAILURE_FLAG_FAILURE_CHOICE (1u)

#define ECU_GW_320_GW_RESET_REQ_VALID_CHOICE (0u)
#define ECU_GW_320_GW_RESET_REQ_THU_CHOICE (1u)
#define ECU_GW_320_GW_RESET_REQ__AMP_CHOICE (2u)
#define ECU_GW_320_GW_RESET_REQ_ADS_ADC_CHOICE (3u)
#define ECU_GW_320_GW_RESET_REQ__FC_LAS_CHOICE (4u)
#define ECU_GW_320_GW_RESET_REQ_FR_ACC_CHOICE (5u)
#define ECU_GW_320_GW_RESET_REQ_FLR_CHOICE (6u)
#define ECU_GW_320_GW_RESET_REQ_FRR_CHOICE (7u)
#define ECU_GW_320_GW_RESET_REQ_RLR_LCDAL_CHOICE (8u)
#define ECU_GW_320_GW_RESET_REQ_RRR_LCDAR_CHOICE (9u)
#define ECU_GW_320_GW_RESET_REQ_LVSM_CHOICE (10u)
#define ECU_GW_320_GW_RESET_REQ_INS_CHOICE (11u)
#define ECU_GW_320_GW_RESET_REQ_APA_CHOICE (12u)
#define ECU_GW_320_GW_RESET_REQ_BCML_BCM_CHOICE (13u)
#define ECU_GW_320_GW_RESET_REQ_GW_BCMR_CHOICE (14u)
#define ECU_GW_320_GW_RESET_REQ_EMS_CHOICE (15u)
#define ECU_GW_320_GW_RESET_REQ_PCU_CHOICE (16u)
#define ECU_GW_320_GW_RESET_REQ_BMS_CHOICE (17u)
#define ECU_GW_320_GW_RESET_REQ_PEU_CHOICE (18u)
#define ECU_GW_320_GW_RESET_REQ_OBC_CHOICE (19u)
#define ECU_GW_320_GW_RESET_REQ_TCU_CHOICE (20u)
#define ECU_GW_320_GW_RESET_REQ_IPUMP_CHOICE (21u)
#define ECU_GW_320_GW_RESET_REQ_ACM_CHOICE (22u)
#define ECU_GW_320_GW_RESET_REQ_ESL_CHOICE (23u)
#define ECU_GW_320_GW_RESET_REQ_PTS_CHOICE (24u)
#define ECU_GW_320_GW_RESET_REQ_ESCL_CHOICE (25u)
#define ECU_GW_320_GW_RESET_REQ_TMS_AC_CHOICE (26u)
#define ECU_GW_320_GW_RESET_REQ_DKC_RFBT_BLEM_CHOICE (27u)
#define ECU_GW_320_GW_RESET_REQ_WLCM_CHOICE (28u)
#define ECU_GW_320_GW_RESET_REQ_EPBI_CHOICE (29u)
#define ECU_GW_320_GW_RESET_REQ_IBCU_CHOICE (30u)
#define ECU_GW_320_GW_RESET_REQ_RBM_CHOICE (31u)
#define ECU_GW_320_GW_RESET_REQ_EPS_CHOICE (32u)
#define ECU_GW_320_GW_RESET_REQ_EPS2_CHOICE (33u)
#define ECU_GW_320_GW_RESET_REQ_DSM_CHOICE (34u)
#define ECU_GW_320_GW_RESET_REQ_IP_CHOICE (35u)
#define ECU_GW_320_GW_RESET_REQ_SLCM_CHOICE (36u)
#define ECU_GW_320_GW_RESET_REQ_HUD_CHOICE (37u)
#define ECU_GW_320_GW_RESET_REQ_GPEU_CHOICE (38u)
#define ECU_GW_320_GW_RESET_REQ_PDU_CHOICE (39u)
#define ECU_GW_320_GW_RESET_REQ_RPEU_CHOICE (40u)
#define ECU_GW_320_GW_RESET_REQ_VMC_CHOICE (41u)
#define ECU_GW_320_GW_RESET_REQ_DPEU_CHOICE (43u)
#define ECU_GW_320_GW_RESET_REQ_NFC__ENTER_CHOICE (44u)
#define ECU_GW_320_GW_RESET_REQ_PATC_CHOICE (45u)
#define ECU_GW_320_GW_RESET_REQ_VMC2_CHOICE (46u)
#define ECU_GW_320_GW_RESET_REQ_RCCS_CHOICE (47u)
#define ECU_GW_320_GW_RESET_REQ_TRM_CHOICE (48u)
#define ECU_GW_320_GW_RESET_REQ_PDCU_CHOICE (49u)
#define ECU_GW_320_GW_RESET_REQ_BDCR_CHOICE (50u)
#define ECU_GW_320_GW_RESET_REQ_M_ADC_CHOICE (51u)
#define ECU_GW_320_GW_RESET_REQ_EPB_CHOICE (52u)
#define ECU_GW_320_GW_RESET_REQ_RESERVE_CHOICE (53u)
#define ECU_GW_320_GW_RESET_REQ_INVALID_CHOICE (127u)

#define ECU_GW_320_GW_OT_AMODE_OT_AINACTIVE_CHOICE (0u)
#define ECU_GW_320_GW_OT_AMODE_OT_AMODE1____________________CHOICE (1u)
#define ECU_GW_320_GW_OT_AMODE__OT_AMODE2____________________CHOICE (2u)
#define ECU_GW_320_GW_OT_AMODE_OT_AMODE3__RESERVED_CHOICE (3u)
#define ECU_GW_320_GW_OT_AMODE_OT_AMODE4______________________CHOICE (4u)
#define ECU_GW_320_GW_OT_AMODE_OT_AMODE5______________________CHOICE (5u)
#define ECU_GW_320_GW_OT_AMODE_OT_AMODE6____________________CHOICE (6u)
#define ECU_GW_320_GW_OT_AMODE_RESERVED_CHOICE (7u)

#define ECU_LAS_39_A_LAS_TSR_SPEED_LIMIT_TYPE_UNKNOWN_CHOICE (0u)
#define ECU_LAS_39_A_LAS_TSR_SPEED_LIMIT_TYPE_SPEED__LIMIT__SIGN_CHOICE (1u)
#define ECU_LAS_39_A_LAS_TSR_SPEED_LIMIT_TYPE_ROAD__CAMERA_CHOICE (2u)
#define ECU_LAS_39_A_LAS_TSR_SPEED_LIMIT_TYPE_INTERVAL__VELOCITY_CHOICE (3u)

#define ECU_LAS_39_A_LAS_OVERSPEED_VISUAL_WARNING___NO__WARNING_CHOICE (0u)
#define ECU_LAS_39_A_LAS_OVERSPEED_VISUAL_WARNING___WARNING_CHOICE (1u)

#define ECU_LAS_39_A_LAS_OVERSPEED_SOUND_WARNING___NO__WARNING_CHOICE (0u)
#define ECU_LAS_39_A_LAS_OVERSPEED_SOUND_WARNING___WARNING_CHOICE (1u)

#define ECU_LAS_39_A_LAS_OVERSPEED_WARNING_ENABLE_STATUS_OFF_CHOICE (0u)
#define ECU_LAS_39_A_LAS_OVERSPEED_WARNING_ENABLE_STATUS_ON_CHOICE (1u)

#define ECU_LAS_39_A_LAS_OVERSPEED_WARNING_OFFSET__10_20KM_H_CHOICE (0u)
#define ECU_LAS_39_A_LAS_OVERSPEED_WARNING_OFFSET_RESERVED_CHOICE (31u)
#define ECU_LAS_39_A_LAS_OVERSPEED_WARNING_OFFSET_INVALID_CHOICE (47u)

#define ECU_LAS_39_A_LAS_HMA_LIGHT_DISTRIBUTION___HIGH_BEAM_NOT_RECOMMENDED_CHOICE (0u)
#define ECU_LAS_39_A_LAS_HMA_LIGHT_DISTRIBUTION___HIGH_BEAM_RECOMMENDED_CHOICE (1u)

#define ECU_LAS_39_A_LAS_HMA_ENABLE_STATUS_OFF_CHOICE (0u)
#define ECU_LAS_39_A_LAS_HMA_ENABLE_STATUS_ON_CHOICE (1u)

#define ECU_LAS_39_A_LAS_FRONT_CAMERA_CALIBRATION_STATUS_CALIBRATION_IS_OK_CHOICE (0u)
#define ECU_LAS_39_A_LAS_FRONT_CAMERA_CALIBRATION_STATUS_CALIBRATION__IN__PROCESS_CHOICE (1u)
#define ECU_LAS_39_A_LAS_FRONT_CAMERA_CALIBRATION_STATUS_CALIBRATION_NEVER_DONE_CHOICE (2u)
#define ECU_LAS_39_A_LAS_FRONT_CAMERA_CALIBRATION_STATUS_CALIBRATION__FAILED_CHOICE (3u)

#define ECU_LAS_39_A_LAS_FRONT_CAMERA_FAILURE_STATUS_NO__ERROR_CHOICE (0u)
#define ECU_LAS_39_A_LAS_FRONT_CAMERA_FAILURE_STATUS_CAMERA_BLOCKED_CHOICE (1u)
#define ECU_LAS_39_A_LAS_FRONT_CAMERA_FAILURE_STATUS_TEMPORARY_FAILURE_CHOICE (2u)
#define ECU_LAS_39_A_LAS_FRONT_CAMERA_FAILURE_STATUS_PERMANENT_FAILURE_CHOICE (3u)

#define ECU_LAS_39_A_LAS_TSR_ENABLE_OFF_CHOICE (0u)
#define ECU_LAS_39_A_LAS_TSR_ENABLE_ON_CHOICE (1u)

#define ECU_LAS_39_A_LAS_OVERSPEED_SOUND_WARNING_EN_ST_OFF_CHOICE (0u)
#define ECU_LAS_39_A_LAS_OVERSPEED_SOUND_WARNING_EN_ST_ON_CHOICE (1u)

#define ECU_LAS_39_A_LAS_TSR_STATUS_OFF_CHOICE (0u)
#define ECU_LAS_39_A_LAS_TSR_STATUS_FUSION_MODE_CHOICE (1u)
#define ECU_LAS_39_A_LAS_TSR_STATUS_VISION_ONLY_MODE_CHOICE (2u)
#define ECU_LAS_39_A_LAS_TSR_STATUS_NAVIGATION_ONLY_MODE_CHOICE (3u)
#define ECU_LAS_39_A_LAS_TSR_STATUS_FAILURE_CHOICE (4u)
#define ECU_LAS_39_A_LAS_TSR_STATUS_RESERVED_5_CHOICE (5u)
#define ECU_LAS_39_A_LAS_TSR_STATUS_RESERVED_6_CHOICE (6u)
#define ECU_LAS_39_A_LAS_TSR_STATUS_INVALID_CHOICE (7u)

#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_NO_SPEED_LIMIT_DETECTED_CHOICE (0u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL5_CHOICE (1u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL10_CHOICE (2u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL15_CHOICE (3u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL20_CHOICE (4u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL25_CHOICE (5u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL30_CHOICE (6u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL35_CHOICE (7u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL40_CHOICE (8u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL45_CHOICE (9u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL50_CHOICE (10u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL55_CHOICE (11u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL60_CHOICE (12u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL65_CHOICE (13u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL70_CHOICE (14u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL75_CHOICE (15u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL80_CHOICE (16u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL85_CHOICE (17u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL90_CHOICE (18u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL95_CHOICE (19u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL100_CHOICE (20u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL105_CHOICE (21u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL110_CHOICE (22u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL115_CHOICE (23u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL120_CHOICE (24u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL125_CHOICE (25u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL130_CHOICE (26u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL135_CHOICE (27u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL140_CHOICE (28u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL145_CHOICE (29u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL150_CHOICE (30u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL155_CHOICE (31u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_SL160_CHOICE (32u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT___RESERVED_CHOICE (33u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT___UNLIMITED_CHOICE (254u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT__SLEND_CHOICE (255u)

#define ECU_LAS_39_A_LAS_HMA_STATUS___OFF_CHOICE (0u)
#define ECU_LAS_39_A_LAS_HMA_STATUS___STANDBY_CHOICE (1u)
#define ECU_LAS_39_A_LAS_HMA_STATUS___ACTIVE_CHOICE (2u)
#define ECU_LAS_39_A_LAS_HMA_STATUS___FAILURE_CHOICE (3u)

#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_UNITS_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_UNITS_UNIT_KPH_CHOICE (1u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_UNITS_UNIT_MPH_CHOICE (2u)
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_UNITS_RESERVED_CHOICE (3u)

#define ECU_LAS_39_A_LAS_CROSSWALK_LNG_RANGE_H_LANE_0_250M_CHOICE (0u)
#define ECU_LAS_39_A_LAS_CROSSWALK_LNG_RANGE_H_LANE_RESERVED_CHOICE (251u)
#define ECU_LAS_39_A_LAS_CROSSWALK_LNG_RANGE_H_LANE_OUT_OF__RANGE_CHOICE (255u)

#define ECU_LAS_39_A_LAS_RD4_ROAD_INFOR_AVAILABLE___NOT__AVAILABLE_CHOICE (0u)
#define ECU_LAS_39_A_LAS_RD4_ROAD_INFOR_AVAILABLE___AVAILABLE__MEASURED_CHOICE (1u)
#define ECU_LAS_39_A_LAS_RD4_ROAD_INFOR_AVAILABLE___PREDICTED_CHOICE (2u)
#define ECU_LAS_39_A_LAS_RD4_ROAD_INFOR_AVAILABLE___PREDICTED_CLOSE_RANGE_OUTSIDE_FOV_CHOICE (3u)

#define ECU_LAS_39_A_LAS_RD2_ROAD_INFOR_AVAILABLE___NOT__AVAILABLE_CHOICE (0u)
#define ECU_LAS_39_A_LAS_RD2_ROAD_INFOR_AVAILABLE___AVAILABLE__MEASURED_CHOICE (1u)
#define ECU_LAS_39_A_LAS_RD2_ROAD_INFOR_AVAILABLE___PREDICTED_CHOICE (2u)
#define ECU_LAS_39_A_LAS_RD2_ROAD_INFOR_AVAILABLE___PREDICTED_CLOSE_RANGE_OUTSIDE_FOV_CHOICE (3u)

#define ECU_LAS_39_A_LAS_ROAD_FEATURE___NO__OBJECT__________CHOICE (0u)
#define ECU_LAS_39_A_LAS_ROAD_FEATURE___SPEED__BUMP___________CHOICE (1u)
#define ECU_LAS_39_A_LAS_ROAD_FEATURE____RESERVED_2_CHOICE (2u)
#define ECU_LAS_39_A_LAS_ROAD_FEATURE____RESERVED_3_CHOICE (3u)
#define ECU_LAS_39_A_LAS_ROAD_FEATURE____RESERVED_4_CHOICE (4u)
#define ECU_LAS_39_A_LAS_ROAD_FEATURE____RESERVED_5_CHOICE (5u)
#define ECU_LAS_39_A_LAS_ROAD_FEATURE____RESERVED_6_CHOICE (6u)
#define ECU_LAS_39_A_LAS_ROAD_FEATURE___INVALID_CHOICE (15u)

#define ECU_LAS_39_A_LAS_RD4_LONG_DISTENCE_0_250M_CHOICE (0u)
#define ECU_LAS_39_A_LAS_RD4_LONG_DISTENCE_RESERVED_CHOICE (251u)
#define ECU_LAS_39_A_LAS_RD4_LONG_DISTENCE_OUT_OF__RANGE_CHOICE (255u)

#define ECU_LAS_39_A_LAS_RD3_LONG_DISTENCE_0_250M_CHOICE (0u)
#define ECU_LAS_39_A_LAS_RD3_LONG_DISTENCE_RESERVED_CHOICE (251u)
#define ECU_LAS_39_A_LAS_RD3_LONG_DISTENCE_OUT_OF__RANGE_CHOICE (255u)

#define ECU_LAS_39_A_LAS_RD2_LONG_DISTENCE_0_250M_CHOICE (0u)
#define ECU_LAS_39_A_LAS_RD2_LONG_DISTENCE_RESERVED_CHOICE (251u)
#define ECU_LAS_39_A_LAS_RD2_LONG_DISTENCE_OUT_OF__RANGE_CHOICE (255u)

#define ECU_LAS_39_A_LAS_RD1_LONG_DISTENCE_0_250M_CHOICE (0u)
#define ECU_LAS_39_A_LAS_RD1_LONG_DISTENCE_RESERVED_CHOICE (251u)
#define ECU_LAS_39_A_LAS_RD1_LONG_DISTENCE_OUT_OF__RANGE_CHOICE (255u)

#define ECU_LAS_39_A_LAS_RD3_ROAD_INFOR_AVAILABLE___NOT__AVAILABLE_CHOICE (0u)
#define ECU_LAS_39_A_LAS_RD3_ROAD_INFOR_AVAILABLE___AVAILABLE__MEASURED_CHOICE (1u)
#define ECU_LAS_39_A_LAS_RD3_ROAD_INFOR_AVAILABLE___PREDICTED_CHOICE (2u)
#define ECU_LAS_39_A_LAS_RD3_ROAD_INFOR_AVAILABLE___PREDICTED_CLOSE_RANGE_OUTSIDE_FOV_CHOICE (3u)

#define ECU_LAS_39_A_LAS_RD1_ROAD_INFOR_AVAILABLE___NOT__AVAILABLE_CHOICE (0u)
#define ECU_LAS_39_A_LAS_RD1_ROAD_INFOR_AVAILABLE___AVAILABLE__MEASURED_CHOICE (1u)
#define ECU_LAS_39_A_LAS_RD1_ROAD_INFOR_AVAILABLE___PREDICTED_CHOICE (2u)
#define ECU_LAS_39_A_LAS_RD1_ROAD_INFOR_AVAILABLE___PREDICTED_CLOSE_RANGE_OUTSIDE_FOV_CHOICE (3u)

#define ECU_GW_310_AMP_VOL_SPEED_ENABLE_SET_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_310_AMP_VOL_SPEED_ENABLE_SET_STATUS______1_CHOICE (1u)
#define ECU_GW_310_AMP_VOL_SPEED_ENABLE_SET_STATUS______2_CHOICE (2u)
#define ECU_GW_310_AMP_VOL_SPEED_ENABLE_SET_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_310_AMP_HEAD_SPKNIVISET_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_310_AMP_HEAD_SPKNIVISET_STATUS_OFF_CHOICE (1u)
#define ECU_GW_310_AMP_HEAD_SPKNIVISET_STATUS_ON_CHOICE (2u)
#define ECU_GW_310_AMP_HEAD_SPKNIVISET_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_310_AMP_HEAD_SPK_TEL_SET_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_310_AMP_HEAD_SPK_TEL_SET_STATUS_OFF_CHOICE (1u)
#define ECU_GW_310_AMP_HEAD_SPK_TEL_SET_STATUS_ON_CHOICE (2u)
#define ECU_GW_310_AMP_HEAD_SPK_TEL_SET_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_310_AMP_HEAD_SPK_MEDIA_SET_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_310_AMP_HEAD_SPK_MEDIA_SET_STATUS_OFF_CHOICE (1u)
#define ECU_GW_310_AMP_HEAD_SPK_MEDIA_SET_STATUS_ON_CHOICE (2u)
#define ECU_GW_310_AMP_HEAD_SPK_MEDIA_SET_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_310_AMP_HEAD_SPK_VOL_SET_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_310_AMP_HEAD_SPK_VOL_SET_STATUS_0__MUTE___CHOICE (1u)
#define ECU_GW_310_AMP_HEAD_SPK_VOL_SET_STATUS_STEP1_CHOICE (2u)
#define ECU_GW_310_AMP_HEAD_SPK_VOL_SET_STATUS_STEP39_CHOICE (40u)
#define ECU_GW_310_AMP_HEAD_SPK_VOL_SET_STATUS_STEP40_CHOICE (41u)
#define ECU_GW_310_AMP_HEAD_SPK_VOL_SET_STATUS_RESERVED_CHOICE (42u)

#define ECU_GW_310_AMP_ALARM_VOL_SET_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_310_AMP_ALARM_VOL_SET_STATUS____1_CHOICE (1u)
#define ECU_GW_310_AMP_ALARM_VOL_SET_STATUS____2_CHOICE (2u)
#define ECU_GW_310_AMP_ALARM_VOL_SET_STATUS____3_CHOICE (3u)

#define ECU_GW_310_AMP_LR_HEAD_SPK_BALANCE_SET_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_310_AMP_LR_HEAD_SPK_BALANCE_SET_STATUS__15___________CHOICE (1u)
#define ECU_GW_310_AMP_LR_HEAD_SPK_BALANCE_SET_STATUS__14_CHOICE (2u)
#define ECU_GW_310_AMP_LR_HEAD_SPK_BALANCE_SET_STATUS_0_____________CHOICE (16u)
#define ECU_GW_310_AMP_LR_HEAD_SPK_BALANCE_SET_STATUS_14_CHOICE (30u)
#define ECU_GW_310_AMP_LR_HEAD_SPK_BALANCE_SET_STATUS_15___________CHOICE (31u)

#define ECU_GW_310_AMP_ALARM_STYLE_SET_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_310_AMP_ALARM_STYLE_SET_STATUS_____1_CHOICE (1u)
#define ECU_GW_310_AMP_ALARM_STYLE_SET_STATUS_____2_CHOICE (2u)
#define ECU_GW_310_AMP_ALARM_STYLE_SET_STATUS_____3_CHOICE (3u)
#define ECU_GW_310_AMP_ALARM_STYLE_SET_STATUS_RESERVED_CHOICE (4u)

#define ECU_GW_310_AMP_TOUCH_VOL_SET_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_310_AMP_TOUCH_VOL_SET_STATUS____1_CHOICE (1u)
#define ECU_GW_310_AMP_TOUCH_VOL_SET_STATUS____2_CHOICE (2u)
#define ECU_GW_310_AMP_TOUCH_VOL_SET_STATUS____3_CHOICE (3u)
#define ECU_GW_310_AMP_TOUCH_VOL_SET_STATUS____4_CHOICE (4u)
#define ECU_GW_310_AMP_TOUCH_VOL_SET_STATUS_RESERVED_CHOICE (5u)

#define ECU_GW_310_AMP_SPK_CHANNEL_SET_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_310_AMP_SPK_CHANNEL_SET_STATUS____________________________________________CHOICE (1u)
#define ECU_GW_310_AMP_SPK_CHANNEL_SET_STATUS________________CHOICE (2u)
#define ECU_GW_310_AMP_SPK_CHANNEL_SET_STATUS________________________________________CHOICE (3u)
#define ECU_GW_310_AMP_SPK_CHANNEL_SET_STATUS_RESERVED_CHOICE (4u)

#define ECU_GW_310_AMP_MUTESET_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_310_AMP_MUTESET_STATUS________CHOICE (1u)
#define ECU_GW_310_AMP_MUTESET_STATUS______CHOICE (2u)
#define ECU_GW_310_AMP_MUTESET_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_310_AMP_IP_ENABLE_ALARM_FAILURE_STATUS_NO__FAILURE_CHOICE (0u)
#define ECU_GW_310_AMP_IP_ENABLE_ALARM_FAILURE_STATUS_FAILURE_CHOICE (1u)

#define ECU_GW_310_AMP_ALL_ALARM_FAILURE_STATUS_NO__FAILURE_CHOICE (0u)
#define ECU_GW_310_AMP_ALL_ALARM_FAILURE_STATUS_FAILURE_CHOICE (1u)

#define ECU_GW_310_AMP_VOL_SPEED_LEV_SET_STATUS_INACTIVE_CHOICE (0u)
#define ECU_GW_310_AMP_VOL_SPEED_LEV_SET_STATUS______CHOICE (1u)
#define ECU_GW_310_AMP_VOL_SPEED_LEV_SET_STATUS_L1_CHOICE (2u)
#define ECU_GW_310_AMP_VOL_SPEED_LEV_SET_STATUS_L2_CHOICE (3u)
#define ECU_GW_310_AMP_VOL_SPEED_LEV_SET_STATUS_L3_CHOICE (4u)
#define ECU_GW_310_AMP_VOL_SPEED_LEV_SET_STATUS_RESERVED_CHOICE (5u)

#define ECU_GW_3_E8_BCM_SOC_RESERVED_CHOICE (101u)
#define ECU_GW_3_E8_BCM_SOC_INVALID_CHOICE (255u)

#define ECU_GW_3_E8_BCM_SOF_Q_INVALID_CHOICE (255u)

#define ECU_GW_3_E8_BCM_SOF_V1_INVALID_CHOICE (255u)

#define ECU_GW_3_E8_BCM_SOF_V2_INVALID_CHOICE (255u)

#define ECU_GW_3_E8_BCM_SOF_T_INVALID_CHOICE (1023u)

#define ECU_GW_3_E8_BCM_SOC_STATE_DEVIATION___15__CHOICE (0u)
#define ECU_GW_3_E8_BCM_SOC_STATE_DEVIATION__15__CHOICE (1u)
#define ECU_GW_3_E8_BCM_SOC_STATE_DEVIATION___10__CHOICE (2u)
#define ECU_GW_3_E8_BCM_SOC_STATE_INVALID_CHOICE (3u)

#define ECU_GW_3_E8_BCM_SOF_Q_STATE_DEVIATION___15__CHOICE (0u)
#define ECU_GW_3_E8_BCM_SOF_Q_STATE_DEVIATION__15__CHOICE (1u)
#define ECU_GW_3_E8_BCM_SOF_Q_STATE_DEVIATION___10__CHOICE (2u)
#define ECU_GW_3_E8_BCM_SOF_Q_STATE_INVALID_CHOICE (3u)

#define ECU_GW_3_E8_BCM_SOF_V1_STATE_DEVIATION_800M_V_CHOICE (0u)
#define ECU_GW_3_E8_BCM_SOF_V1_STATE_DEVIATION_400M_V_1_CHOICE (1u)
#define ECU_GW_3_E8_BCM_SOF_V1_STATE_DEVIATION_400M_V_2_CHOICE (2u)
#define ECU_GW_3_E8_BCM_SOF_V1_STATE_INVALID_CHOICE (3u)

#define ECU_GW_3_E8_BCM_SOF_V2_STATE_DEVIATION___15__CHOICE (0u)
#define ECU_GW_3_E8_BCM_SOF_V2_STATE_DEVIATION__15__CHOICE (1u)
#define ECU_GW_3_E8_BCM_SOF_V2_STATE_DEVIATION___10__CHOICE (2u)
#define ECU_GW_3_E8_BCM_SOF_V2_STATE_INVALID_CHOICE (3u)

#define ECU_GW_3_E8_BCM_SOF_T_STATE_DEVIATION___15__CHOICE (0u)
#define ECU_GW_3_E8_BCM_SOF_T_STATE_DEVIATION__15__CHOICE (1u)
#define ECU_GW_3_E8_BCM_SOF_T_STATE_DEVIATION___10__CHOICE (2u)
#define ECU_GW_3_E8_BCM_SOF_T_STATE_INVALID_CHOICE (3u)

#define ECU_GW_3_E7_BCM_U_BATT_RESERVED_CHOICE (15361u)
#define ECU_GW_3_E7_BCM_U_BATT_INVALID_CHOICE (16383u)

#define ECU_GW_3_E7_BCM_I_RANGE_CURRENT__RANGE___1__1_A__CHOICE (0u)
#define ECU_GW_3_E7_BCM_I_RANGE_CURRENT__RANGE___200__200_A__CHOICE (1u)
#define ECU_GW_3_E7_BCM_I_RANGE_CURRENT__RANGE___1500__1500_A__CHOICE (2u)
#define ECU_GW_3_E7_BCM_I_RANGE_UNSIGNED_CHOICE (3u)

#define ECU_GW_3_E7_BCM_T_BATT_RESERVED_CHOICE (146u)
#define ECU_GW_3_E7_BCM_T_BATT_INVALID_CHOICE (255u)

#define ECU_GW_3_E7_BCM_IBATT_QUIESCENT_OVERFLOW_CHOICE (253u)
#define ECU_GW_3_E7_BCM_IBATT_QUIESCENT_OUT_OF_BOUNDS_CHOICE (254u)
#define ECU_GW_3_E7_BCM_IBATT_QUIESCENT_INVALID_CHOICE (255u)

#define ECU_GW_3_E7_BCM_STATUS_CURRENT_NO_ERROR_CHOICE (0u)
#define ECU_GW_3_E7_BCM_STATUS_CURRENT_ERROR__OPEN_CIRCUIT_CHOICE (1u)
#define ECU_GW_3_E7_BCM_STATUS_CURRENT_HW_DEFECT__ADC_DEFECT__CHOICE (2u)
#define ECU_GW_3_E7_BCM_STATUS_CURRENT_LIN_SATURATION__NO_HW_DEFECT__CHOICE (3u)

#define ECU_GW_3_E7_BCM_STATUS_VOLTAGE_NO_ERROR_CHOICE (0u)
#define ECU_GW_3_E7_BCM_STATUS_VOLTAGE_ERROR__OPEN_CIRCUIT_CHOICE (1u)
#define ECU_GW_3_E7_BCM_STATUS_VOLTAGE_HW_DEFECT__ADC_DEFECT__CHOICE (2u)
#define ECU_GW_3_E7_BCM_STATUS_VOLTAGE_LIN_SATURATION__NO_HW__DEFECT__CHOICE (3u)

#define ECU_GW_3_E7_BCM_STATUS_TEMP_NO_ERROR_CHOICE (0u)
#define ECU_GW_3_E7_BCM_STATUS_TEMP_NOT_USED_CHOICE (1u)
#define ECU_GW_3_E7_BCM_STATUS_TEMP_HW_DEFECT__ADC_DEFECT__CHOICE (2u)
#define ECU_GW_3_E7_BCM_STATUS_TEMP_LIN_SATURATION__NO_HW__DEFECT__CHOICE (3u)

#define ECU_GW_3_E7_BCM_ERROR_CALIB_NO_ERROR_CHOICE (0u)
#define ECU_GW_3_E7_BCM_ERROR_CALIB_ERROR_CHOICE (1u)

#define ECU_GW_3_E7_BCM_ERROR_IDENT_NO_ERROR_CHOICE (0u)
#define ECU_GW_3_E7_BCM_ERROR_IDENT_ERROR_CHOICE (1u)

#define ECU_GW_3_E7_BCM_RESP_ERROR_NO_ERROR_CHOICE (0u)
#define ECU_GW_3_E7_BCM_RESP_ERROR_ERROR_CHOICE (1u)

#define ECU_GW_3_E7_BCM_FLAG_INCONSISTENCY_NO_BATTERY_INCONSISTENCY_CHOICE (0u)
#define ECU_GW_3_E7_BCM_FLAG_INCONSISTENCY_BATTERY_INCONSISTENCY_CHOICE (1u)

#define ECU_GW_38_A_GW_MFS_DOWN_SWITCH____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_DOWN_SWITCH__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_DOWN_SWITCH________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_DOWN_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_UP_SWITCH____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_UP_SWITCH__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_UP_SWITCH________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_UP_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_RIGHT_SWITCH____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_RIGHT_SWITCH__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_RIGHT_SWITCH________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_RIGHT_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_LEFT_SWITCH____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_LEFT_SWITCH__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_LEFT_SWITCH________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_LEFT_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_DVR_SWITCH____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_DVR_SWITCH__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_DVR_SWITCH________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_DVR_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_MODE_SWITCH____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_MODE_SWITCH__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_MODE_SWITCH________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_MODE_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_SPEECH_SWITCH____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_SPEECH_SWITCH__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_SPEECH_SWITCH________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_SPEECH_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_OK_SWITCH____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_OK_SWITCH__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_OK_SWITCH________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_OK_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_MUTE_SWITCH____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_MUTE_SWITCH__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_MUTE_SWITCH________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_MUTE_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_VOL_REDUCE_SWITCH____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_VOL_REDUCE_SWITCH__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_VOL_REDUCE_SWITCH________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_VOL_REDUCE_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_VOL_PLUS_SWITCH____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_VOL_PLUS_SWITCH__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_VOL_PLUS_SWITCH________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_VOL_PLUS_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_CUST_SWITCH____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_CUST_SWITCH__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_CUST_SWITCH________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_CUST_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_ANSWER_SWITCH_SIGNAL____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_ANSWER_SWITCH_SIGNAL__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_ANSWER_SWITCH_SIGNAL________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_ANSWER_SWITCH_SIGNAL_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_HUNGUP_SWITCH_SIGNAL____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_HUNGUP_SWITCH_SIGNAL__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_HUNGUP_SWITCH_SIGNAL________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_HUNGUP_SWITCH_SIGNAL_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_SEEK_REDUCE_SWITCH____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_SEEK_REDUCE_SWITCH__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_SEEK_REDUCE_SWITCH________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_SEEK_REDUCE_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_SEEK_PLUS_SWITCH____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_SEEK_PLUS_SWITCH__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_SEEK_PLUS_SWITCH________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_SEEK_PLUS_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_WE_CHAT_SWITCH_SIGNAL____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_WE_CHAT_SWITCH_SIGNAL__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_WE_CHAT_SWITCH_SIGNAL________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_WE_CHAT_SWITCH_SIGNAL_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_AVM_SWITCH____________CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_AVM_SWITCH__________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_AVM_SWITCH________CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_AVM_SWITCH_ERROR_CHOICE (3u)

#define ECU_GW_38_A_GW_MFS_DIAG_INFO_SW_38_A______CHOICE (0u)
#define ECU_GW_38_A_GW_MFS_DIAG_INFO_SW_38_A______________CHOICE (1u)
#define ECU_GW_38_A_GW_MFS_DIAG_INFO_SW_38_A_________16_V_CHOICE (2u)
#define ECU_GW_38_A_GW_MFS_DIAG_INFO_SW_38_A_________9_V_CHOICE (3u)
#define ECU_GW_38_A_GW_MFS_DIAG_INFO_SW_38_A_REVERSED_CHOICE (4u)
#define ECU_GW_38_A_GW_MFS_DIAG_INFO_SW_38_A_INVALID_CHOICE (7u)

#define ECU_GW_262_PEPS_START_INDICATOR_SIGNAL_INACTIVE_CHOICE (0u)
#define ECU_GW_262_PEPS_START_INDICATOR_SIGNAL____________________CHOICE (1u)

#define ECU_GW_262_PEPS_REMOTE_APA_DONE_KEY_OFF_REQ__INVALID_CHOICE (0u)
#define ECU_GW_262_PEPS_REMOTE_APA_DONE_KEY_OFF_REQ__REQUEST_CHOICE (1u)
#define ECU_GW_262_PEPS_REMOTE_APA_DONE_KEY_OFF_REQ__NOT_REQUEST_CHOICE (2u)
#define ECU_GW_262_PEPS_REMOTE_APA_DONE_KEY_OFF_REQ__RESERVED_CHOICE (3u)

#define ECU_GW_262_PEPS_APA_ENGINE0FF_FEEDBACK_IN_ACTIVE__CHOICE (0u)
#define ECU_GW_262_PEPS_APA_ENGINE0FF_FEEDBACK_SUCCESS__CHOICE (1u)
#define ECU_GW_262_PEPS_APA_ENGINE0FF_FEEDBACK_FAILED__CHOICE (2u)
#define ECU_GW_262_PEPS_APA_ENGINE0FF_FEEDBACK_RESERVED_CHOICE (3u)

#define ECU_GW_262_PEPS_APA_LOCK_FEEDBACK_IN_ACTIVE__CHOICE (0u)
#define ECU_GW_262_PEPS_APA_LOCK_FEEDBACK_SUCCESS__CHOICE (1u)
#define ECU_GW_262_PEPS_APA_LOCK_FEEDBACK_FAILED__CHOICE (2u)
#define ECU_GW_262_PEPS_APA_LOCK_FEEDBACK_RESERVED_CHOICE (3u)

#define ECU_GW_262_PEPS_APA_REMOTE_PARKING_ON___NOT__PRESSED_CHOICE (0u)
#define ECU_GW_262_PEPS_APA_REMOTE_PARKING_ON___PRESSED_CHOICE (1u)

#define ECU_GW_262_PEPS_UNALLOW_START_ESCL_ERROR_INACTIVE_CHOICE (0u)
#define ECU_GW_262_PEPS_UNALLOW_START_ESCL_ERROR_ESCL_____CHOICE (1u)

#define ECU_GW_262_PEPS_APA_CLOSE_WIN_FEEDBACK_IN_ACTIVE__CHOICE (0u)
#define ECU_GW_262_PEPS_APA_CLOSE_WIN_FEEDBACK_SUCCESS__CHOICE (1u)
#define ECU_GW_262_PEPS_APA_CLOSE_WIN_FEEDBACK_FAILED__CHOICE (2u)
#define ECU_GW_262_PEPS_APA_CLOSE_WIN_FEEDBACK_RESERVED_CHOICE (3u)

#define ECU_GW_262_PEPS_REMOTE_CONTROL_AC_REQ_NO__REQUEST_CHOICE (0u)
#define ECU_GW_262_PEPS_REMOTE_CONTROL_AC_REQ_AC__START_CHOICE (1u)
#define ECU_GW_262_PEPS_REMOTE_CONTROL_AC_REQ_RESERVED_CHOICE (2u)

#define ECU_GW_262_PEPS_POWER_DISTRIBUTION_STATUS__OFF_CHOICE (0u)
#define ECU_GW_262_PEPS_POWER_DISTRIBUTION_STATUS__ACC_CHOICE (1u)
#define ECU_GW_262_PEPS_POWER_DISTRIBUTION_STATUS__ON_CHOICE (2u)
#define ECU_GW_262_PEPS_POWER_DISTRIBUTION_STATUS___START__CHOICE (3u)

#define ECU_GW_262_PEPS_UNALLOW_START_ESCL_LOCK_INACTIVE_CHOICE (0u)
#define ECU_GW_262_PEPS_UNALLOW_START_ESCL_LOCK_ESCL_______CHOICE (1u)

#define ECU_GW_262_PEPS_UNALLOW_START_SIGNAL_NOT_PN_INACTIVE_CHOICE (0u)
#define ECU_GW_262_PEPS_UNALLOW_START_SIGNAL_NOT_PN_____P_N___CHOICE (1u)

#define ECU_GW_262_PEPS_IMMO_FAILED_ALARMSIGNAL_INACTIVE_CHOICE (0u)
#define ECU_GW_262_PEPS_IMMO_FAILED_ALARMSIGNAL_IMMO__EMS_________CHOICE (1u)

#define ECU_GW_262_PEPS_STARTUP_BUTTON_SIGNAL__OFF_CHOICE (0u)
#define ECU_GW_262_PEPS_STARTUP_BUTTON_SIGNAL__ON_CHOICE (1u)
#define ECU_GW_262_PEPS_STARTUP_BUTTON_SIGNAL___ERROR_CHOICE (2u)
#define ECU_GW_262_PEPS_STARTUP_BUTTON_SIGNAL_________CHOICE (3u)

#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK_________CHOICE (0u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK___________1_CHOICE (1u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK___________________2_CHOICE (2u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK_______________3_CHOICE (3u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK_____________________________CHOICE (4u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK_________________5_CHOICE (5u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK___________6_CHOICE (6u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK___________________7_CHOICE (7u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK__________P___CHOICE (8u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK__________0_CHOICE (9u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK_________________10_CHOICE (10u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK_________________11_CHOICE (11u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK___________12_CHOICE (12u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK_______________13_CHOICE (13u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK_____________________14_CHOICE (14u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK_______________________CHOICE (15u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK_______________16_CHOICE (16u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK_____________________17_CHOICE (17u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK_______________18_CHOICE (18u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK________________________CHOICE (19u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK___________________20_CHOICE (20u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK_____________30MIN______CHOICE (21u)
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK___RESERVED_CHOICE (22u)

#define ECU_GW_262_PEPS_APA_POWER_MIRROR_FOLD_FEEDBACK_IN_ACTIVE__CHOICE (0u)
#define ECU_GW_262_PEPS_APA_POWER_MIRROR_FOLD_FEEDBACK_FOLD_CHOICE (1u)
#define ECU_GW_262_PEPS_APA_POWER_MIRROR_FOLD_FEEDBACK_OPEN_CHOICE (2u)
#define ECU_GW_262_PEPS_APA_POWER_MIRROR_FOLD_FEEDBACK_RESERVED_CHOICE (3u)

#define ECU_GW_262_PEPS_ENGINE_STARTUP_INHIBIT_STS_NOT_INHIBIT__CHOICE (0u)
#define ECU_GW_262_PEPS_ENGINE_STARTUP_INHIBIT_STS_INHIBIT_CHOICE (1u)

#define ECU_GW_262_PEPS_POWER_DISTRIBUTION_FAULT_BIT_NO__ERROR_CHOICE (0u)
#define ECU_GW_262_PEPS_POWER_DISTRIBUTION_FAULT_BIT_ERROR_CHOICE (1u)

#define ECU_GW_262_PEPS_ENGINE_STARTUP_INHIBIT_FB_INACTIVE__CHOICE (0u)
#define ECU_GW_262_PEPS_ENGINE_STARTUP_INHIBIT_FB_INHIBIT_SUCCES_CHOICE (1u)

#define ECU_GW_262_PEPS_IMMO_FEEDBACK_INACTIVE___________CHOICE (0u)
#define ECU_GW_262_PEPS_IMMO_FEEDBACK_AUTHENTICATING_______0X2__SUCCESS_____CHOICE (1u)
#define ECU_GW_262_PEPS_IMMO_FEEDBACK_FAILED_____CHOICE (3u)

#define ECU_GW_262_PEPS_REMOTE_START_KEY_STATUS_INVALID_CHOICE (0u)
#define ECU_GW_262_PEPS_REMOTE_START_KEY_STATUS__PRESSED_CHOICE (1u)
#define ECU_GW_262_PEPS_REMOTE_START_KEY_STATUS_NOT_PRESSED__CHOICE (2u)
#define ECU_GW_262_PEPS_REMOTE_START_KEY_STATUS_RESERVE_CHOICE (3u)

#define ECU_GW_262_PEPS_PEPS_FAIL_STATUS_NO__ERROR_CHOICE (0u)
#define ECU_GW_262_PEPS_PEPS_FAIL_STATUS_ERROR_CHOICE (1u)

#define ECU_GW_262_PEPS_KEY_STANDBY_POSITION_INDICATOR_INACTIVE_CHOICE (0u)
#define ECU_GW_262_PEPS_KEY_STANDBY_POSITION_INDICATOR_ON_CHOICE (1u)

#define ECU_GW_262_PEPS_APA_REMOTE_PARKING_OFF___NOT__PRESSED_CHOICE (0u)
#define ECU_GW_262_PEPS_APA_REMOTE_PARKING_OFF___PRESSED_CHOICE (1u)

#define ECU_GW_334_DSM_LEFT_MIRROR_UP_DOWN_STS_INACTIVE_CHOICE (0u)
#define ECU_GW_334_DSM_LEFT_MIRROR_UP_DOWN_STS_0__100__CHOICE (1u)
#define ECU_GW_334_DSM_LEFT_MIRROR_UP_DOWN_STS_RESERVED_CHOICE (204u)
#define ECU_GW_334_DSM_LEFT_MIRROR_UP_DOWN_STS_INVALID_CHOICE (255u)

#define ECU_GW_334_DSM_LEFT_MIRROR_LEFT_RIGHT_STS_INACTIVE_CHOICE (0u)
#define ECU_GW_334_DSM_LEFT_MIRROR_LEFT_RIGHT_STS_0__100__CHOICE (1u)
#define ECU_GW_334_DSM_LEFT_MIRROR_LEFT_RIGHT_STS_RESERVED_CHOICE (204u)
#define ECU_GW_334_DSM_LEFT_MIRROR_LEFT_RIGHT_STS_INVALID_CHOICE (255u)

#define ECU_GW_334_DSM_RIGHT_MIRROR_LEFT_RIGHT_STS_INACTIVE_CHOICE (0u)
#define ECU_GW_334_DSM_RIGHT_MIRROR_LEFT_RIGHT_STS_0__100__CHOICE (1u)
#define ECU_GW_334_DSM_RIGHT_MIRROR_LEFT_RIGHT_STS_RESERVED_CHOICE (204u)
#define ECU_GW_334_DSM_RIGHT_MIRROR_LEFT_RIGHT_STS_INVALID_CHOICE (255u)

#define ECU_GW_334_DSM_RIGHT_MIRROR_UP_DOWN_STS_INACTIVE_CHOICE (0u)
#define ECU_GW_334_DSM_RIGHT_MIRROR_UP_DOWN_STS_0__100__CHOICE (1u)
#define ECU_GW_334_DSM_RIGHT_MIRROR_UP_DOWN_STS_RESERVED_CHOICE (204u)
#define ECU_GW_334_DSM_RIGHT_MIRROR_UP_DOWN_STS_INVALID_CHOICE (255u)

#define ECU_GW_395_TBOX_REMOTE_ENGINE_STARTUP_REQ___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_REMOTE_ENGINE_STARTUP_REQ_ENGINE__START_CHOICE (1u)
#define ECU_GW_395_TBOX_REMOTE_ENGINE_STARTUP_REQ___ENGINE__STOP_CHOICE (2u)
#define ECU_GW_395_TBOX_REMOTE_ENGINE_STARTUP_REQ___INVALID_CHOICE (3u)

#define ECU_GW_395_TBOX_ENGINE_STARTUP_INHIBIT___NO__INHIBIT_CHOICE (0u)
#define ECU_GW_395_TBOX_ENGINE_STARTUP_INHIBIT___INHIBIT__ENGINE__START_CHOICE (1u)
#define ECU_GW_395_TBOX_ENGINE_STARTUP_INHIBIT___RESERVED_CHOICE (2u)
#define ECU_GW_395_TBOX_ENGINE_STARTUP_INHIBIT___INVALID_CHOICE (3u)

#define ECU_GW_395_TBOX_LOCK_COMMAND___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_LOCK_COMMAND___REMOTE__LOCK_CHOICE (1u)
#define ECU_GW_395_TBOX_LOCK_COMMAND___REMOTE__UNLOCK_CHOICE (2u)
#define ECU_GW_395_TBOX_LOCK_COMMAND___INVALID_CHOICE (3u)

#define ECU_GW_395_TBOX_VEHICLE_VEDIO_DETECT_REQ___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_VEHICLE_VEDIO_DETECT_REQ_REQUEST_CHOICE (1u)
#define ECU_GW_395_TBOX_VEHICLE_VEDIO_DETECT_REQ___RESERVED_CHOICE (2u)
#define ECU_GW_395_TBOX_VEHICLE_VEDIO_DETECT_REQ_INVALID_CHOICE (3u)

#define ECU_GW_395_TBOX_CAR_REMIND__INACTIVE_CHOICE (0u)
#define ECU_GW_395_TBOX_CAR_REMIND__ACTIVE_CHOICE (1u)

#define ECU_GW_395_TBOX_AUDIO_REQUEST___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_AUDIO_REQUEST_ECALL_REQUEST_CHOICE (1u)
#define ECU_GW_395_TBOX_AUDIO_REQUEST_BECALL_REQUEST_CHOICE (2u)
#define ECU_GW_395_TBOX_AUDIO_REQUEST___INVALID_CHOICE (3u)

#define ECU_GW_395_TBOX_CHANGE_PART_STATUS_NOT_CHANGE_CHOICE (0u)
#define ECU_GW_395_TBOX_CHANGE_PART_STATUS_CHANGED_CHOICE (1u)

#define ECU_GW_395_TBOX_ESE_UPDATA_HU_WAKE_UP_REQ___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_ESE_UPDATA_HU_WAKE_UP_REQ_ESE_UPDATA_HU_WAKE_UP_REQ_CHOICE (1u)

#define ECU_GW_395_TBOX_CALL_STATUS___IDLE_CHOICE (0u)
#define ECU_GW_395_TBOX_CALL_STATUS___ON_THE_PHONE_CHOICE (1u)
#define ECU_GW_395_TBOX_CALL_STATUS___CALLING_CHOICE (2u)
#define ECU_GW_395_TBOX_CALL_STATUS__BEING__CALLED_SOMEBODY_CALL__CHOICE (3u)
#define ECU_GW_395_TBOX_CALL_STATUS_CALL__ENDED_CHOICE (4u)
#define ECU_GW_395_TBOX_CALL_STATUS___RESERVED_CHOICE (5u)
#define ECU_GW_395_TBOX_CALL_STATUS___INVALID_CHOICE (7u)

#define ECU_GW_395_TBOX_B_CALL_STATUS___IDLE_CHOICE (0u)
#define ECU_GW_395_TBOX_B_CALL_STATUS___ON_THE_PHONE_CHOICE (1u)
#define ECU_GW_395_TBOX_B_CALL_STATUS___CALLING_CHOICE (2u)
#define ECU_GW_395_TBOX_B_CALL_STATUS__BEING__CALLED_SOMEBODY_CALL__CHOICE (3u)
#define ECU_GW_395_TBOX_B_CALL_STATUS_CALL__ENDED_CHOICE (4u)
#define ECU_GW_395_TBOX_B_CALL_STATUS___RESERVED_CHOICE (5u)
#define ECU_GW_395_TBOX_B_CALL_STATUS___INVALID_CHOICE (7u)

#define ECU_GW_395_TBOX_AC_TEMP_VALUE_REQ_0X00__NO__REQ_CHOICE (0u)
#define ECU_GW_395_TBOX_AC_TEMP_VALUE_REQ_LO_CHOICE (1u)
#define ECU_GW_395_TBOX_AC_TEMP_VALUE_REQ_COLD_LEVEL3_CHOICE (2u)
#define ECU_GW_395_TBOX_AC_TEMP_VALUE_REQ_COLD_LEVEL2_CHOICE (4u)
#define ECU_GW_395_TBOX_AC_TEMP_VALUE_REQ_COLD_LEVEL1_CHOICE (6u)
#define ECU_GW_395_TBOX_AC_TEMP_VALUE_REQ_HOT_LEVEL1_CHOICE (16u)
#define ECU_GW_395_TBOX_AC_TEMP_VALUE_REQ_HOT_LEVEL2_CHOICE (18u)
#define ECU_GW_395_TBOX_AC_TEMP_VALUE_REQ_HOT_LEVEL3_CHOICE (20u)
#define ECU_GW_395_TBOX_AC_TEMP_VALUE_REQ_HI_______0_5________17____________0X00__NO__REQ_CHOICE (31u)

#define ECU_GW_395_TBOX_VEHICLE_STATUS_DEMAND_REQ___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_VEHICLE_STATUS_DEMAND_REQ_REQUEST_CHOICE (1u)

#define ECU_GW_395_TBOX_REMOTE_START_RUN_TIME_NO_REQ_CHOICE (0u)
#define ECU_GW_395_TBOX_REMOTE_START_RUN_TIME_10MIN_CHOICE (1u)
#define ECU_GW_395_TBOX_REMOTE_START_RUN_TIME_15MIN_CHOICE (2u)
#define ECU_GW_395_TBOX_REMOTE_START_RUN_TIME_20MIN_CHOICE (3u)
#define ECU_GW_395_TBOX_REMOTE_START_RUN_TIME_25MIN_CHOICE (4u)
#define ECU_GW_395_TBOX_REMOTE_START_RUN_TIME_30MIN_CHOICE (5u)
#define ECU_GW_395_TBOX_REMOTE_START_RUN_TIME_RESERVED_CHOICE (6u)
#define ECU_GW_395_TBOX_REMOTE_START_RUN_TIME_INVALID_CHOICE (7u)

#define ECU_GW_395_TBOX_VIN_MATCH_STATUS_NOT_MATCHED_CHOICE (0u)
#define ECU_GW_395_TBOX_VIN_MATCH_STATUS_MATCHED_CHOICE (1u)
#define ECU_GW_395_TBOX_VIN_MATCH_STATUS_MATCHED_UNSUCCESS_CHOICE (2u)
#define ECU_GW_395_TBOX_VIN_MATCH_STATUS_INVALID_CHOICE (3u)

#define ECU_GW_395_TBOX_VIN_REQ___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_VIN_REQ_REQUEST_0X2____RESERVED_CHOICE (1u)
#define ECU_GW_395_TBOX_VIN_REQ___INVALID_CHOICE (3u)

#define ECU_GW_395_TBOX_SEARCH_CAR_REQ___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_SEARCH_CAR_REQ_LIGHT_CHOICE (1u)
#define ECU_GW_395_TBOX_SEARCH_CAR_REQ_HORN_CHOICE (2u)
#define ECU_GW_395_TBOX_SEARCH_CAR_REQ_LIGHT__AND__HORN_CHOICE (3u)

#define ECU_GW_395_TBOX_RMOTE_TRUNK___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_RMOTE_TRUNK_CLOSE_CHOICE (1u)
#define ECU_GW_395_TBOX_RMOTE_TRUNK_OPEN_CHOICE (2u)
#define ECU_GW_395_TBOX_RMOTE_TRUNK___RESERVED_CHOICE (3u)

#define ECU_GW_395_TBOX_RMOTE_ROOF___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_RMOTE_ROOF_CLOSE_CHOICE (1u)
#define ECU_GW_395_TBOX_RMOTE_ROOF_OPEN_CHOICE (2u)
#define ECU_GW_395_TBOX_RMOTE_ROOF___RESERVED__CHOICE (3u)

#define ECU_GW_395_TBOX_REMOTE_AC_STARTUP_REQ___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_REMOTE_AC_STARTUP_REQ_AC__START_CHOICE (1u)
#define ECU_GW_395_TBOX_REMOTE_AC_STARTUP_REQ__AC__STOP_CHOICE (2u)
#define ECU_GW_395_TBOX_REMOTE_AC_STARTUP_REQ___INVALID_CHOICE (3u)

#define ECU_GW_395_TBOX_REMOTE_STEER_WHEEL_HOT_REQ___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_REMOTE_STEER_WHEEL_HOT_REQ_HOT_REQUEST_CHOICE (1u)
#define ECU_GW_395_TBOX_REMOTE_STEER_WHEEL_HOT_REQ__CLOSE__CHOICE (2u)
#define ECU_GW_395_TBOX_REMOTE_STEER_WHEEL_HOT_REQ___RESERVED__CHOICE (3u)

#define ECU_GW_395_TBOX_REMOTE_DRIVER_SEAT_HOT_REQ___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_REMOTE_DRIVER_SEAT_HOT_REQ_HOT_LEVEL1_CHOICE (1u)
#define ECU_GW_395_TBOX_REMOTE_DRIVER_SEAT_HOT_REQ___HOT_LEVEL2_CHOICE (2u)
#define ECU_GW_395_TBOX_REMOTE_DRIVER_SEAT_HOT_REQ_HOT_LEVEL3_CHOICE (3u)
#define ECU_GW_395_TBOX_REMOTE_DRIVER_SEAT_HOT_REQ___RESERVED_CHOICE (4u)
#define ECU_GW_395_TBOX_REMOTE_DRIVER_SEAT_HOT_REQ_CLOSE_CHOICE (6u)
#define ECU_GW_395_TBOX_REMOTE_DRIVER_SEAT_HOT_REQ_RESERVED_CHOICE (7u)

#define ECU_GW_395_TBOX_REMOTE_PASSANGER_SEAT_HOT_REQ___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_REMOTE_PASSANGER_SEAT_HOT_REQ_HOT_LEVEL1_CHOICE (1u)
#define ECU_GW_395_TBOX_REMOTE_PASSANGER_SEAT_HOT_REQ___HOT_LEVEL2_CHOICE (2u)
#define ECU_GW_395_TBOX_REMOTE_PASSANGER_SEAT_HOT_REQ___HOT_LEVEL3_CHOICE (3u)
#define ECU_GW_395_TBOX_REMOTE_PASSANGER_SEAT_HOT_REQ___RESERVED_CHOICE (4u)
#define ECU_GW_395_TBOX_REMOTE_PASSANGER_SEAT_HOT_REQ_CLOSE_CHOICE (6u)
#define ECU_GW_395_TBOX_REMOTE_PASSANGER_SEAT_HOT_REQ_RESERVED_CHOICE (7u)

#define ECU_GW_395_TBOX_REMOTE_DETECT_REQ___IN_ACTIVE_CHOICE (0u)
#define ECU_GW_395_TBOX_REMOTE_DETECT_REQ_ACTIVE_CHOICE (1u)
#define ECU_GW_395_TBOX_REMOTE_DETECT_REQ___RESERVED_CHOICE (2u)
#define ECU_GW_395_TBOX_REMOTE_DETECT_REQ___INVALID_CHOICE (3u)

#define ECU_GW_395_TBOX_REMOTE_AIR_CLEAN_REQ___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_REMOTE_AIR_CLEAN_REQ_AC_CLEAN_OPEN_CHOICE (1u)
#define ECU_GW_395_TBOX_REMOTE_AIR_CLEAN_REQ__AC_CLEAN_CLOSE_CHOICE (2u)
#define ECU_GW_395_TBOX_REMOTE_AIR_CLEAN_REQ___INVALID_CHOICE (3u)

#define ECU_GW_395_TBOX_REMOTE_DIS_REQ_INACTIVE_CHOICE (0u)
#define ECU_GW_395_TBOX_REMOTE_DIS_REQ_ACTIVE_CHOICE (1u)

#define ECU_GW_395_TBOX_REMOTE_AIR_QUALITY_INQUIRE___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_REMOTE_AIR_QUALITY_INQUIRE_REQUEST_0X2____RESERVED_CHOICE (1u)
#define ECU_GW_395_TBOX_REMOTE_AIR_QUALITY_INQUIRE___INVALID_CHOICE (3u)

#define ECU_GW_395_TBOX_REMOTE_DR_VENTILATIE_REQ___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_REMOTE_DR_VENTILATIE_REQ_WIND_LEVEL1_CHOICE (1u)
#define ECU_GW_395_TBOX_REMOTE_DR_VENTILATIE_REQ___WIND_LEVEL2_CHOICE (2u)
#define ECU_GW_395_TBOX_REMOTE_DR_VENTILATIE_REQ___WIND_LEVEL3_CHOICE (3u)
#define ECU_GW_395_TBOX_REMOTE_DR_VENTILATIE_REQ___RESERVED_CHOICE (4u)
#define ECU_GW_395_TBOX_REMOTE_DR_VENTILATIE_REQ_CLOSE_CHOICE (6u)
#define ECU_GW_395_TBOX_REMOTE_DR_VENTILATIE_REQ_RESERVED_CHOICE (7u)

#define ECU_GW_395_TBOX_REMOTE_PA_VENTILATIE_REQ___NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_REMOTE_PA_VENTILATIE_REQ_WIND_LEVEL1_CHOICE (1u)
#define ECU_GW_395_TBOX_REMOTE_PA_VENTILATIE_REQ___WIND_LEVEL2_CHOICE (2u)
#define ECU_GW_395_TBOX_REMOTE_PA_VENTILATIE_REQ___WIND_LEVEL3_CHOICE (3u)
#define ECU_GW_395_TBOX_REMOTE_PA_VENTILATIE_REQ___RESERVED_CHOICE (4u)
#define ECU_GW_395_TBOX_REMOTE_PA_VENTILATIE_REQ_CLOSE_CHOICE (6u)
#define ECU_GW_395_TBOX_REMOTE_PA_VENTILATIE_REQ_RESERVED_CHOICE (7u)

#define ECU_GW_395_TBOX_REMOTE_INSTALL_REQ_________CHOICE (0u)
#define ECU_GW_395_TBOX_REMOTE_INSTALL_REQ___________1_CHOICE (1u)
#define ECU_GW_395_TBOX_REMOTE_INSTALL_REQ___________2_CHOICE (2u)
#define ECU_GW_395_TBOX_REMOTE_INSTALL_REQ__________CHOICE (3u)

#define ECU_GW_395_TBOX_AP_AMODULE_ENABLE_OFF_CHOICE (0u)
#define ECU_GW_395_TBOX_AP_AMODULE_ENABLE_INACTIVE_CHOICE (1u)
#define ECU_GW_395_TBOX_AP_AMODULE_ENABLE_ON_CHOICE (2u)
#define ECU_GW_395_TBOX_AP_AMODULE_ENABLE_RESERVED_CHOICE (3u)

#define ECU_GW_395_TBOX_APA_MANEUVER_CANCEL___NOT__PRESSED_CHOICE (0u)
#define ECU_GW_395_TBOX_APA_MANEUVER_CANCEL___PRESSED_CHOICE (1u)

#define ECU_GW_395_TBOX_APA_MANEUVER_START___NOT__PRESSED_CHOICE (0u)
#define ECU_GW_395_TBOX_APA_MANEUVER_START___PRESSED_CHOICE (1u)

#define ECU_GW_395_TBOX_APA_MANEUVER_SUSPEND___NOT__PRESSED_CHOICE (0u)
#define ECU_GW_395_TBOX_APA_MANEUVER_SUSPEND___PRESSED_CHOICE (1u)

#define ECU_GW_395_TBOX_APAPOC_MODE_SELECT_NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_APAPOC_MODE_SELECT_LEFT__PARK__OUT_CHOICE (1u)
#define ECU_GW_395_TBOX_APAPOC_MODE_SELECT_RIGHT__PARK__OUT_CHOICE (2u)
#define ECU_GW_395_TBOX_APAPOC_MODE_SELECT_NO__SLOT__AVAILABLE_CHOICE (3u)
#define ECU_GW_395_TBOX_APAPOC_MODE_SELECT_RESERVED_CHOICE (4u)
#define ECU_GW_395_TBOX_APAPOC_MODE_SELECT_INVALID_CHOICE (7u)

#define ECU_GW_395_TBOX_APA_FUCTION_SELECTION___NOT__SELECT_CHOICE (0u)
#define ECU_GW_395_TBOX_APA_FUCTION_SELECTION___PARKING__OUT_CHOICE (1u)
#define ECU_GW_395_TBOX_APA_FUCTION_SELECTION_VERTICAL__IN__OUT_CHOICE (2u)
#define ECU_GW_395_TBOX_APA_FUCTION_SELECTION_PARK_HOMING_CHOICE (3u)

#define ECU_GW_395_TBOX_VERTICALBACKWARD___NOT__PRESSED_CHOICE (0u)
#define ECU_GW_395_TBOX_VERTICALBACKWARD___PRESSED_CHOICE (1u)

#define ECU_GW_395_TBOX_VERTICALFORWARD___NOT__PRESSED_CHOICE (0u)
#define ECU_GW_395_TBOX_VERTICALFORWARD___PRESSED_CHOICE (1u)

#define ECU_GW_395_TBOX_APA_VIDEO_DELAY_INACTIVE_CHOICE (0u)
#define ECU_GW_395_TBOX_APA_VIDEO_DELAY_500MS_1S_CHOICE (1u)
#define ECU_GW_395_TBOX_APA_VIDEO_DELAY_1S_1_5S_CHOICE (2u)
#define ECU_GW_395_TBOX_APA_VIDEO_DELAY_1_5S_2S_CHOICE (3u)
#define ECU_GW_395_TBOX_APA_VIDEO_DELAY_2S_2_5S_CHOICE (4u)
#define ECU_GW_395_TBOX_APA_VIDEO_DELAY_2_5S_3S_CHOICE (5u)
#define ECU_GW_395_TBOX_APA_VIDEO_DELAY_3S_3_5S_CHOICE (6u)
#define ECU_GW_395_TBOX_APA_VIDEO_DELAY_3_5S_4S_CHOICE (7u)
#define ECU_GW_395_TBOX_APA_VIDEO_DELAY_4S_4_5S_CHOICE (8u)
#define ECU_GW_395_TBOX_APA_VIDEO_DELAY_4_5S_5S_CHOICE (9u)
#define ECU_GW_395_TBOX_APA_VIDEO_DELAY_RESERVED_CHOICE (10u)

#define ECU_GW_395_TBOX_APA_SIGNAL_DELAY_INACTIVE_CHOICE (0u)
#define ECU_GW_395_TBOX_APA_SIGNAL_DELAY_500MS_1S_CHOICE (1u)
#define ECU_GW_395_TBOX_APA_SIGNAL_DELAY_1S_1_5S_CHOICE (2u)
#define ECU_GW_395_TBOX_APA_SIGNAL_DELAY_1_5S_2S_CHOICE (3u)
#define ECU_GW_395_TBOX_APA_SIGNAL_DELAY_2S_2_5S_CHOICE (4u)
#define ECU_GW_395_TBOX_APA_SIGNAL_DELAY_2_5S_3S_CHOICE (5u)
#define ECU_GW_395_TBOX_APA_SIGNAL_DELAY_3S_3_5S_CHOICE (6u)
#define ECU_GW_395_TBOX_APA_SIGNAL_DELAY_3_5S_4S_CHOICE (7u)
#define ECU_GW_395_TBOX_APA_SIGNAL_DELAY_4S_4_5S_CHOICE (8u)
#define ECU_GW_395_TBOX_APA_SIGNAL_DELAY_4_5S_5S_CHOICE (9u)
#define ECU_GW_395_TBOX_APA_SIGNAL_DELAY_RESERVED_CHOICE (10u)

#define ECU_GW_395_TBOX_TURN_RIGHT___NOT__PRESSED_CHOICE (0u)
#define ECU_GW_395_TBOX_TURN_RIGHT___PRESSED_CHOICE (1u)

#define ECU_GW_395_TBOX_TURN_LEFT___NOT__PRESSED_CHOICE (0u)
#define ECU_GW_395_TBOX_TURN_LEFT___PRESSED_CHOICE (1u)

#define ECU_GW_395_TBOX_APA_REMOTE_DRIVE_REQ_NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_APA_REMOTE_DRIVE_REQ_FORWARD_CHOICE (1u)
#define ECU_GW_395_TBOX_APA_REMOTE_DRIVE_REQ_BACKWARD_CHOICE (2u)
#define ECU_GW_395_TBOX_APA_REMOTE_DRIVE_REQ_TURNLEFT_CHOICE (3u)
#define ECU_GW_395_TBOX_APA_REMOTE_DRIVE_REQ_TURNRIGHT_CHOICE (4u)
#define ECU_GW_395_TBOX_APA_REMOTE_DRIVE_REQ_STEERING_RETURN_CHOICE (5u)
#define ECU_GW_395_TBOX_APA_REMOTE_DRIVE_REQ_RESERVED_CHOICE (7u)

#define ECU_GW_395_TBOX_SIGNAL_TYPE_NO__SIGNAL_CHOICE (0u)
#define ECU_GW_395_TBOX_SIGNAL_TYPE_2_G_CHOICE (1u)
#define ECU_GW_395_TBOX_SIGNAL_TYPE_3_G_CHOICE (2u)
#define ECU_GW_395_TBOX_SIGNAL_TYPE_4_G_CHOICE (3u)
#define ECU_GW_395_TBOX_SIGNAL_TYPE_5_G_CHOICE (4u)
#define ECU_GW_395_TBOX_SIGNAL_TYPE_RESERVED_CHOICE (5u)

#define ECU_GW_395_TBOX_SIGNAL_STRENGTH_NO__SIGNAL_CHOICE (0u)
#define ECU_GW_395_TBOX_SIGNAL_STRENGTH_1ST__LEVEL_CHOICE (1u)
#define ECU_GW_395_TBOX_SIGNAL_STRENGTH_2ND__LEVEL_CHOICE (2u)
#define ECU_GW_395_TBOX_SIGNAL_STRENGTH_3RD__LEVEL_CHOICE (3u)
#define ECU_GW_395_TBOX_SIGNAL_STRENGTH_4TH__LEVEL_CHOICE (4u)
#define ECU_GW_395_TBOX_SIGNAL_STRENGTH_RESERVED_CHOICE (5u)

#define ECU_GW_395_TBOX_HZP_FUNCTION_REQ_INACTIVE_CHOICE (0u)
#define ECU_GW_395_TBOX_HZP_FUNCTION_REQ_PARKIN_CHOICE (1u)
#define ECU_GW_395_TBOX_HZP_FUNCTION_REQ_PARKOUT_CHOICE (2u)
#define ECU_GW_395_TBOX_HZP_FUNCTION_REQ_RMA_CHOICE (3u)
#define ECU_GW_395_TBOX_HZP_FUNCTION_REQ_RESERVED_CHOICE (4u)

#define ECU_GW_395_TBOX_HZP_CONTROL_ENABLE_INACTIVE_CHOICE (0u)
#define ECU_GW_395_TBOX_HZP_CONTROL_ENABLE_START_CHOICE (1u)
#define ECU_GW_395_TBOX_HZP_CONTROL_ENABLE_END_CHOICE (2u)
#define ECU_GW_395_TBOX_HZP_CONTROL_ENABLE_CANCEL_CHOICE (3u)
#define ECU_GW_395_TBOX_HZP_CONTROL_ENABLE_SUSPEND_CHOICE (4u)
#define ECU_GW_395_TBOX_HZP_CONTROL_ENABLE_RECOVER_CHOICE (5u)
#define ECU_GW_395_TBOX_HZP_CONTROL_ENABLE_DISCONNECT_RESERVED__CHOICE (6u)
#define ECU_GW_395_TBOX_HZP_CONTROL_ENABLE_RESERVED_CHOICE (7u)

#define ECU_GW_395_TBOX_AVM_DISPLAY_FORM_NO__REQUEST_CHOICE (0u)
#define ECU_GW_395_TBOX_AVM_DISPLAY_FORM_ALL__FRONT_CHOICE (1u)
#define ECU_GW_395_TBOX_AVM_DISPLAY_FORM_ALL__LEFT_CHOICE (2u)
#define ECU_GW_395_TBOX_AVM_DISPLAY_FORM_ALL__RIGHT_CHOICE (3u)
#define ECU_GW_395_TBOX_AVM_DISPLAY_FORM_ALL_REAR_CHOICE (4u)
#define ECU_GW_395_TBOX_AVM_DISPLAY_FORM_RESERVED_CHOICE (5u)

#define ECU_GW_18_A_TCU_AP_ADRIVER_INTERRUPTION_NO__INTERRUPTION_CHOICE (0u)
#define ECU_GW_18_A_TCU_AP_ADRIVER_INTERRUPTION_INTERRUPTION_CHOICE (1u)
#define ECU_GW_18_A_TCU_AP_ADRIVER_INTERRUPTION_RESERVED_CHOICE (2u)
#define ECU_GW_18_A_TCU_AP_ADRIVER_INTERRUPTION_INVALID_CHOICE (3u)

#define ECU_GW_18_A_TCU_APA_SHIFT_GEAR_REQUEST_ENABLE_NO__REQUEST__RECEIVED_CHOICE (0u)
#define ECU_GW_18_A_TCU_APA_SHIFT_GEAR_REQUEST_ENABLE_CONTROL_ENABLED_CHOICE (1u)
#define ECU_GW_18_A_TCU_APA_SHIFT_GEAR_REQUEST_ENABLE_CONTROL_DISABLE_______CHOICE (2u)
#define ECU_GW_18_A_TCU_APA_SHIFT_GEAR_REQUEST_ENABLE_INVALID_CHOICE (3u)

#define ECU_GW_24_A_ESL_SHIFT_LEVER_POSITIONREQUEST___CENTER_CHOICE (0u)
#define ECU_GW_24_A_ESL_SHIFT_LEVER_POSITIONREQUEST___UP_CHOICE (1u)
#define ECU_GW_24_A_ESL_SHIFT_LEVER_POSITIONREQUEST___DOWN_CHOICE (2u)
#define ECU_GW_24_A_ESL_SHIFT_LEVER_POSITIONREQUEST___UP___UP_CHOICE (3u)
#define ECU_GW_24_A_ESL_SHIFT_LEVER_POSITIONREQUEST___DOWN___DOWN_CHOICE (4u)
#define ECU_GW_24_A_ESL_SHIFT_LEVER_POSITIONREQUEST___RESERVED_CHOICE (5u)
#define ECU_GW_24_A_ESL_SHIFT_LEVER_POSITIONREQUEST___INVALID_CHOICE (15u)

#define ECU_GW_24_A_ESL_UN_LOCK_BUTTON_POSITION_STATUS_NOT__PRESSED_CHOICE (0u)
#define ECU_GW_24_A_ESL_UN_LOCK_BUTTON_POSITION_STATUS_PRESSED_CHOICE (1u)
#define ECU_GW_24_A_ESL_UN_LOCK_BUTTON_POSITION_STATUS_RESERVED_CHOICE (2u)
#define ECU_GW_24_A_ESL_UN_LOCK_BUTTON_POSITION_STATUS_INVALID_CHOICE (3u)

#define ECU_GW_24_A_ESL_EPB_BUTTON_POSITION_STATUS_NOT__PRESSED_CHOICE (0u)
#define ECU_GW_24_A_ESL_EPB_BUTTON_POSITION_STATUS_PRESSED_CHOICE (1u)
#define ECU_GW_24_A_ESL_EPB_BUTTON_POSITION_STATUS_RESERVED_CHOICE (2u)
#define ECU_GW_24_A_ESL_EPB_BUTTON_POSITION_STATUS_INVALID_CHOICE (3u)

#define ECU_GW_24_A_ESL_DRIVE_MODE_REQUEST___AUTO_CHOICE (0u)
#define ECU_GW_24_A_ESL_DRIVE_MODE_REQUEST___MANUAL__SPORT_CHOICE (1u)
#define ECU_GW_24_A_ESL_DRIVE_MODE_REQUEST___RESERVED_CHOICE (2u)
#define ECU_GW_24_A_ESL_DRIVE_MODE_REQUEST___INVALID_CHOICE (15u)

#define ECU_GW_24_A_ESL_DRIVER_PARK_REQUEST___DRIVER__PARK__NOT__REQUESTED_CHOICE (0u)
#define ECU_GW_24_A_ESL_DRIVER_PARK_REQUEST___DRIVER__PARK__REQUESTED_CHOICE (1u)
#define ECU_GW_24_A_ESL_DRIVER_PARK_REQUEST_RESERVED_CHOICE (2u)
#define ECU_GW_24_A_ESL_DRIVER_PARK_REQUEST_INVALID_CHOICE (3u)

#define ECU_GW_24_A_ESL_SHIFT_LEVER_POSITION_FAULT_STS_NORMAL_CHOICE (0u)
#define ECU_GW_24_A_ESL_SHIFT_LEVER_POSITION_FAULT_STS_DEGRADED_CHOICE (1u)
#define ECU_GW_24_A_ESL_SHIFT_LEVER_POSITION_FAULT_STS_LIMPHOME_CHOICE (2u)
#define ECU_GW_24_A_ESL_SHIFT_LEVER_POSITION_FAULT_STS_FAULT_CHOICE (3u)

#define ECU_GW_24_A_ESL_DRIVE_MODE_FAULT_STATUS_NORMAL_CHOICE (0u)
#define ECU_GW_24_A_ESL_DRIVE_MODE_FAULT_STATUS_DEGRADED_CHOICE (1u)
#define ECU_GW_24_A_ESL_DRIVE_MODE_FAULT_STATUS_FAULT_CHOICE (2u)
#define ECU_GW_24_A_ESL_DRIVE_MODE_FAULT_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_24_A_ESL_DRIVER_PARK_BUTTON_FAULT_STATUS_NORMAL_CHOICE (0u)
#define ECU_GW_24_A_ESL_DRIVER_PARK_BUTTON_FAULT_STATUS_RESERVED_1_CHOICE (1u)
#define ECU_GW_24_A_ESL_DRIVER_PARK_BUTTON_FAULT_STATUS_FAULT_CHOICE (2u)
#define ECU_GW_24_A_ESL_DRIVER_PARK_BUTTON_FAULT_STATUS_RESERVED_3_CHOICE (3u)

#define ECU_GW_24_A_ESL_UN_LOCK_BUTTON_FAULT_STATUS_NORMAL_CHOICE (0u)
#define ECU_GW_24_A_ESL_UN_LOCK_BUTTON_FAULT_STATUS_RESERVE_CHOICE (1u)
#define ECU_GW_24_A_ESL_UN_LOCK_BUTTON_FAULT_STATUS_FAULT_CHOICE (2u)
#define ECU_GW_24_A_ESL_UN_LOCK_BUTTON_FAULT_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_24_A_ESL_EPB_BUTTON_FAULT_STATUS_NORMAL_CHOICE (0u)
#define ECU_GW_24_A_ESL_EPB_BUTTON_FAULT_STATUS_RESERVE_CHOICE (1u)
#define ECU_GW_24_A_ESL_EPB_BUTTON_FAULT_STATUS_FAULT_CHOICE (2u)
#define ECU_GW_24_A_ESL_EPB_BUTTON_FAULT_STATUS_RESERVED_CHOICE (3u)

#define ECU_GW_24_A_ESL_HALL_STATUS_DEFAULT_CHOICE (0u)
#define ECU_GW_24_A_ESL_HALL_STATUS_RESERVED_CHOICE (1u)
#define ECU_GW_24_A_ESL_HALL_STATUS_M_S_M__63_CHOICE (63u)
#define ECU_GW_24_A_ESL_HALL_STATUS_M__127_CHOICE (127u)
#define ECU_GW_24_A_ESL_HALL_STATUS_M_S_M__159_CHOICE (159u)
#define ECU_GW_24_A_ESL_HALL_STATUS_AUTO_M_S_CHOICE (187u)
#define ECU_GW_24_A_ESL_HALL_STATUS_M_S_CHOICE (191u)
#define ECU_GW_24_A_ESL_HALL_STATUS_M__223_CHOICE (223u)
#define ECU_GW_24_A_ESL_HALL_STATUS_DOWN1__DOWN2_CHOICE (231u)
#define ECU_GW_24_A_ESL_HALL_STATUS_DOWN2_CHOICE (239u)
#define ECU_GW_24_A_ESL_HALL_STATUS_AUTO__DOWN1_CHOICE (243u)
#define ECU_GW_24_A_ESL_HALL_STATUS_DOWN1_CHOICE (247u)
#define ECU_GW_24_A_ESL_HALL_STATUS_AUTO_UP1_CHOICE (249u)
#define ECU_GW_24_A_ESL_HALL_STATUS_AUTO_CHOICE (251u)
#define ECU_GW_24_A_ESL_HALL_STATUS_UP1_UP2_CHOICE (252u)
#define ECU_GW_24_A_ESL_HALL_STATUS_UP1_CHOICE (253u)
#define ECU_GW_24_A_ESL_HALL_STATUS_UP2_CHOICE (254u)

#define ECU_GW_24_A_ESL_RESET_STS_VALID_CHOICE (0u)
#define ECU_GW_24_A_ESL_RESET_STS_GW_________CHOICE (1u)
#define ECU_GW_24_A_ESL_RESET_STS______________CHOICE (2u)
#define ECU_GW_24_A_ESL_RESET_STS________________CHOICE (3u)
#define ECU_GW_24_A_ESL_RESET_STS_RESERVE_CHOICE (4u)
#define ECU_GW_24_A_ESL_RESET_STS_INVALID_CHOICE (7u)

#define ECU_GW_24_A_ESL_TCUGEAR_REF__UNKNOW_CHOICE (0u)
#define ECU_GW_24_A_ESL_TCUGEAR_REF_PARKING_CHOICE (1u)
#define ECU_GW_24_A_ESL_TCUGEAR_REF_REVERSE_CHOICE (2u)
#define ECU_GW_24_A_ESL_TCUGEAR_REF_NEUTRAL_CHOICE (3u)
#define ECU_GW_24_A_ESL_TCUGEAR_REF_D_CHOICE (4u)
#define ECU_GW_24_A_ESL_TCUGEAR_REF_D3_CHOICE (5u)
#define ECU_GW_24_A_ESL_TCUGEAR_REF_D2_CHOICE (6u)
#define ECU_GW_24_A_ESL_TCUGEAR_REF_L_CHOICE (7u)
#define ECU_GW_24_A_ESL_TCUGEAR_REF_M_OR_S_CHOICE (8u)
#define ECU_GW_24_A_ESL_TCUGEAR_REF_RESERVED_9_CHOICE (9u)
#define ECU_GW_24_A_ESL_TCUGEAR_REF_RESERVED_10_CHOICE (10u)
#define ECU_GW_24_A_ESL_TCUGEAR_REF_RESERVED_11_CHOICE (11u)
#define ECU_GW_24_A_ESL_TCUGEAR_REF_RESERVED_12_CHOICE (12u)
#define ECU_GW_24_A_ESL_TCUGEAR_REF_RESERVED_13_CHOICE (13u)
#define ECU_GW_24_A_ESL_TCUGEAR_REF_RESERVED_14_CHOICE (14u)

#define ECU_GW_2_D7_HU_3_D_HOR_ANGLE_REQ_INACTIVE_CHOICE (0u)
#define ECU_GW_2_D7_HU_3_D_HOR_ANGLE_REQ_0_360___CHOICE (1u)
#define ECU_GW_2_D7_HU_3_D_HOR_ANGLE_REQ_RESERVED_CHOICE (362u)
#define ECU_GW_2_D7_HU_3_D_HOR_ANGLE_REQ_INVALID_CHOICE (511u)

#define ECU_GW_2_D7_HU_DVR_DISPLAY_VISION_NO__REQUEST_CHOICE (0u)
#define ECU_GW_2_D7_HU_DVR_DISPLAY_VISION_FRONT_CHOICE (1u)
#define ECU_GW_2_D7_HU_DVR_DISPLAY_VISION_REAR_CHOICE (2u)
#define ECU_GW_2_D7_HU_DVR_DISPLAY_VISION_LEFT_CHOICE (3u)
#define ECU_GW_2_D7_HU_DVR_DISPLAY_VISION_RIGHT_CHOICE (4u)
#define ECU_GW_2_D7_HU_DVR_DISPLAY_VISION_ALL_CHOICE (5u)
#define ECU_GW_2_D7_HU_DVR_DISPLAY_VISION_RESERVED_CHOICE (6u)
#define ECU_GW_2_D7_HU_DVR_DISPLAY_VISION_INVALID_CHOICE (7u)

#define ECU_GW_2_D7_HU_AV_MSWITCH_NO_REQUEST__CHOICE (0u)
#define ECU_GW_2_D7_HU_AV_MSWITCH_REQUEST_CHOICE (1u)

#define ECU_GW_2_D7_HU_DVR_MODE_INACTIVE_CHOICE (0u)
#define ECU_GW_2_D7_HU_DVR_MODE_REAL_TIME_MODE_CHOICE (1u)
#define ECU_GW_2_D7_HU_DVR_MODE_REPLAY_MODE_CHOICE (2u)
#define ECU_GW_2_D7_HU_DVR_MODE_SETTING_MODE_CHOICE (3u)

#define ECU_GW_2_D7_HU_AVM_TRIGGERMETHOD_NO_REQUEST_CHOICE (0u)
#define ECU_GW_2_D7_HU_AVM_TRIGGERMETHOD____________1_CHOICE (1u)
#define ECU_GW_2_D7_HU_AVM_TRIGGERMETHOD__________2_CHOICE (2u)
#define ECU_GW_2_D7_HU_AVM_TRIGGERMETHOD____________3_CHOICE (3u)
#define ECU_GW_2_D7_HU_AVM_TRIGGERMETHOD__________4_CHOICE (4u)
#define ECU_GW_2_D7_HU_AVM_TRIGGERMETHOD_RESERVED_CHOICE (5u)

#define ECU_GW_2_D7_HU_SCREEN_OPERATE_STATUS_RELEASED_CHOICE (0u)
#define ECU_GW_2_D7_HU_SCREEN_OPERATE_STATUS_PRESSED_CHOICE (1u)
#define ECU_GW_2_D7_HU_SCREEN_OPERATE_STATUS___RESERVED_CHOICE (3u)

#define ECU_GW_2_D7_HU_DVR_DRIVING_PLAY_SWITCH_STATUS_NOT__ACTIVE_CHOICE (0u)
#define ECU_GW_2_D7_HU_DVR_DRIVING_PLAY_SWITCH_STATUS_OPEN_CHOICE (1u)
#define ECU_GW_2_D7_HU_DVR_DRIVING_PLAY_SWITCH_STATUS_CLOSE_CHOICE (2u)
#define ECU_GW_2_D7_HU_DVR_DRIVING_PLAY_SWITCH_STATUS_INVALID_CHOICE (3u)

#define ECU_GW_341_PCU_PWR_TQ_WH_MIN_VLD_INVALID_CHOICE (0u)
#define ECU_GW_341_PCU_PWR_TQ_WH_MIN_VLD_VALID_CHOICE (1u)

#define ECU_GW_341_PCU_PWR_TQ_WH_MAX_VLD_INVALID_CHOICE (0u)
#define ECU_GW_341_PCU_PWR_TQ_WH_MAX_VLD_VALID_CHOICE (1u)

#define ECU_GW_341_PCU_ACC_PED_SHIELD_NOT__SHIELD_CHOICE (0u)
#define ECU_GW_341_PCU_ACC_PED_SHIELD_SHIELD_CHOICE (1u)

#define ECU_GW_3_D6_SLCM_RR_WINDOW_STATUS_INVALID_CHOICE (255u)

#define ECU_GW_3_D6_SLCM_FR_WINDOW_STATUS_INVALID_CHOICE (255u)

#define ECU_GW_3_D8_SLCM_RL_WIN_MOTOR_STOPPED_CHOICE (0u)
#define ECU_GW_3_D8_SLCM_RL_WIN_MOTOR_WINDOW_CLOSE_CHOICE (1u)
#define ECU_GW_3_D8_SLCM_RL_WIN_MOTOR_WINDOW_OPEN_CHOICE (2u)
#define ECU_GW_3_D8_SLCM_RL_WIN_MOTOR_RESERVED_CHOICE (3u)

#define ECU_GW_3_D8_SLCM_DRIVER_WIN_MOTOR_STOPPED_CHOICE (0u)
#define ECU_GW_3_D8_SLCM_DRIVER_WIN_MOTOR_WINDOW_CLOSE_CHOICE (1u)
#define ECU_GW_3_D8_SLCM_DRIVER_WIN_MOTOR_WINDOW_OPEN_CHOICE (2u)
#define ECU_GW_3_D8_SLCM_DRIVER_WIN_MOTOR_RESERVED_CHOICE (3u)

#define ECU_GW_3_D8_SLCM_RL_WINDOW_SWITCH_NO_INPUT_CHOICE (0u)
#define ECU_GW_3_D8_SLCM_RL_WINDOW_SWITCH_MANUAL__UP_CHOICE (1u)
#define ECU_GW_3_D8_SLCM_RL_WINDOW_SWITCH_MANUAL__DOWN_CHOICE (2u)
#define ECU_GW_3_D8_SLCM_RL_WINDOW_SWITCH_RESERVED_3_CHOICE (3u)
#define ECU_GW_3_D8_SLCM_RL_WINDOW_SWITCH_AUTO__UP_CHOICE (5u)
#define ECU_GW_3_D8_SLCM_RL_WINDOW_SWITCH_AUTO__DOWN_CHOICE (6u)
#define ECU_GW_3_D8_SLCM_RL_WINDOW_SWITCH_RESERVED_7_CHOICE (7u)

#define ECU_GW_3_D8_SLCM_DRIVER_WINDOW_SWITCH_NO_INPUT_CHOICE (0u)
#define ECU_GW_3_D8_SLCM_DRIVER_WINDOW_SWITCH_MANUAL__UP_CHOICE (1u)
#define ECU_GW_3_D8_SLCM_DRIVER_WINDOW_SWITCH_MANUAL__DOWN_CHOICE (2u)
#define ECU_GW_3_D8_SLCM_DRIVER_WINDOW_SWITCH_RESERVED_3_CHOICE (3u)
#define ECU_GW_3_D8_SLCM_DRIVER_WINDOW_SWITCH_AUTO__UP_CHOICE (5u)
#define ECU_GW_3_D8_SLCM_DRIVER_WINDOW_SWITCH_AUTO__DOWN_CHOICE (6u)
#define ECU_GW_3_D8_SLCM_DRIVER_WINDOW_SWITCH_RESERVED_7_CHOICE (7u)

#define ECU_GW_3_D8_SLCM_RL_WINDOW_AP_ACTICE_INACTIVE_CHOICE (0u)
#define ECU_GW_3_D8_SLCM_RL_WINDOW_AP_ACTICE_ACTIVE_CHOICE (1u)

#define ECU_GW_3_D8_SLCM_DRIVER_WINDOW_AP_ACTICE_INACTIVE_CHOICE (0u)
#define ECU_GW_3_D8_SLCM_DRIVER_WINDOW_AP_ACTICE_ACTIVE_CHOICE (1u)

#define ECU_GW_3_D8_SLCM_RL_WINDOW_INITIALIZED_STS_DE__INITIALIZED_CHOICE (0u)
#define ECU_GW_3_D8_SLCM_RL_WINDOW_INITIALIZED_STS_INITIALIZED_CHOICE (1u)

#define ECU_GW_3_D8_SLCM_DRIVER_WINDOW_INITIALIZED_STS_DE__INITIALIZED_CHOICE (0u)
#define ECU_GW_3_D8_SLCM_DRIVER_WINDOW_INITIALIZED_STS_INITIALIZED_CHOICE (1u)

#define ECU_GW_3_D8_SLCM_RL_WINDOW_STATUS_INVALID_CHOICE (255u)

#define ECU_GW_3_D8_SLCM_DRIVER_WINDOW_STATUS_INVALID_CHOICE (255u)

#define ECU_GW_3_D8_SLCM_FAIL_STATUS_NO_ERROR_CHOICE (0u)
#define ECU_GW_3_D8_SLCM_FAIL_STATUS_ERROR_CHOICE (1u)

#define ECU_GW_3_DE_DSM_DSM_HORIZONTAL_POSITION_STS_INACTIVE_CHOICE (0u)
#define ECU_GW_3_DE_DSM_DSM_HORIZONTAL_POSITION_STS_0__100__CHOICE (1u)
#define ECU_GW_3_DE_DSM_DSM_HORIZONTAL_POSITION_STS_RESERVED_CHOICE (204u)
#define ECU_GW_3_DE_DSM_DSM_HORIZONTAL_POSITION_STS_INVALID_CHOICE (255u)

#define ECU_GW_3_DE_DSM_DSM_FRONT_END_POSITION_STS_INACTIVE_CHOICE (0u)
#define ECU_GW_3_DE_DSM_DSM_FRONT_END_POSITION_STS_0__100__CHOICE (1u)
#define ECU_GW_3_DE_DSM_DSM_FRONT_END_POSITION_STS_RESERVED_CHOICE (204u)
#define ECU_GW_3_DE_DSM_DSM_FRONT_END_POSITION_STS_INVALID_CHOICE (255u)

#define ECU_GW_3_DE_DSM_DSM_VERTICAL_POSITION_STS_INACTIVE_CHOICE (0u)
#define ECU_GW_3_DE_DSM_DSM_VERTICAL_POSITION_STS_0__100__CHOICE (1u)
#define ECU_GW_3_DE_DSM_DSM_VERTICAL_POSITION_STS_RESERVED_CHOICE (204u)
#define ECU_GW_3_DE_DSM_DSM_VERTICAL_POSITION_STS_INVALID_CHOICE (255u)

#define ECU_GW_3_DE_DSM_DSM_BACKREST_POSITION_STS_INACTIVE_CHOICE (0u)
#define ECU_GW_3_DE_DSM_DSM_BACKREST_POSITION_STS_0__100__CHOICE (1u)
#define ECU_GW_3_DE_DSM_DSM_BACKREST_POSITION_STS_RESERVED_CHOICE (204u)
#define ECU_GW_3_DE_DSM_DSM_BACKREST_POSITION_STS_INVALID_CHOICE (255u)

#define ECU_GW_3_EE_GW_SAF_CERT_STS_INACTIVE____________CHOICE (0u)
#define ECU_GW_3_EE_GW_SAF_CERT_STS_SUCCESS_____CHOICE (1u)
#define ECU_GW_3_EE_GW_SAF_CERT_STS_FAILED_____CHOICE (2u)
#define ECU_GW_3_EE_GW_SAF_CERT_STS________CHOICE (3u)

#define ECU_ACC_2_D3_ACC_AEB_STATUS_FOR_SRS_OFF_CHOICE (0u)
#define ECU_ACC_2_D3_ACC_AEB_STATUS_FOR_SRS_ON_CHOICE (1u)
#define ECU_ACC_2_D3_ACC_AEB_STATUS_FOR_SRS__RESERVED_CHOICE (2u)
#define ECU_ACC_2_D3_ACC_AEB_STATUS_FOR_SRS_FAILURE_CHOICE (3u)

#define ECU_ACC_2_D3_ACC_AEB_ACTIVE_FOR_SRS_NOT__ACTIVE_CHOICE (0u)
#define ECU_ACC_2_D3_ACC_AEB_ACTIVE_FOR_SRS_ACTIVE__CHOICE (1u)

#define ECU_ACC_2_D3_ACC_AEB_TARGET_LNG_RANGE_FOR_SRS__70_180_CHOICE (0u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_LNG_RANGE_FOR_SRS_RESERVED_CHOICE (501u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_LNG_RANGE_FOR_SRS_NO_DISPLAY_CHOICE (511u)

#define ECU_ACC_2_D3_ACC_AEB_TARGET_REL_SPEED_FOR_SRS__250_250_CHOICE (0u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_REL_SPEED_FOR_SRS_RESERVED_CHOICE (501u)

#define ECU_ACC_2_D3_ACC_AEB_TARGET_TTC_FOR_SRS_0_01_2_50_CHOICE (0u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_TTC_FOR_SRS_TIME_TO__IMPACT_MORE_THAN_2_5S_AND_VALID_CHOICE (250u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_TTC_FOR_SRS_TIMEOUT_CHOICE (251u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_TTC_FOR_SRS_RESERVE_CHOICE (252u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_TTC_FOR_SRS_INVAILD_CHOICE (254u)

#define ECU_ACC_2_D3_ACC_AEB_TARGET_TYPE_FOR_SRS_NO_DISPLAY_CHOICE (0u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_TYPE_FOR_SRS_SEDAN_CHOICE (1u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_TYPE_FOR_SRS_MOTORCYCLE_CHOICE (2u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_TYPE_FOR_SRS_PEDESTRIAN_CHOICE (3u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_TYPE_FOR_SRS_BICYCLE_CHOICE (4u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_TYPE_FOR_SRS_BUS_CHOICE (5u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_TYPE_FOR_SRS_RESERVED_6_CHOICE (6u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_TYPE_FOR_SRS_TRUCK_CHOICE (7u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_TYPE_FOR_SRS_RESERVED_8_CHOICE (8u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_TYPE_FOR_SRS_OTHER_CHOICE (15u)

#define ECU_ACC_2_D3_ACC_CRC_CHECKR_282_0X_FF__XOR_VALUE_0X_FF__INPUT_DATA_REFLECTED__NO___RESULT_DATA_REFLECTED__NO__CHECK_0X48___MAGIC_CHECK_0X_C4___CHOICE (0u)

#define ECU_ACC_2_D3_ACC_AEB_TARGET_LAT_RANGE_FOR_SRS__50_50M_CHOICE (0u)
#define ECU_ACC_2_D3_ACC_AEB_TARGET_LAT_RANGE_FOR_SRS_RESERVED_CHOICE (1001u)

#define ECU_ACC_2_D3_ACC_CRC_CHECK_283_0X_FF__XOR_VALUE_0X_FF__INPUT_DATA_REFLECTED__NO___RESULT_DATA_REFLECTED__NO__CHECK_0X48___MAGIC_CHECK_0X_C4___CHOICE (0u)

#define ECU_ACC_301_ACC_RESET_STS_VALID_CHOICE (0u)
#define ECU_ACC_301_ACC_RESET_STS_GW_________CHOICE (1u)
#define ECU_ACC_301_ACC_RESET_STS______________CHOICE (2u)
#define ECU_ACC_301_ACC_RESET_STS________________CHOICE (3u)
#define ECU_ACC_301_ACC_RESET_STS_RESERVE_CHOICE (4u)
#define ECU_ACC_301_ACC_RESET_STS_INVALID_CHOICE (7u)

#define ECU_LAS_30_C_LAS_RESET_STS_VALID_CHOICE (0u)
#define ECU_LAS_30_C_LAS_RESET_STS_GW_________CHOICE (1u)
#define ECU_LAS_30_C_LAS_RESET_STS______________CHOICE (2u)
#define ECU_LAS_30_C_LAS_RESET_STS________________CHOICE (3u)
#define ECU_LAS_30_C_LAS_RESET_STS_RESERVE_CHOICE (4u)
#define ECU_LAS_30_C_LAS_RESET_STS_INVALID_CHOICE (7u)

#define ECU_GW_2_E2_RLR_ELK_OBJ1_TYPE_NOT__DETECTED_CHOICE (0u)
#define ECU_GW_2_E2_RLR_ELK_OBJ1_TYPE_CAR_CHOICE (1u)
#define ECU_GW_2_E2_RLR_ELK_OBJ1_TYPE_TRUCK_CHOICE (2u)
#define ECU_GW_2_E2_RLR_ELK_OBJ1_TYPE_BICYCLE_MOTORBIKE_CHOICE (3u)
#define ECU_GW_2_E2_RLR_ELK_OBJ1_TYPE_PEDESTRIAN_CHOICE (4u)
#define ECU_GW_2_E2_RLR_ELK_OBJ1_TYPE_GENERAL_CHOICE (5u)
#define ECU_GW_2_E2_RLR_ELK_OBJ1_TYPE_ANIMAL_CHOICE (6u)
#define ECU_GW_2_E2_RLR_ELK_OBJ1_TYPE_UNCERTAIN_CHOICE (7u)

#define ECU_GW_2_E2_RLR_ELK_OBJ1_LOCATION_UNKNOWN_CHOICE (0u)
#define ECU_GW_2_E2_RLR_ELK_OBJ1_LOCATION_LEFT__LANE_CHOICE (1u)
#define ECU_GW_2_E2_RLR_ELK_OBJ1_LOCATION_RIGHT___LANE_CHOICE (2u)
#define ECU_GW_2_E2_RLR_ELK_OBJ1_LOCATION_EGO__LANE_CHOICE (3u)

#define ECU_GW_2_E2_RLR_ELK_OBJ1_MEASURED_UNKNOWN_CHOICE (0u)
#define ECU_GW_2_E2_RLR_ELK_OBJ1_MEASURED_MEASURED_CHOICE (1u)
#define ECU_GW_2_E2_RLR_ELK_OBJ1_MEASURED_PREDICTED_CHOICE (2u)
#define ECU_GW_2_E2_RLR_ELK_OBJ1_MEASURED_RESERVED_CHOICE (3u)

#define ECU_GW_2_E2_RLR_ELK_OBJ2_TYPE_NOT__DETECTED_CHOICE (0u)
#define ECU_GW_2_E2_RLR_ELK_OBJ2_TYPE_CAR_CHOICE (1u)
#define ECU_GW_2_E2_RLR_ELK_OBJ2_TYPE_TRUCK_CHOICE (2u)
#define ECU_GW_2_E2_RLR_ELK_OBJ2_TYPE_BICYCLE_MOTORBIKE_CHOICE (3u)
#define ECU_GW_2_E2_RLR_ELK_OBJ2_TYPE_PEDESTRIAN_CHOICE (4u)
#define ECU_GW_2_E2_RLR_ELK_OBJ2_TYPE_GENERAL_CHOICE (5u)
#define ECU_GW_2_E2_RLR_ELK_OBJ2_TYPE_ANIMAL_CHOICE (6u)
#define ECU_GW_2_E2_RLR_ELK_OBJ2_TYPE_UNCERTAIN_CHOICE (7u)

#define ECU_GW_2_E2_RLR_ELK_OBJ2_LOCATION_UNKNOWN_CHOICE (0u)
#define ECU_GW_2_E2_RLR_ELK_OBJ2_LOCATION_LEFT__LANE_CHOICE (1u)
#define ECU_GW_2_E2_RLR_ELK_OBJ2_LOCATION_RIGHT___LANE_CHOICE (2u)
#define ECU_GW_2_E2_RLR_ELK_OBJ2_LOCATION_EGO__LANE_CHOICE (3u)

#define ECU_GW_2_E2_RLR_ELK_OBJ2_MEASURED_UNKNOWN_CHOICE (0u)
#define ECU_GW_2_E2_RLR_ELK_OBJ2_MEASURED_MEASURED_CHOICE (1u)
#define ECU_GW_2_E2_RLR_ELK_OBJ2_MEASURED_PREDICTED_CHOICE (2u)
#define ECU_GW_2_E2_RLR_ELK_OBJ2_MEASURED_RESERVED_CHOICE (3u)

#define ECU_GW_2_E3_RLR_ELK_OBJ3_TYPE_NOT__DETECTED_CHOICE (0u)
#define ECU_GW_2_E3_RLR_ELK_OBJ3_TYPE_CAR_CHOICE (1u)
#define ECU_GW_2_E3_RLR_ELK_OBJ3_TYPE_TRUCK_CHOICE (2u)
#define ECU_GW_2_E3_RLR_ELK_OBJ3_TYPE_BICYCLE_MOTORBIKE_CHOICE (3u)
#define ECU_GW_2_E3_RLR_ELK_OBJ3_TYPE_PEDESTRIAN_CHOICE (4u)
#define ECU_GW_2_E3_RLR_ELK_OBJ3_TYPE_GENERAL_CHOICE (5u)
#define ECU_GW_2_E3_RLR_ELK_OBJ3_TYPE_ANIMAL_CHOICE (6u)
#define ECU_GW_2_E3_RLR_ELK_OBJ3_TYPE_UNCERTAIN_CHOICE (7u)

#define ECU_GW_2_E3_RLR_ELK_OBJ3_LOCATION_UNKNOWN_CHOICE (0u)
#define ECU_GW_2_E3_RLR_ELK_OBJ3_LOCATION_LEFT__LANE_CHOICE (1u)
#define ECU_GW_2_E3_RLR_ELK_OBJ3_LOCATION_RIGHT___LANE_CHOICE (2u)
#define ECU_GW_2_E3_RLR_ELK_OBJ3_LOCATION_EGO__LANE_CHOICE (3u)

#define ECU_GW_2_E3_RLR_ELK_OBJ3_MEASURED_UNKNOWN_CHOICE (0u)
#define ECU_GW_2_E3_RLR_ELK_OBJ3_MEASURED_MEASURED_CHOICE (1u)
#define ECU_GW_2_E3_RLR_ELK_OBJ3_MEASURED_PREDICTED_CHOICE (2u)
#define ECU_GW_2_E3_RLR_ELK_OBJ3_MEASURED_RESERVED_CHOICE (3u)

#define ECU_GW_2_E3_RLR_ELK_OBJ4_TYPE_NOT__DETECTED_CHOICE (0u)
#define ECU_GW_2_E3_RLR_ELK_OBJ4_TYPE_CAR_CHOICE (1u)
#define ECU_GW_2_E3_RLR_ELK_OBJ4_TYPE_TRUCK_CHOICE (2u)
#define ECU_GW_2_E3_RLR_ELK_OBJ4_TYPE_BICYCLE_MOTORBIKE_CHOICE (3u)
#define ECU_GW_2_E3_RLR_ELK_OBJ4_TYPE_PEDESTRIAN_CHOICE (4u)
#define ECU_GW_2_E3_RLR_ELK_OBJ4_TYPE_GENERAL_CHOICE (5u)
#define ECU_GW_2_E3_RLR_ELK_OBJ4_TYPE_ANIMAL_CHOICE (6u)
#define ECU_GW_2_E3_RLR_ELK_OBJ4_TYPE_UNCERTAIN_CHOICE (7u)

#define ECU_GW_2_E3_RLR_ELK_OBJ4_LOCATION_UNKNOWN_CHOICE (0u)
#define ECU_GW_2_E3_RLR_ELK_OBJ4_LOCATION_LEFT__LANE_CHOICE (1u)
#define ECU_GW_2_E3_RLR_ELK_OBJ4_LOCATION_RIGHT___LANE_CHOICE (2u)
#define ECU_GW_2_E3_RLR_ELK_OBJ4_LOCATION_EGO__LANE_CHOICE (3u)

#define ECU_GW_2_E3_RLR_ELK_OBJ4_MEASURED_UNKNOWN_CHOICE (0u)
#define ECU_GW_2_E3_RLR_ELK_OBJ4_MEASURED_MEASURED_CHOICE (1u)
#define ECU_GW_2_E3_RLR_ELK_OBJ4_MEASURED_PREDICTED_CHOICE (2u)
#define ECU_GW_2_E3_RLR_ELK_OBJ4_MEASURED_RESERVED_CHOICE (3u)

#define ECU_GW_2_C9_HU_INTERFACE_CHANGE_SINGNAL_STILL_CHOICE (0u)
#define ECU_GW_2_C9_HU_INTERFACE_CHANGE_SINGNAL_PRESS_CHOICE (1u)
#define ECU_GW_2_C9_HU_INTERFACE_CHANGE_SINGNAL_LEFT_CHOICE (2u)
#define ECU_GW_2_C9_HU_INTERFACE_CHANGE_SINGNAL_RIGHT_CHOICE (3u)
#define ECU_GW_2_C9_HU_INTERFACE_CHANGE_SINGNAL_UP_CHOICE (4u)
#define ECU_GW_2_C9_HU_INTERFACE_CHANGE_SINGNAL_DOWN_CHOICE (5u)
#define ECU_GW_2_C9_HU_INTERFACE_CHANGE_SINGNAL_TWO_SIDES_CHOICE (6u)
#define ECU_GW_2_C9_HU_INTERFACE_CHANGE_SINGNAL_RESERVED_CHOICE (7u)

#define ECU_GW_2_C9_HU_NOVICE_RESPONSE_INACTIVE_CHOICE (0u)
#define ECU_GW_2_C9_HU_NOVICE_RESPONSE______1_CHOICE (1u)
#define ECU_GW_2_C9_HU_NOVICE_RESPONSE______2_CHOICE (2u)

#define ECU_GW_57_D_HU_APA_ON_OFF_INVALID_CHOICE (0u)
#define ECU_GW_57_D_HU_APA_ON_OFF_OFF_CHOICE (1u)
#define ECU_GW_57_D_HU_APA_ON_OFF_ON_CHOICE (2u)
#define ECU_GW_57_D_HU_APA_ON_OFF_RESERVED_CHOICE (3u)

#define ECU_GW_518_BCM_CAR_MODE___________________0_CHOICE (0u)
#define ECU_GW_518_BCM_CAR_MODE___________________1_CHOICE (1u)
#define ECU_GW_518_BCM_CAR_MODE__________________CHOICE (2u)
#define ECU_GW_518_BCM_CAR_MODE___RESERVED_CHOICE (3u)

#define ECU_GW_2_AE_LCDAL_SYSTEM_STATUS_RESERVED_CHOICE (0u)
#define ECU_GW_2_AE_LCDAL_SYSTEM_STATUS_START_UP_CHOICE (1u)
#define ECU_GW_2_AE_LCDAL_SYSTEM_STATUS_RUNNING_CHOICE (2u)
#define ECU_GW_2_AE_LCDAL_SYSTEM_STATUS_BLOCKED_CHOICE (3u)
#define ECU_GW_2_AE_LCDAL_SYSTEM_STATUS_CALIBRATION_CHOICE (4u)
#define ECU_GW_2_AE_LCDAL_SYSTEM_STATUS_SHUT_DOWN_CHOICE (5u)
#define ECU_GW_2_AE_LCDAL_SYSTEM_STATUS_HOT_CHOICE (6u)
#define ECU_GW_2_AE_LCDAL_SYSTEM_STATUS_FAILURE_CHOICE (7u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET1_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET1_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET1_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET1_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET1_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET1_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET1_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET1_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET1_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET1_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET1_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET1_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET1_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET1_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET1_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET2_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET2_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET2_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET2_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET2_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET2_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET2_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET2_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET2_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET2_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET2_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET2_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET2_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET2_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET2_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET3_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET3_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET3_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET3_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET3_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET3_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET3_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET3_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET3_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET3_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET3_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET3_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET3_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET3_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET3_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET4_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET4_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET4_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET4_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET4_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET4_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET4_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET4_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET4_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET4_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET4_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET4_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET4_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET4_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET4_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET5_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET5_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET5_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET5_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET5_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET5_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET5_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET5_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET5_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET5_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET5_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET5_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET5_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET5_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET5_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET6_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET6_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET6_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET6_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET6_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET6_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET6_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET6_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET6_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET6_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET6_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET6_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET6_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET6_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET6_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET7_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET7_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET7_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET7_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET7_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET7_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET7_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET7_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET7_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET7_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET7_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET7_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET7_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET7_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET7_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET8_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET8_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET8_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET8_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET8_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET8_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET8_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET8_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET8_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET8_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET8_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET8_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET8_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET8_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET8_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET9_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET9_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET9_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET9_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET9_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET9_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET9_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET9_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET9_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET9_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET9_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET9_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET9_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET9_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET9_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET10_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET10_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET10_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET10_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET10_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET10_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET10_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET10_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET10_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET10_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET10_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET10_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_D9_ACC_OBS_TARGET10_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET10_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_D9_ACC_OBS_TARGET10_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET11_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET11_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET11_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET11_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET11_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET11_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET11_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET11_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET11_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET11_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET11_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET11_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET11_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET11_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET11_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET12_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET12_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET12_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET12_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET12_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET12_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET12_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET12_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET12_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET12_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET12_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET12_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET12_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET12_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET12_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET13_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET13_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET13_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET13_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET13_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET13_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET13_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET13_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET13_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET13_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET13_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET13_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET13_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET13_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET13_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET14_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET14_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET14_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET14_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET14_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET14_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET14_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET14_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET14_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET14_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET14_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET14_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET14_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET14_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET14_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET15_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET15_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET15_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET15_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET15_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET15_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET15_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET15_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET15_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET15_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET15_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET15_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET15_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET15_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET15_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET16_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET16_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET16_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET16_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET16_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET16_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET16_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET16_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET16_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET16_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET16_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET16_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET16_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET16_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET16_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET17_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET17_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET17_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET17_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET17_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET17_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET17_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET17_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET17_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET17_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET17_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET17_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET17_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET17_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET17_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET18_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET18_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET18_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET18_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET18_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET18_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET18_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET18_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET18_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET18_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET18_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET18_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET18_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET18_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET18_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET19_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET19_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET19_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET19_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET19_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET19_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET19_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET19_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET19_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET19_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET19_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET19_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET19_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET19_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET19_ID_INVALID_CHOICE (31u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET20_LNG_RANGE__20_120_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET20_LNG_RANGE_RESERVED_CHOICE (1401u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET20_LAT_RANGE__50_50_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET20_LAT_RANGE_RESERVED_CHOICE (1001u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET20_TYPE_NO_DISPLAY_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET20_TYPE_CONE__CONSIDERATION_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET20_TYPE_WARNING__COLUMN_CHOICE (2u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET20_TYPE_WATER__HORSE_CHOICE (3u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET20_TYPE_ANTI__COLLISION__BUCKET_CHOICE (4u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET20_TYPE_EMERGANCY__TRIANGLES_CHOICE (5u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET20_TYPE_OTHERS_CHOICE (6u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET20_TYPE_RESERVED_CHOICE (7u)

#define ECU_LAS_3_DB_ACC_OBS_TARGET20_ID_NOT_DETECT_CHOICE (0u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET20_ID_1_30_CHOICE (1u)
#define ECU_LAS_3_DB_ACC_OBS_TARGET20_ID_INVALID_CHOICE (31u)

#define ECU_GW_371_PCU_DRV_MOD2_INACTIVE_CHOICE (0u)
#define ECU_GW_371_PCU_DRV_MOD2_ECO_CHOICE (1u)
#define ECU_GW_371_PCU_DRV_MOD2_NORMAL_CHOICE (2u)
#define ECU_GW_371_PCU_DRV_MOD2_SPORT_CHOICE (3u)
#define ECU_GW_371_PCU_DRV_MOD2_______1_CHOICE (4u)
#define ECU_GW_371_PCU_DRV_MOD2__________CHOICE (5u)
#define ECU_GW_371_PCU_DRV_MOD2_RESERVED_CHOICE (6u)

#define ECU_GW_371_PCU_SPECIAL_MODE_SET_FB_RESERVED_0_CHOICE (0u)
#define ECU_GW_371_PCU_SPECIAL_MODE_SET_FB_RESERVED_1_CHOICE (1u)
#define ECU_GW_371_PCU_SPECIAL_MODE_SET_FB__________2_CHOICE (2u)
#define ECU_GW_371_PCU_SPECIAL_MODE_SET_FB__________3_CHOICE (3u)
#define ECU_GW_371_PCU_SPECIAL_MODE_SET_FB__________4_CHOICE (4u)
#define ECU_GW_371_PCU_SPECIAL_MODE_SET_FB__________5_CHOICE (5u)
#define ECU_GW_371_PCU_SPECIAL_MODE_SET_FB_SUPER__RACE_CHOICE (6u)

#define ECU_GW_31_C_PCU_POWER_OUTPUT_STS_INACTIVE_CHOICE (0u)
#define ECU_GW_31_C_PCU_POWER_OUTPUT_STS______1_CHOICE (1u)
#define ECU_GW_31_C_PCU_POWER_OUTPUT_STS______2_CHOICE (2u)
#define ECU_GW_31_C_PCU_POWER_OUTPUT_STS______3_CHOICE (3u)
#define ECU_GW_31_C_PCU_POWER_OUTPUT_STS_RESERVED_________CHOICE (4u)
#define ECU_GW_31_C_PCU_POWER_OUTPUT_STS_INVALID_CHOICE (7u)

#define ECU_GW_31_C_PCU_VCU_RDY_STS_NO__READY_CHOICE (0u)
#define ECU_GW_31_C_PCU_VCU_RDY_STS_READY_CHOICE (1u)

#define ECU_GW_10_A_EPB_FAIL_STATUS_NO_ERROR_IN_EPB__C_EXTERNAL_APPLY_AVAILABLE_CHOICE (0u)
#define ECU_GW_10_A_EPB_FAIL_STATUS_NOT_DEFINED_1_CHOICE (1u)
#define ECU_GW_10_A_EPB_FAIL_STATUS_NOT_DEFINED_2_CHOICE (2u)
#define ECU_GW_10_A_EPB_FAIL_STATUS_ERROR_IN_EPB__C_NO_EXTERNAL_APPLY_ALLOWED_CHOICE (3u)

#define ECU_GW_10_A_EPB_STATUS_BOTH_BRAKES_RELEASED_CHOICE (0u)
#define ECU_GW_10_A_EPB_STATUS_BOTH_BRAKES_APPLIED_CHOICE (1u)
#define ECU_GW_10_A_EPB_STATUS_BOTH_BRAKES_IN_OPERATION__APPLYING_RELEASING__CHOICE (2u)
#define ECU_GW_10_A_EPB_STATUS_UNKNOWN_CHOICE (3u)

#define ECU_GW_10_A_EPB_ACHIEVED_CLAMP_FORCE_CLAMP_FORCE_CHOICE (0u)
#define ECU_GW_10_A_EPB_ACHIEVED_CLAMP_FORCE_RESERVED_CHOICE (30u)
#define ECU_GW_10_A_EPB_ACHIEVED_CLAMP_FORCE_ERROR_CHOICE (31u)

#define ECU_GW_10_A_EPB_SWITCH_POSITION_NO_REQUEST_CHOICE (0u)
#define ECU_GW_10_A_EPB_SWITCH_POSITION_RELEASE_REQUEST_CHOICE (1u)
#define ECU_GW_10_A_EPB_SWITCH_POSITION_APPLY_REQUEST_CHOICE (2u)
#define ECU_GW_10_A_EPB_SWITCH_POSITION_ERROR_CHOICE (3u)

#define ECU_GW_10_A_EPB_SWITCH_POSITION_VALID_VALID__FULL_FUNCTION_CHOICE (0u)
#define ECU_GW_10_A_EPB_SWITCH_POSITION_VALID_ERROR__INIT_OR_SUBSTITUTE_VALUE__NO_FUNCTION__CHOICE (1u)

#define ECU_GW_10_A_ESP_RWU_PARKING_ACTIVE_FOR_ACC_ACTIVE_CHOICE (0u)
#define ECU_GW_10_A_ESP_RWU_PARKING_ACTIVE_FOR_ACC_NOT__ACTIVE_CHOICE (1u)

#define ECU_GW_10_A_ESP_RWU_PARKING_AVAIL_FOR_ACC_AVAILABLE_CHOICE (0u)
#define ECU_GW_10_A_ESP_RWU_PARKING_AVAIL_FOR_ACC_NOT_AVAILABLE_CHOICE (1u)

#define ECU_GW_10_A_EPB_AP_AREQUEST_AVAILABLE_NOTAVAILABLE_CHOICE (0u)
#define ECU_GW_10_A_EPB_AP_AREQUEST_AVAILABLE_AVAILABLE_CHOICE (1u)

#define ECU_GW_15_D_ESP_IMU_CALIBRATED_CALIBRATED_CHOICE (0u)
#define ECU_GW_15_D_ESP_IMU_CALIBRATED_NOT__CALIBRATED_CHOICE (1u)

#define ECU_GW_10_F_IBCU_S_OUTPUT_ROD_DRIVER_Q_SOUTPUT_ROD_DRIVER_NOT_INITIALIZED_________CHOICE (0u)
#define ECU_GW_10_F_IBCU_S_OUTPUT_ROD_DRIVER_Q_SOUTPUT_ROD_DRIVER_NORMAL_____CHOICE (1u)
#define ECU_GW_10_F_IBCU_S_OUTPUT_ROD_DRIVER_Q_SOUTPUT_ROD_DRIVER_FAULTY_____CHOICE (2u)

#define ECU_GW_10_F_IBCU_S_OUTPUT_ROD_ACT_Q_SOUTPUT_ROD_ACT_NOT_INITIALIZED_CHOICE (0u)
#define ECU_GW_10_F_IBCU_S_OUTPUT_ROD_ACT_Q_SOUTPUT_ROD_ACT_NORMAL_CHOICE (1u)
#define ECU_GW_10_F_IBCU_S_OUTPUT_ROD_ACT_Q_SOUTPUT_ROD_ACT_FAULTY_CHOICE (2u)

#define ECU_GW_32_A_TRM_CONNECT_STS_NO_CONNECTED_CHOICE (0u)
#define ECU_GW_32_A_TRM_CONNECT_STS_CONNECTED_CHOICE (1u)

#define ECU_GW_3_BE_ATS_CURRENT_DRIVING_MODE__NORMAL_CHOICE (0u)
#define ECU_GW_3_BE_ATS_CURRENT_DRIVING_MODE__SNOW_________CHOICE (1u)
#define ECU_GW_3_BE_ATS_CURRENT_DRIVING_MODE__MUD_________CHOICE (2u)
#define ECU_GW_3_BE_ATS_CURRENT_DRIVING_MODE__SAND_________CHOICE (3u)
#define ECU_GW_3_BE_ATS_CURRENT_DRIVING_MODE__ROCK_________CHOICE (4u)
#define ECU_GW_3_BE_ATS_CURRENT_DRIVING_MODE__WADE_________CHOICE (5u)
#define ECU_GW_3_BE_ATS_CURRENT_DRIVING_MODE__PROTECT_CHOICE (6u)

#define ECU_GW_37_A_VMC_ECAS_MODE_INACTIVE_CHOICE (0u)
#define ECU_GW_37_A_VMC_ECAS_MODE_NORMAL_CHOICE (1u)
#define ECU_GW_37_A_VMC_ECAS_MODE_SPORT_CHOICE (2u)
#define ECU_GW_37_A_VMC_ECAS_MODE_OFF_ROAD__CHOICE (3u)
#define ECU_GW_37_A_VMC_ECAS_MODE_AUTO__CHOICE (4u)

#define ECU_GW_37_A_VMC_ECDC_MODE_INACTIVE_CHOICE (0u)
#define ECU_GW_37_A_VMC_ECDC_MODE_COMFORT_CHOICE (1u)
#define ECU_GW_37_A_VMC_ECDC_MODE_NORMAL_CHOICE (2u)
#define ECU_GW_37_A_VMC_ECDC_MODE_SPORT_CHOICE (3u)
#define ECU_GW_37_A_VMC_ECDC_MODE_AUTO_CHOICE (4u)

#define ECU_GW_37_A_VMC_ECAS_MODE_VAL_DISABLE_CHOICE (0u)
#define ECU_GW_37_A_VMC_ECAS_MODE_VAL_ENABLE_CHOICE (1u)

#define ECU_GW_37_A_VMC_ECAS_MODE_CHA_STS_NO__SWITCH_REQUEST_CHOICE (0u)
#define ECU_GW_37_A_VMC_ECAS_MODE_CHA_STS_SWITCHING_CHOICE (1u)
#define ECU_GW_37_A_VMC_ECAS_MODE_CHA_STS_SWITCH_FAIL_CHOICE (2u)
#define ECU_GW_37_A_VMC_ECAS_MODE_CHA_STS_READING_TO__SWITCH__CHOICE (3u)

#define ECU_GW_37_A_VMC_CTRL_LEVEL_FR_VALID_VALID_CHOICE (0u)
#define ECU_GW_37_A_VMC_CTRL_LEVEL_FR_VALID_INVALID_CHOICE (1u)

#define ECU_GW_37_A_VMC_CTRL_LEVEL_FL_VALID_VALID_CHOICE (0u)
#define ECU_GW_37_A_VMC_CTRL_LEVEL_FL_VALID_INVALID_CHOICE (1u)

#define ECU_GW_37_A_VMC_ECAS_MODE_FRT_STS_IDLE_CHOICE (0u)
#define ECU_GW_37_A_VMC_ECAS_MODE_FRT_STS_UP_CHOICE (1u)
#define ECU_GW_37_A_VMC_ECAS_MODE_FRT_STS_DOWN_CHOICE (2u)

#define ECU_GW_37_A_VMC_ECAS_MODE_REL_STS_IDLE_CHOICE (0u)
#define ECU_GW_37_A_VMC_ECAS_MODE_REL_STS_UP_CHOICE (1u)
#define ECU_GW_37_A_VMC_ECAS_MODE_REL_STS_DOWN_CHOICE (2u)

#define ECU_GW_37_A_VMC_CTRL_LEVEL_RR_VALID_VALID_CHOICE (0u)
#define ECU_GW_37_A_VMC_CTRL_LEVEL_RR_VALID_INVALID_CHOICE (1u)

#define ECU_GW_37_A_VMC_CTRL_LEVEL_R_LY_VALID_VALID_CHOICE (0u)
#define ECU_GW_37_A_VMC_CTRL_LEVEL_R_LY_VALID_INVALID_CHOICE (1u)

/* Frame Names. */
#define ECU_ACC_382_NAME "ACC_382"
#define ECU_GW_2_A4_NAME "GW_2A4"
#define ECU_GW_765_NAME "GW_765"
#define ECU_ACC_76_D_NAME "ACC_76D"
#define ECU_GW_791_NAME "GW_791"
#define ECU_ACC_799_NAME "ACC_799"
#define ECU_GW_752_NAME "GW_752"
#define ECU_LAS_75_A_NAME "LAS_75A"
#define ECU_GW_763_NAME "GW_763"
#define ECU_LAS_76_B_NAME "LAS_76B"
#define ECU_LAS_592_NAME "LAS_592"
#define ECU_ACC_594_NAME "ACC_594"
#define ECU_GW_50_NAME "GW_50"
#define ECU_GW_170_NAME "GW_170"
#define ECU_GW_180_NAME "GW_180"
#define ECU_ACC_244_NAME "ACC_244"
#define ECU_GW_278_NAME "GW_278"
#define ECU_GW_298_NAME "GW_298"
#define ECU_ACC_307_NAME "ACC_307"
#define ECU_ACC_312_NAME "ACC_312"
#define ECU_GW_340_NAME "GW_340"
#define ECU_GW_347_NAME "GW_347"
#define ECU_GW_365_NAME "GW_365"
#define ECU_GW_366_NAME "GW_366"
#define ECU_GW_387_NAME "GW_387"
#define ECU_GW_390_NAME "GW_390"
#define ECU_GW_396_NAME "GW_396"
#define ECU_GW_507_NAME "GW_507"
#define ECU_GW_516_NAME "GW_516"
#define ECU_GW_530_NAME "GW_530"
#define ECU_GW_187_NAME "GW_187"
#define ECU_GW_197_NAME "GW_197"
#define ECU_GW_194_NAME "GW_194"
#define ECU_GW_17_D_NAME "GW_17D"
#define ECU_GW_17_E_NAME "GW_17E"
#define ECU_ACC_1_BA_NAME "ACC_1BA"
#define ECU_GW_20_B_NAME "GW_20B"
#define ECU_GW_24_F_NAME "GW_24F"
#define ECU_GW_28_B_NAME "GW_28B"
#define ECU_GW_2_D1_NAME "GW_2D1"
#define ECU_GW_2_DE_NAME "GW_2DE"
#define ECU_GW_2_E6_NAME "GW_2E6"
#define ECU_ACC_31_A_NAME "ACC_31A"
#define ECU_GW_355_NAME "GW_355"
#define ECU_GW_3_AF_NAME "GW_3AF"
#define ECU_GW_3_B3_NAME "GW_3B3"
#define ECU_GW_3_BD_NAME "GW_3BD"
#define ECU_GW_3_C4_NAME "GW_3C4"
#define ECU_GW_3_FD_NAME "GW_3FD"
#define ECU_GW_3_FF_NAME "GW_3FF"
#define ECU_GW_51_E_NAME "GW_51E"
#define ECU_ACC_693_NAME "ACC_693"
#define ECU_LAS_694_NAME "LAS_694"
#define ECU_LAS_452_NAME "LAS_452"
#define ECU_GW_28_C_NAME "GW_28C"
#define ECU_GW_331_NAME "GW_331"
#define ECU_GW_1_AF_NAME "GW_1AF"
#define ECU_GW_320_NAME "GW_320"
#define ECU_LAS_39_A_NAME "LAS_39A"
#define ECU_GW_310_NAME "GW_310"
#define ECU_GW_3_E8_NAME "GW_3E8"
#define ECU_GW_3_E7_NAME "GW_3E7"
#define ECU_GW_38_A_NAME "GW_38A"
#define ECU_GW_249_NAME "GW_249"
#define ECU_GW_262_NAME "GW_262"
#define ECU_GW_334_NAME "GW_334"
#define ECU_GW_395_NAME "GW_395"
#define ECU_GW_18_A_NAME "GW_18A"
#define ECU_GW_24_A_NAME "GW_24A"
#define ECU_GW_25_C_NAME "GW_25C"
#define ECU_GW_2_D7_NAME "GW_2D7"
#define ECU_GW_341_NAME "GW_341"
#define ECU_GW_3_D6_NAME "GW_3D6"
#define ECU_GW_3_D8_NAME "GW_3D8"
#define ECU_GW_3_DE_NAME "GW_3DE"
#define ECU_GW_3_EE_NAME "GW_3EE"
#define ECU_GW_6_B0_NAME "GW_6B0"
#define ECU_ACC_2_D3_NAME "ACC_2D3"
#define ECU_ACC_301_NAME "ACC_301"
#define ECU_LAS_30_C_NAME "LAS_30C"
#define ECU_GW_2_E2_NAME "GW_2E2"
#define ECU_GW_2_E3_NAME "GW_2E3"
#define ECU_GW_2_C9_NAME "GW_2C9"
#define ECU_GW_761_NAME "GW_761"
#define ECU_GW_57_D_NAME "GW_57D"
#define ECU_GW_518_NAME "GW_518"
#define ECU_GW_2_AE_NAME "GW_2AE"
#define ECU_LAS_3_D9_NAME "LAS_3D9"
#define ECU_LAS_3_DB_NAME "LAS_3DB"
#define ECU_GW_371_NAME "GW_371"
#define ECU_GW_31_C_NAME "GW_31C"
#define ECU_GW_10_A_NAME "GW_10A"
#define ECU_BDC_400_NAME "BDC_400"
#define ECU_ACC_453_NAME "ACC_453"
#define ECU_GW_7_DF_NAME "GW_7DF"
#define ECU_GW_15_D_NAME "GW_15D"
#define ECU_GW_10_F_NAME "GW_10F"
#define ECU_GW_32_A_NAME "GW_32A"
#define ECU_GW_3_BE_NAME "GW_3BE"
#define ECU_GW_37_A_NAME "GW_37A"

/* Signal Names. */
#define ECU_ACC_382_ACC_ROLLING_COUNTER_35_D_NAME "ACC_RollingCounter_35D"
#define ECU_ACC_382_ACC_CRC_CHECK_35_D_NAME "ACC_CRCCheck_35D"
#define ECU_ACC_382_ACC_ROLLING_COUNTER_35_C_NAME "ACC_RollingCounter_35C"
#define ECU_ACC_382_ACC_CRC_CHECK_35_C_NAME "ACC_CRCCheck_35C"
#define ECU_ACC_382_ACC_LANE_QUALITY_NAME "ACC_LaneQuality"
#define ECU_ACC_382_ACC_LANE_EQUATION_C1_NAME "ACC_LaneEquationC1"
#define ECU_ACC_382_ACC_LANE_EQUATION_C2_NAME "ACC_LaneEquationC2"
#define ECU_ACC_382_ACC_LANE_EQUATION_C3_NAME "ACC_LaneEquationC3"
#define ECU_ACC_382_ACC_LANE_EQUATION_STATUS_NAME "ACC_LaneEquationStatus"
#define ECU_ACC_382_ACC_ROLLING_COUNTER_3_E6_NAME "ACC_RollingCounter_3E6"
#define ECU_ACC_382_ACC_CRC_CHECK_3_E6_NAME "ACC_CRCCheck_3E6"
#define ECU_ACC_382_ACC_TARGET1_DETECTION_NAME "ACC_Target1Detection"
#define ECU_ACC_382_ACC_TARGET1_ID_NAME "ACC_Target1ID"
#define ECU_ACC_382_ACC_TARGET1_TYPE_NAME "ACC_Target1Type"
#define ECU_ACC_382_ACC_TARGET1_DIRECTION_NAME "ACC_Target1Direction"
#define ECU_ACC_382_ACC_TARGET1_LNG_RANGE_NAME "ACC_Target1LngRange"
#define ECU_ACC_382_ACC_TARGET1_LAT_RANGE_NAME "ACC_Target1LatRange"
#define ECU_ACC_382_ACC_TARGET1_HEADING_ANGLE_NAME "ACC_Target1HeadingAngle"
#define ECU_ACC_382_ACC_TARGET1_ZONE_ID_NAME "ACC_Target1ZoneID"
#define ECU_ACC_382_ACC_TARGET2_DETECTION_NAME "ACC_Target2Detection"
#define ECU_ACC_382_ACC_TARGET2_ID_NAME "ACC_Target2ID"
#define ECU_ACC_382_ACC_TARGET2_TYPE_NAME "ACC_Target2Type"
#define ECU_ACC_382_ACC_TARGET2_LNG_RANGE_NAME "ACC_Target2LngRange"
#define ECU_ACC_382_ACC_TARGET2_LAT_RANGE_NAME "ACC_Target2LatRange"
#define ECU_ACC_382_ACC_TARGET2_DIRECTION_NAME "ACC_Target2Direction"
#define ECU_ACC_382_ACC_TARGET2_HEADING_ANGLE_NAME "ACC_Target2HeadingAngle"
#define ECU_ACC_382_ACC_TARGET2_ZONE_ID_NAME "ACC_Target2ZoneID"
#define ECU_ACC_382_ACC_TARGET3_DETECTION_NAME "ACC_Target3Detection"
#define ECU_ACC_382_ACC_TARGET3_ID_NAME "ACC_Target3ID"
#define ECU_ACC_382_ACC_TARGET3_TYPE_NAME "ACC_Target3Type"
#define ECU_ACC_382_ACC_TARGET3_LNG_RANGE_NAME "ACC_Target3LngRange"
#define ECU_ACC_382_ACC_TARGET3_LAT_RANGE_NAME "ACC_Target3LatRange"
#define ECU_ACC_382_ACC_TARGET3_DIRECTION_NAME "ACC_Target3Direction"
#define ECU_ACC_382_ACC_TARGET3_HEADING_ANGLE_NAME "ACC_Target3HeadingAngle"
#define ECU_ACC_382_ACC_TARGET3_ZONE_ID_NAME "ACC_Target3ZoneID"
#define ECU_ACC_382_ACC_TARGET4_DETECTION_NAME "ACC_Target4Detection"
#define ECU_ACC_382_ACC_TARGET4_ID_NAME "ACC_Target4ID"
#define ECU_ACC_382_ACC_TARGET4_TYPE_NAME "ACC_Target4Type"
#define ECU_ACC_382_ACC_TARGET4_LNG_RANGE_NAME "ACC_Target4LngRange"
#define ECU_ACC_382_ACC_TARGET4_LAT_RANGE_NAME "ACC_Target4LatRange"
#define ECU_ACC_382_ACC_TARGET4_DIRECTION_NAME "ACC_Target4Direction"
#define ECU_ACC_382_ACC_TARGET4_HEADING_ANGLE_NAME "ACC_Target4HeadingAngle"
#define ECU_ACC_382_ACC_TARGET4_ZONE_ID_NAME "ACC_Target4ZoneID"
#define ECU_ACC_382_ACC_TARGET5_DETECTION_NAME "ACC_Target5Detection"
#define ECU_ACC_382_ACC_TARGET5_ID_NAME "ACC_Target5ID"
#define ECU_ACC_382_ACC_TARGET5_TYPE_NAME "ACC_Target5Type"
#define ECU_ACC_382_ACC_TARGET5_LNG_RANGE_NAME "ACC_Target5LngRange"
#define ECU_ACC_382_ACC_TARGET5_LAT_RANGE_NAME "ACC_Target5LatRange"
#define ECU_ACC_382_ACC_TARGET5_DIRECTION_NAME "ACC_Target5Direction"
#define ECU_ACC_382_ACC_TARGET5_HEADING_ANGLE_NAME "ACC_Target5HeadingAngle"
#define ECU_ACC_382_ACC_TARGET5_ZONE_ID_NAME "ACC_Target5ZoneID"
#define ECU_ACC_382_ACC_TAR_VEH_LNG_RANGE_NAME "ACC_TarVehLngRange"
#define ECU_GW_2_A4_LCDAR_BSD_LCA_SOUND_WAR_NAME "LCDAR_BSD_LCASoundWar"
#define ECU_GW_2_A4_LCDAR_LEFT_RCTA_ALERT_NAME "LCDAR_Left_RCTAAlert"
#define ECU_GW_2_A4_LCDAR_SYSTEM_STATUS_NAME "LCDAR_SystemStatus"
#define ECU_GW_2_A4_LCDAR_RCTA_ALERT_NAME "LCDAR_RCTAAlert"
#define ECU_GW_2_A4_LCDAR_RCTB_ACTIVE_NAME "LCDAR_RCTBActive"
#define ECU_GW_2_A4_LCDAR_RCTB_ENABLE_NAME "LCDAR_RCTBEnable"
#define ECU_GW_2_A4_LCDAR_RCTB_STATUS_NAME "LCDAR_RCTBStatus"
#define ECU_GW_2_A4_LCDAR_LEFT_ELK_O_ALERT_NAME "LCDAR_Left_ELK_oAlert"
#define ECU_GW_2_A4_LCDAR_ELK_O_STATUS_NAME "LCDAR_ELK_oStatus"
#define ECU_GW_2_A4_LCDAR_ELK_O_ALERT_NAME "LCDAR_ELK_oAlert"
#define ECU_GW_2_A4_LCDAR_RCTB_TARGET_DECEL_NAME "LCDAR_RCTBTargetDecel"
#define ECU_GW_2_A4_LCDAR_ROLLING_COUNTER_2_AF_NAME "LCDAR_RollingCounter_2AF"
#define ECU_GW_2_A4_LCDAR_CRC_CHECK_2_AF_NAME "LCDAR_CRCCheck_2AF"
#define ECU_GW_765_DIAGNOSE_MESSAGE765_NAME "Diagnose_message765"
#define ECU_ACC_76_D_DIAGNOSE_MESSAGE76_D_NAME "Diagnose_message76D"
#define ECU_GW_791_DIAGNOSE_MESSAGE791_NAME "Diagnose_message791"
#define ECU_ACC_799_DIAGNOSE_MESSAGE799_NAME "Diagnose_message799"
#define ECU_GW_752_DIAGNOSE_MESSAGE752_NAME "Diagnose_message752"
#define ECU_LAS_75_A_DIAGNOSE_MESSAGE75_A_NAME "Diagnose_message75A"
#define ECU_GW_763_DIAGNOSE_MESSAGE763_NAME "Diagnose_message763"
#define ECU_LAS_76_B_DIAGNOSE_MESSAGE76_B_NAME "Diagnose_message76B"
#define ECU_LAS_592_LAS_WAKE_UP_BYTE4_BIT1_NAME "LAS_WakeUp_BYTE4BIT1"
#define ECU_LAS_592_LAS_WAKE_UP_BYTE4_BIT0_NAME "LAS_WakeUp_BYTE4BIT0"
#define ECU_LAS_592_LAS_NOT_SLEEP_BYTE7_BIT1_NAME "LAS_NotSleep_BYTE7BIT1"
#define ECU_LAS_592_LAS_NOT_SLEEP_BYTE7_BIT0_NAME "LAS_NotSleep_BYTE7BIT0"
#define ECU_ACC_594_FR_WAKE_UP_BYTE4_BIT1_NAME "FR_WakeUp_BYTE4BIT1"
#define ECU_ACC_594_FR_WAKE_UP_BYTE4_BIT0_NAME "FR_WakeUp_BYTE4BIT0"
#define ECU_ACC_594_FR_NOT_SLEEP_BYTE7_BIT1_NAME "FR_NotSleep_BYTE7BIT1"
#define ECU_ACC_594_FR_NOT_SLEEP_BYTE7_BIT0_NAME "FR_NotSleep_BYTE7BIT0"
#define ECU_GW_50_SRS_CRASH_OUTPUT_STATUS_NAME "SRS_CrashOutputStatus"
#define ECU_GW_50_SRS_CRASH_OUTPUT_STATUS_CHECK_SUM_NAME "SRS_CrashOutputStatusCheckSum"
#define ECU_GW_50_SRS_DRIVER_BUCKLE_SWITCH_STATUS_NAME "SRS_DriverBuckleSwitchStatus"
#define ECU_GW_50_SRS_PASSENGER_BUCKLE_SWITCH_STATUS_NAME "SRS_PassengerBuckleSwitchStatus"
#define ECU_GW_50_SRS_LEFT_REAR_BUCKLE_SWITCH_STS_NAME "SRS_LeftRearBuckleSwitchSts"
#define ECU_GW_50_SRS_WARNING_LAMP_STATUS_NAME "SRS_WarningLampStatus"
#define ECU_GW_50_SRS_PAD_INDICATION_NAME "SRS_PADIndication"
#define ECU_GW_50_SRS_MIDDLE_REAR_BUCKLE_SWITCH_STS_NAME "SRS_MiddleRearBuckleSwitchSts"
#define ECU_GW_50_SRS_FRONT_PSG_OCCUPANCY_NAME "SRS_FrontPsgOccupancy"
#define ECU_GW_50_SRS_RIGHT_REAR_BUCKLE_SWITCH_STS_NAME "SRS_RightRearBuckleSwitchSts"
#define ECU_GW_50_SRS_ROLLING_COUNTER_ID050_NAME "SRS_RollingCounter_id050"
#define ECU_GW_50_SRS_CRC_CHECK_50_NAME "SRS_CRCCheck_50"
#define ECU_GW_170_EPS_ACTUAL_MOTOR_TORQ_NAME "EPS_ActualMotorTorq"
#define ECU_GW_170_EPS_MAX_SAFETY_TORSION_BAR_TORQ_NAME "EPS_MaxSafetyTorsionBarTorq"
#define ECU_GW_170_EPS_MIN_SAFETY_TORSION_BAR_TORQ_NAME "EPS_MinSafetyTorsionBarTorq"
#define ECU_GW_170_EPS_ACTUAL_TORSION_BAR_TORQ_NAME "EPS_ActualTorsionBarTorq"
#define ECU_GW_170_EPS_FAULT_STATE_NAME "EPS_fault_state"
#define ECU_GW_170_EPS_ROLLING_COUNTER_170_NAME "EPS_RollingCounter_170"
#define ECU_GW_170_EPS_CRC_CHECK_170_NAME "EPS_CRCCheck_170"
#define ECU_GW_180_SAS_STEERING_ANGLE_NAME "SAS_SteeringAngle"
#define ECU_GW_180_SAS_STEERING_ANGLE_SPEED_NAME "SAS_SteeringAngleSpeed"
#define ECU_GW_180_SAS_STEERING_ANGLE_VALID_NAME "SAS_SteeringAngleValid"
#define ECU_GW_180_SAS_SAS_FAILURE_NAME "SAS_SASFailure"
#define ECU_GW_180_SAS_CALIBRATED_NAME "SAS_Calibrated"
#define ECU_GW_180_SAS_ROLLING_COUNTER_NAME "SAS_RollingCounter"
#define ECU_GW_180_SAS_CRC_CHECK_NAME "SAS_CRCCheck"
#define ECU_ACC_244_ACC_ACC_TARGET_ACCELERATION_NAME "ACC_ACCTargetAcceleration"
#define ECU_ACC_244_ACC_LKA_STATUS_NAME "ACC_LKAStatus"
#define ECU_ACC_244_ACC_LDW_VIBRATION_WARNING_REQ_NAME "ACC_LDWVibrationWarningReq"
#define ECU_ACC_244_ACC_LDW_STATUS_NAME "ACC_LDWStatus"
#define ECU_ACC_244_ACC_EMERGENCY_DATA_RRD_REQ_NAME "ACC_EmergencyDataRrdReq"
#define ECU_ACC_244_ACC_LDW_SHAKE_LEV_STATUS_NAME "ACC_LDWShakeLevStatus"
#define ECU_ACC_244_ACC_DEC_TO_STOP_NAME "ACC_DecToStop"
#define ECU_ACC_244_ACC_TEXT_INFO_FOR_DRIVER_NAME "ACC_TextInfoForDriver"
#define ECU_ACC_244_ACC_CDD_ACTIVE_NAME "ACC_CDDActive"
#define ECU_ACC_244_ACC_DRIVEOFF_REQUEST_NAME "ACC_Driveoff_Request"
#define ECU_ACC_244_ACC_ACC_MODE_NAME "ACC_ACCMode"
#define ECU_ACC_244_ACC_ROLLING_COUNTER_24_E_NAME "ACC_RollingCounter_24E"
#define ECU_ACC_244_ACC_CRC_CHECK_24_E_NAME "ACC_CRCCheck_24E"
#define ECU_ACC_244_ACC_AEB_TARGET_DECELERATION_NAME "ACC_AEBTargetDeceleration"
#define ECU_ACC_244_ACC_AEB_ACTIVE_NAME "ACC_AEBActive"
#define ECU_ACC_244_ACC_AB_ALEVEL_NAME "ACC_ABAlevel"
#define ECU_ACC_244_ACC_ABA_ACTIVE_NAME "ACC_ABAActive"
#define ECU_ACC_244_ACC_AW_BLEVEL_NAME "ACC_AWBlevel"
#define ECU_ACC_244_ACC_AWB_ACTIVE_NAME "ACC_AWBActive"
#define ECU_ACC_244_ACC_PREFILL_ACTIVE_NAME "ACC_PrefillActive"
#define ECU_ACC_244_ACC_FCW_ACTIVE_NAME "ACC_FCWActive"
#define ECU_ACC_244_ACC_FCW_LATENT_WARNING_NAME "ACC_FCWLatentWarning"
#define ECU_ACC_244_ACC_FCW_PRE_WARNING_NAME "ACC_FCWPreWarning"
#define ECU_ACC_244_ACC_AEB_VEHILCE_HOLD_REQ_NAME "ACC_AEBVehilceHoldReq"
#define ECU_ACC_244_ACC_ACC_TRQ_REQ_NAME "ACC_AccTrqReq"
#define ECU_ACC_244_ACC_ACC_TRQ_REQ_ACTIVE_NAME "ACC_AccTrqReqActive"
#define ECU_ACC_244_ACC_AEB_CTRL_TYPE_NAME "ACC_AEBCtrlType"
#define ECU_ACC_244_ACC_ROLLING_COUNTER_25_E_NAME "ACC_RollingCounter_25E"
#define ECU_ACC_244_ACC_CRC_CHECK_25_E_NAME "ACC_CRCCheck_25E"
#define ECU_ACC_244_ACC_LNG_TAKE_OVER_REQ_NAME "ACC_LngTakeOverReq"
#define ECU_ACC_244_ACC_LAT_TAKEOVER_REQ_NAME "ACC_LatTakeoverReq"
#define ECU_ACC_244_ACC_HANDS_ON_REQ_NAME "ACC_HandsOnReq"
#define ECU_ACC_244_ADS_EOMTO_REQ_NAME "ADS_EOMTOReq"
#define ECU_ACC_244_ADS_ROLLING_COUNTER_244_NAME "ADS__RollingCounter_244"
#define ECU_ACC_244_ADS_CRC_CHECK_244_NAME "ADS_CRCCheck_244"
#define ECU_GW_278_ESP_LAT_ACCEL_NAME "ESP_LatAccel"
#define ECU_GW_278_ESP_LONG_ACCEL_NAME "ESP_LongAccel"
#define ECU_GW_278_ESP_YAW_RATE_NAME "ESP_YawRate"
#define ECU_GW_278_ESP_YAW_RATE_VALID_NAME "ESP_YawRateValid"
#define ECU_GW_278_ESP_ROLLING_COUNTER_278_NAME "ESP_RollingCounter_278"
#define ECU_GW_278_ESP_CRC_CHECK_278_NAME "ESP_CRCCheck_278"
#define ECU_GW_298_PEPS_TRUNK_REQUEST_SIGNAL_NAME "PEPS_TrunkRequestSignal"
#define ECU_GW_298_PEPS_KEY_LEARNING_SIGNAL_NAME "PEPS_KeyLearningSignal"
#define ECU_GW_298_PEPS_EASY_OPEN_ORGINAL_SIGNAL_NAME "PEPS_EasyOpenOrginalSignal"
#define ECU_GW_298_PEPS_REMOTE_FAILED_ALARM_SIGNAL_NAME "PEPS_RemoteFailedAlarmSignal"
#define ECU_GW_298_PEPS_SEARCH_CAR_SIGNAL_NAME "PEPS_SearchCarSignal"
#define ECU_GW_298_PEPS_LUGGAGE_UNLOCK_SIGNAL_NAME "PEPS_LuggageUnlockSignal"
#define ECU_GW_298_PEPS_KEY_NUMBER_NAME "PEPS_KeyNumber"
#define ECU_GW_298_PEPS_KEY_AUTHENTICATION_STATUS_NAME "PEPS_KeyAuthenticationStatus"
#define ECU_GW_298_PEPS_EASY_OPEN_NAME "PEPS_Easy_open"
#define ECU_GW_298_PEPS_WELCOMELAMP_NAME "PEPS_Welcomelamp"
#define ECU_GW_298_PEPS_SMART_TRUNK_ULOCK_REMIND_NAME "PEPS_SmartTrunkUlockRemind"
#define ECU_GW_298_PEPS_UNLOCK_SIGNAL_NAME "PEPS_UnlockSignal"
#define ECU_GW_298_PEPS_LOCK_SIGNAL_NAME "PEPS_LockSignal"
#define ECU_GW_298_PEPS_LOCK_KEY_STATUS_NAME "PEPS_LockKeyStatus"
#define ECU_GW_298_BCM_TRUNK_UNLOCK_REQ_NAME "BCM_TrunkUnlockReq"
#define ECU_GW_298_PEPS_SMART_WELCOME_LIGHT_STAUS_NAME "PEPS_SmartWelcomeLightStaus"
#define ECU_GW_298_PEPS_TRUNK_KEY_STATUS_NAME "PEPS_TrunkKeyStatus"
#define ECU_GW_298_PEPS_UN_LOCK_KEY_STATUS_NAME "PEPS_UnLockKeyStatus"
#define ECU_GW_298_BCM_DRIVER_DOOR_LOCK_STATUS_NAME "BCM_DriverDoorLockStatus"
#define ECU_GW_298_BCM_PASSENGER_DOOR_LOCK_STATUS_NAME "BCM_PassengerDoorLockStatus"
#define ECU_GW_298_BCM_LEFT_REAR_DOOR_STATUS_NAME "BCM_LeftRearDoorStatus"
#define ECU_GW_298_BCM_ROLLING_COUNTER_298_NAME "BCM_RollingCounter_298"
#define ECU_GW_298_BCM_CRC_CHECK_298_NAME "BCM_CRCCheck_298"
#define ECU_ACC_307_ACC_SET_SPEED_NAME "ACC_SetSpeed"
#define ECU_ACC_307_ACC_OBJ_VALID_NAME "ACC_ObjValid"
#define ECU_ACC_307_ACC_ACCEP_BREQUEST_NAME "ACC_ACCEPBrequest"
#define ECU_ACC_307_ACC_DISTANCE_LEVEL_NAME "ACC_DistanceLevel"
#define ECU_ACC_307_ACC_TIME_GAP_SET_NAME "ACC_TimeGapSet"
#define ECU_ACC_307_ACC_FCW_SETTING_STATUS_NAME "ACC_FCWSettingStatus"
#define ECU_ACC_307_ACC_AEB_ENABLE_NAME "ACC_AEBEnable"
#define ECU_ACC_307_ACC_IACC_SUSPEND_REASON_NAME "ACC_IACCSuspendReason"
#define ECU_ACC_307_ACC_ROLLING_COUNTER_35_E_NAME "ACC_RollingCounter_35E"
#define ECU_ACC_307_ACC_CRC_CHECK_35_E_NAME "ACC_CRCCheck_35E"
#define ECU_ACC_307_ACC_ACC_TARGET_LNG_RANGE_NAME "ACC_ACCTargetLngRange"
#define ECU_ACC_307_ACC_AEB_FEATURE_CONFIG_NAME "ACC_AEBFeatureConfig"
#define ECU_ACC_307_ACC_F_RADAR_CALIBRATION_STATUS_NAME "ACC_FRadarCalibrationStatus"
#define ECU_ACC_307_ACC_ACC_TARGET_REL_SPD_NAME "ACC_ACCTargetRelSpd"
#define ECU_ACC_307_ACC_ROLLING_COUNTER_322_NAME "ACC_RollingCounter_322"
#define ECU_ACC_307_ACC_CRC_CHECK_322_NAME "ACC_CRCCheck_322"
#define ECU_ACC_307_ACC_ROLLING_COUNTER_344_NAME "ACC_RollingCounter_344"
#define ECU_ACC_307_ACC_CRC_CHECK_344_NAME "ACC_CRCCheck_344"
#define ECU_ACC_307_ACC_CSL_SET_REQ_NAME "ACC_CSLSetReq"
#define ECU_ACC_307_ACC_AEB_TARGET_SELECTED_NAME "ACC_AEBTargetSelected"
#define ECU_ACC_307_ACC_CSLA_ENABLE_STATUS_NAME "ACC_CSLAEnableStatus"
#define ECU_ACC_307_ACC_ROLLING_COUNTER_35_F_NAME "ACC_RollingCounter_35F"
#define ECU_ACC_307_ACC_CRC_CHECK_35_F_NAME "ACC_CRCCheck_35F"
#define ECU_ACC_307_ACC_TARGET6_DETECTION_NAME "ACC_Target6Detection"
#define ECU_ACC_307_ACC_TARGET6_ID_NAME "ACC_Target6ID"
#define ECU_ACC_307_ACC_TARGET6_TYPE_NAME "ACC_Target6Type"
#define ECU_ACC_307_ACC_TARGET6_DIRECTION_NAME "ACC_Target6Direction"
#define ECU_ACC_307_ACC_TARGET6_LNG_RANGE_NAME "ACC_Target6LngRange"
#define ECU_ACC_307_ACC_TARGET6_LAT_RANGE_NAME "ACC_Target6LatRange"
#define ECU_ACC_307_ACC_TARGET6_HEADING_ANGLE_NAME "ACC_Target6HeadingAngle"
#define ECU_ACC_307_ACC_TARGET6_ZONE_ID_NAME "ACC_Target6ZoneID"
#define ECU_ACC_307_ACC_TARGET7_DETECTION_NAME "ACC_Target7Detection"
#define ECU_ACC_307_ACC_TARGET7_ID_NAME "ACC_Target7ID"
#define ECU_ACC_307_ACC_TARGET7_TYPE_NAME "ACC_Target7Type"
#define ECU_ACC_307_ACC_TARGET7_DIRECTION_NAME "ACC_Target7Direction"
#define ECU_ACC_307_ACC_TARGET7_LNG_RANGE_NAME "ACC_Target7LngRange"
#define ECU_ACC_307_ACC_TARGET7_LAT_RANGE_NAME "ACC_Target7LatRange"
#define ECU_ACC_307_ACC_TARGET7_HEADING_ANGLE_NAME "ACC_Target7HeadingAngle"
#define ECU_ACC_307_ACC_TARGET7_ZONE_ID_NAME "ACC_Target7ZoneID"
#define ECU_ACC_307_ACC_LL_LANE_DIS_NAME "ACC_LLLaneDis"
#define ECU_ACC_307_ACC_RR_LANE_DIS_NAME "ACC_RRLaneDis"
#define ECU_ACC_307_ACC_L_LANE_DISTANCE_FUS_NAME "ACC_LLaneDistanceFus"
#define ECU_ACC_307_ACC_R_LANE_DISTANCE_FUS_NAME "ACC_RLaneDistanceFus"
#define ECU_ACC_307_ACC_VEHICLE_START_REMIND_STS_NAME "ACC_VehicleStartRemindSts"
#define ECU_ACC_312_ACC_SELFLEARNING_STATUS_NAME "ACC_Selflearning_status"
#define ECU_ACC_312_ACC_AEB_TARGET_PROB_NAME "ACC_AEBTargetProb"
#define ECU_ACC_312_ACC_AEB_TARGET_DIRECTION_NAME "ACC_AEBTargetDirection"
#define ECU_ACC_312_ACC_AEB_TARGET_DETECTION_NAME "ACC_AEBTargetDetection"
#define ECU_ACC_312_ACC_AEB_TARGET_TYPE_NAME "ACC_AEBTargetType"
#define ECU_ACC_312_ACC_ROLLING_COUNTER_3_E4_NAME "ACC_RollingCounter_3E4"
#define ECU_ACC_312_ACC_CRC_CHECK_3_E4_NAME "ACC_CRCCheck_3E4"
#define ECU_ACC_312_ADS_EOM_WARNNING_NAME "ADS_EOMWarnning"
#define ECU_ACC_312_ADS_ADS_VOICE_REQUEST_NAME "ADS_ADSVoiceRequest"
#define ECU_ACC_312_ADS_NDA_AUDIO_WAR_ENABLE_STATUS_NAME "ADS_NDAAudioWarEnableStatus"
#define ECU_ACC_312_ACC_DRIVER_WINDOW_CONTROL_NAME "ACC_DriverWindowControl"
#define ECU_ACC_312_ACC_SELFLEARNING_ANGLE_NAME "ACC_Selflearning_angle"
#define ECU_ACC_312_ADS_ROLLING_COUNTER_3_D7_NAME "ADS_RollingCounter_3D7"
#define ECU_ACC_312_ADS_CRC_CHECK_3_D7_NAME "ADS_CRCCheck_3D7"
#define ECU_ACC_312_ACC_AEB_TARGET_AX_NAME "ACC_AEBTargetAx"
#define ECU_ACC_312_ACC_AEB_TARGET_FOUR_WHEEL_PROB_NAME "ACC_AEBTargetFourWheelProb"
#define ECU_GW_340_AC_FR_BLOW_TYPE_NAME "AC_FrBlowType"
#define ECU_GW_340_AC_PR_AIR_MERGE_PORT_OPENING_RATIO_VD_NAME "AC_PrAirMergePortOpeningRatioVD"
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_NAME "AC_RrReqWindLevel"
#define ECU_GW_340_AC_RR_AIR_MERGE_PORT_OPENING_RATIO_VD_NAME "AC_RrAirMergePortOpeningRatioVD"
#define ECU_GW_340_AC_RR_AIR_MERGE_PORT_OPENING_RATIO_NAME "AC_RrAirMergePortOpeningRatio"
#define ECU_GW_340_AC_RR_REQ_WIND_LEVEL_VD_NAME "AC_RrReqWindLevelVD"
#define ECU_GW_340_AC_DR_AIR_MERGE_PORT_OPENING_RATIO_NAME "AC_DrAirMergePortOpeningRatio"
#define ECU_GW_340_AC_PR_AIR_MERGE_PORT_OPENING_RATIO_NAME "AC_PrAirMergePortOpeningRatio"
#define ECU_GW_340_AC_DR_AIR_MERGE_PORT_OPENING_RATIO_VD_NAME "AC_DrAirMergePortOpeningRatioVD"
#define ECU_GW_340_AC_AC_ON_OFF_NAME "AC_ACOnOff"
#define ECU_GW_340_AC_EVAPORATOR_TEMP_NAME "AC_EvaporatorTemp"
#define ECU_GW_347_TPMS_SIGNAL_STATUS_NAME "TPMS_SignalStatus"
#define ECU_GW_347_BCM_TIRE_PRESURE_SIGNAL_STATUS_NAME "BCM_TirePresureSignalStatus"
#define ECU_GW_347_TPMS_RF_PRESSURE_WARNING_NAME "TPMS_RFPressureWarning"
#define ECU_GW_347_TPMS_LR_PRESSURE_WARNING_NAME "TPMS_LRPressureWarning"
#define ECU_GW_347_TPMS_LF_TYRE_PRESSURE_NAME "TPMS_LFTyrePressure"
#define ECU_GW_347_TPMS_RF_TYRE_PRESSURE_NAME "TPMS_RFTyrePressure"
#define ECU_GW_347_TPMS_RR_TYRE_PRESSURE_NAME "TPMS_RRTyrePressure"
#define ECU_GW_347_TPMS_LR_TYRE_PRESSURE_NAME "TPMS_LRTyrePressure"
#define ECU_GW_347_TPMS_RR_PRESSURE_WARNING_NAME "TPMS_RRPressureWarning"
#define ECU_GW_347_TPMS_LF_PRESSURE_WARNING_NAME "TPMS_LFPressureWarning"
#define ECU_GW_347_TPMS_SYSTEM_FAILURE_WARNING_NAME "TPMS_SystemFailureWarning"
#define ECU_GW_347_BCM_ROLLING_COUNTER_347_NAME "BCM_RollingCounter_347"
#define ECU_GW_347_BCM_CRC_CHECK_347_NAME "BCM_CRCCheck_347"
#define ECU_GW_365_IMS_DISTRACTION_STATUS_NAME "IMS_DistractionStatus"
#define ECU_GW_365_IMS_DRIVER_HEAD_DETECT_NAME "IMS_DriverHeadDetect"
#define ECU_GW_365_IMS_DROWSINESS_STATUS_NAME "IMS_DrowsinessStatus"
#define ECU_GW_365_IMS_IMS_STATUS_NAME "IMS_IMSStatus"
#define ECU_GW_365_IMS_EYE_DETECT_SATUS_NAME "IMS_EyeDetectSatus"
#define ECU_GW_365_IMS_EYE_GAZE_STATUS_NAME "IMS_EyeGazeStatus"
#define ECU_GW_365_IMS_DRIVER_EYE_DETECT_NAME "IMS_DriverEyeDetect"
#define ECU_GW_365_IMS_DRIVER_EYE_CLOSESTATUS_NAME "IMS_DriverEyeClosestatus"
#define ECU_GW_365_IMS_PHONE_CALL_STS_NAME "IMS_PhoneCallSts"
#define ECU_GW_365_IMS_DRIVER_EYES_FOV_AREA_NAME "IMS_DriverEyesFovArea"
#define ECU_GW_365_IMS_DRIVER_EYE_CONFIDENCE_NAME "IMS_DriverEyeConfidence"
#define ECU_GW_365_IMS_ROLLING_COUNTER_356_NAME "IMS_RollingCounter_356"
#define ECU_GW_365_IMS_CRC_CHECK_356_NAME "IMS_CRCCheck_356"
#define ECU_GW_365_IMS_HEAD_DETECT_STS_PITCH_NAME "IMS_HeadDetectSts_Pitch"
#define ECU_GW_365_IMS_HEAD_DETECT_STS_ROLL_NAME "IMS_HeadDetectSts_Roll"
#define ECU_GW_365_IMS_HEAD_DETECT_STS_YAW_NAME "IMS_HeadDetectSts_Yaw"
#define ECU_GW_365_IMS_BROW_OFFSET_VALUE_NAME "IMS_BrowOffsetValue"
#define ECU_GW_365_IMS_JAW_OFFSET_VALUE_NAME "IMS_JawOffsetValue"
#define ECU_GW_365_IMS_ROLLING_COUNTER_360_NAME "IMS_RollingCounter_360"
#define ECU_GW_365_IMS_CRC_CHECK_360_NAME "IMS_CRCCheck_360"
#define ECU_GW_365_IMS_DRIVER_ID_NAME "IMS_DriverID"
#define ECU_GW_365_IMS_ID_UPDATE_REMIND_NAME "IMS_IDUpdateRemind"
#define ECU_GW_365_IMS_DROWSINESS_WARNING_NAME "IMS_DrowsinessWarning"
#define ECU_GW_365_IMS_DROWSINESS_SENS_FB_NAME "IMS_DrowsinessSensFb"
#define ECU_GW_365_IMS_DROWSINESS_SET_FB_NAME "IMS_DrowsinessSetFb"
#define ECU_GW_365_IMS_DISTRACTION_SET_FB_NAME "IMS_DistractionSetFb"
#define ECU_GW_365_IMS_DISTRACTION_WARNING_NAME "IMS_DistractionWarning"
#define ECU_GW_365_DMS_XLOCATION_EYE_NAME "DMS_Xlocation_eye"
#define ECU_GW_365_DMS_YLOCATION_EYE_NAME "DMS_Ylocation_eye"
#define ECU_GW_365_DMS_ZLOCATION_EYE_NAME "DMS_Zlocation_eye"
#define ECU_GW_365_IMS_ROLLING_COUNTER_3_A7_NAME "IMS_RollingCounter_3A7"
#define ECU_GW_365_IMS_CRC_CHECK_3_A7_NAME "IMS_CRCCheck_3A7"
#define ECU_GW_366_AC_WORK_STS_NAME "AC_WorkSts"
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_VD_NAME "AC_FrReqWindLevelVD"
#define ECU_GW_366_AC_PTC_STATUS_NAME "AC_PTCStatus"
#define ECU_GW_366_AC_ENVIRONMENTAL_TEMP_VD_NAME "AC_EnvironmentalTempVD"
#define ECU_GW_366_AC_ENVIRONMENTAL_TEMP_NAME "AC_EnvironmentalTemp"
#define ECU_GW_366_AC_FR_REQ_WIND_LEVEL_NAME "AC_FrReqWindLevel"
#define ECU_GW_366_AC_AC_PRE_NAME "AC_ACPre"
#define ECU_GW_366_AC_AC_REQ_NAME "AC_AC_Req"
#define ECU_GW_366_AC_AC_REQ_VALID_NAME "AC_AC_ReqValid"
#define ECU_GW_387_BCM_DRIVE_MODE_FEEDBACK_NAME "BCM_DriveModeFeedback"
#define ECU_GW_387_BCM_DRIVE_MODE_STATUS_NAME "BCM_DriveModeStatus"
#define ECU_GW_387_BCM_BLE_KEY_INDICATOR_NAME "BCM_BLEKeyIndicator"
#define ECU_GW_387_BCM_DRIVING_MODE_MEMORY_STATUS_NAME "BCM_DrivingModeMemoryStatus"
#define ECU_GW_387_BCM_DRIVE_MODE_SET_NAME "BCM_DriveModeSet"
#define ECU_GW_387_BCM_WELCOME_LIGHT_MODE_FB_NAME "BCM_WelcomeLightModeFB"
#define ECU_GW_387_BCM_RAINFALL_LEVEL_NAME "BCM_RainfallLevel"
#define ECU_GW_387_BCM_EPS_TORQUE_MODE_FEEDBACK_NAME "BCM_EPSTorqueModeFeedback"
#define ECU_GW_387_BCM_THEME_CHANGE_SET_NAME "BCM_ThemeChangeSet"
#define ECU_GW_387_BCM_FRONT_WASH_STATUS_NAME "BCM_FrontWashStatus"
#define ECU_GW_387_BCM_FRONT_WIPER_STATUS_NAME "BCM_FrontWiperStatus"
#define ECU_GW_387_BCM_RLS_LIGHT_SWITCH_REASON_NAME "BCM_RLS_Light_switch_reason"
#define ECU_GW_387_BCM_BUZZER_WARNING_MODE_NAME "BCM_BuzzerWarningMode"
#define ECU_GW_387_BCM_LIGHT_SENSOR_NAME "BCM_LightSensor"
#define ECU_GW_387_BCM_STATUSRAINSENSOR_NAME "BCM_Statusrainsensor"
#define ECU_GW_387_BCM_STATUSLOWBEAM_NAME "BCM_Statuslowbeam"
#define ECU_GW_387_BCM_SYSTEM_FAILURE_FLAG_NAME "BCM_SystemFailureFlag"
#define ECU_GW_387_BCM_REAR_WIPER_STATUS_NAME "BCM_RearWiperStatus"
#define ECU_GW_387_BCM_SAVE_ENERGY_SET_STATUS_NAME "BCM_SaveEnergySetStatus"
#define ECU_GW_387_BCM_ROLLING_COUNTER_387_NAME "BCM_RollingCounter_387"
#define ECU_GW_387_BCM_CRC_CHECK_387_NAME "BCM_CRCCheck_387"
#define ECU_GW_390_BCM_PMS_LEVEL_NAME "BCM_PMSLevel"
#define ECU_GW_390_BCM_LOW_POWER_WARNING_NAME "BCM_LowPowerWarning"
#define ECU_GW_390_BCM_SOH_LIFE_PERCENT_NAME "BCM_SOH_LifePercent"
#define ECU_GW_390_BCM_BSN_LEVEL_NAME "BCM_BSNLevel"
#define ECU_GW_396_BCM_SUNROOF_POS_VIT_NAME "BCM_Sunroof_POS_VIT"
#define ECU_GW_396_BCM_SUNROOF_STATUS_NAME "BCM_SunroofStatus"
#define ECU_GW_396_BCM_SUNSHADE_POS_VIT_FL_NAME "BCM_Sunshade_POS_VIT_FL"
#define ECU_GW_396_BCM_SUNROOF_POS_DIRECTION_NAME "BCM_Sunroof_POS_Direction"
#define ECU_GW_396_BCM_SUNROOF_RAIN_SET_STATUS_NAME "BCM_SunroofRainSetStatus"
#define ECU_GW_396_BCM_SUNSHADE_MOVEMENT_NAME "BCM_Sunshade_Movement"
#define ECU_GW_396_BCM_SUNROOF_MOVEMENT_NAME "BCM_Sunroof_Movement"
#define ECU_GW_396_BCM_LOCK_AUTO_CLS_WIN_SET_STATUS_NAME "BCM_LockAutoClsWinSetStatus"
#define ECU_GW_396_BCM_SUNROOF_MOTOR_NAME "BCM_SunroofMotor"
#define ECU_GW_396_BCM_REMOTE_WINDOW_CONTROL_NAME "BCM_RemoteWindowControl"
#define ECU_GW_396_BCM_WIN_OPEN_WARN_NAME "BCM_WinOpenWarn"
#define ECU_GW_396_BCM_WIN_DOWN_CFG_STS_NAME "BCM_WinDownCfgSts"
#define ECU_GW_396_BCM_WIN_UP_CFG_STS_NAME "BCM_WinUpCfgSts"
#define ECU_GW_396_BCM_REMOTE_WINDOW_UP_SET_STAUS_NAME "BCM_RemoteWindowUpSetStaus"
#define ECU_GW_396_BCM_REMOTE_WINDOW_DOWN_SET_STAUS_NAME "BCM_RemoteWindowDownSetStaus"
#define ECU_GW_396_BCM_AUTO_CLOSE_WINDOW_NAME "BCM_AutoCloseWindow"
#define ECU_GW_396_BCM_AERATION_HINT_REQ_NAME "BCM_AerationHintReq"
#define ECU_GW_396_BCM_SUNROOF_AP_ACTIVE_NAME "BCM_Sunroof_APActive"
#define ECU_GW_396_PEPS_REMOTE_WINDOW_UP_SIGNAL_NAME "PEPS_RemoteWindowUpSignal"
#define ECU_GW_396_PEPS_REMOTE_WINDOW_DOWN_SIGNAL_NAME "PEPS_RemoteWindowDownSignal"
#define ECU_GW_396_BCM_SUNROOF_INTIALIZED_NAME "BCM_Sunroof_Intialized"
#define ECU_GW_507_HU_PARKING_MODE_SELECT_NAME "HU_ParkingModeSelect"
#define ECU_GW_507_HU_LAS_MODE_SELECTION_NAME "HU_LASModeSelection"
#define ECU_GW_507_HU_FCTA_ENABLE_NAME "HU_FCTAEnable"
#define ECU_GW_507_HU_RCTA_ENABLE_NAME "HU_RCTAEnable"
#define ECU_GW_507_HU_RCW_ENABLE_NAME "HU_RCWEnable"
#define ECU_GW_507_HU_TSR_SWITCH_NAME "HU_TSRSwitch"
#define ECU_GW_507_HU_LAS_WARNING_MODE_SELECTION_NAME "HU_LASWarningModeSelection"
#define ECU_GW_507_HU_LDW_SHAKE_LEV_NAME "HU_LDWShakeLev"
#define ECU_GW_507_HU_FATIGUE_DECTION_ENABLE_NAME "HU_FatigueDectionEnable"
#define ECU_GW_507_HU_RCTB_ENABLE_NAME "HU_RCTBEnable"
#define ECU_GW_507_HU_SEA_ENABLE_NAME "HU_SEAEnable"
#define ECU_GW_507_HU_OVERSPEED_SOUND_WAR_ENABLE_NAME "HU_OverspeedSoundWarEnable"
#define ECU_GW_507_HU_IACC_ENABLE_NAME "HU_IACCEnable"
#define ECU_GW_507_HU_LOCK_CTRL_ENABLE_NAME "HU_LockCtrlEnable"
#define ECU_GW_507_HU_AUDIO_WARNING_ENABLE_NAME "HU_AudioWarningEnable"
#define ECU_GW_507_HU_HZP_RECOMEND_RES_NAME "HU_HZPRecomendRes"
#define ECU_GW_507_HU_OVERSPEED_WARNING_ENABLE_NAME "HU_OverspeedWarningEnable"
#define ECU_GW_507_HU_HZP_ON_OFF_NAME "HU_HZPOnOff"
#define ECU_GW_507_HU_PARKING_RESUME_NAME "HU_ParkingResume"
#define ECU_GW_507_HU_ULS_FKP_ACTIVATION_NAME "HU_Uls_FKP_Activation"
#define ECU_GW_507_HU_FCTB_ENABLE_NAME "HU_FCTBEnable"
#define ECU_GW_507_HU_ULS_BSD_ACTIVATION_NAME "HU_Uls_BSD_Activation"
#define ECU_GW_507_HU_PARKING_CONFIRM_NAME "HU_ParkingConfirm"
#define ECU_GW_507_HU_REMOTE_DISTANCE_SET_NAME "HU_RemoteDistanceSet"
#define ECU_GW_507_HU_TJP_ENABLE_NAME "HU_TJPEnable"
#define ECU_GW_507_HU_SLOT_VOICE_SELECT_NAME "HU_SlotVoiceSelect"
#define ECU_GW_507_HU_OBSTACLE_SAFE_DISTANCE_SET_NAME "HU_ObstacleSafeDistanceSet"
#define ECU_GW_507_HU_DVR_REPLAY_COMMAND_NAME "HU_DVRReplayCommand"
#define ECU_GW_507_HU_RECORDINGCYCLE_SETTING_NAME "HU_RecordingcycleSetting"
#define ECU_GW_507_HU_DVR_FORMAT_REQ_NAME "HU_DVRFormatReq"
#define ECU_GW_507_HU_TOP_LOOK_DOWN_SWITCH_NAME "HU_TopLookDownSwitch"
#define ECU_GW_507_HU_DVR_VEDIO_SEEK_NAME "HU_DVRVedioSeek"
#define ECU_GW_507_HU_HMA_ENABLE_NAME "HU_HMAEnable"
#define ECU_GW_507_HU_AVM_CALIBRATION_CONFIRM_NAME "HU_AVMCalibrationConfirm"
#define ECU_GW_507_HU_DVR_PRINT_SCREEN_NAME "HU_DVRPrintScreen"
#define ECU_GW_507_HU_DVR_REPLAY_SPEED_NAME "HU_DVRReplaySpeed"
#define ECU_GW_507_HU_DVR_ENABLE_SET_NAME "HU_DVREnableSet"
#define ECU_GW_507_HU_DVR_TAPE_SET_NAME "HU_DVRTapeSet"
#define ECU_GW_507_HU_LANGUAGE_SET_NAME "HU_LanguageSet"
#define ECU_GW_507_HU_TURN_LIGHT_AVM_SWITCH_NAME "HU_TurnLightAVMSwitch"
#define ECU_GW_507_HU_RADAR_AVM_SWITCH_NAME "HU_RadarAVMSwitch"
#define ECU_GW_507_HU_DVR_REPLAY_MODE_NAME "HU_DVRReplayMode"
#define ECU_GW_507_HU_RESOLUTION_SET_NAME "HU_ResolutionSet"
#define ECU_GW_507_HU_DVR_DISTORT_CORRECT_SWITCH_NAME "HU_DVRDistortCorrectSwitch"
#define ECU_GW_507_HU_DVR_VIDEO_PLAY_USER_TIME_NAME "HU_DVRVideoPlayUserTime"
#define ECU_GW_507_HU_AVM_CALIBRATION_SWITCH_NAME "HU_AVMCalibrationSwitch"
#define ECU_GW_507_HU_MOD_ENABLE_NAME "HU_MODEnable"
#define ECU_GW_507_HU_DVR_EMERGENCY_RECORD_NAME "HU_DVREmergencyRecord"
#define ECU_GW_507_HU_RAMP_AVM_SWITCH_NAME "HU_RampAVMSwitch"
#define ECU_GW_507_HU_DVR_BROWSE_COMMAND_NAME "HU_DVRBrowseCommand"
#define ECU_GW_507_HU_SHOOT_CONTROL_NAME "HU_ShootControl"
#define ECU_GW_507_HU_TRANSPARENT_CAR_SWITCH_NAME "HU_TransparentCarSwitch"
#define ECU_GW_507_HU_CRUISE_CONTROL_SET_NAME "HU_CruiseControlSet"
#define ECU_GW_507_HU_AUTO_BRAKE_ENABLE_NAME "HU_AutoBrakeEnable"
#define ECU_GW_507_HU_PARK_VOICE_INT_SET_STATUS_NAME "HU_ParkVoiceIntSetStatus"
#define ECU_GW_507_HU_ACC_OBJ_ENABLE_NAME "HU_ACCObjEnable"
#define ECU_GW_507_HU_VC_CRUISE_SET_DISTANCE_NAME "HU_VC_CruiseSetDistance"
#define ECU_GW_507_HU_VC_CRUISE_CONTROL_NAME "HU_VC_CruiseControl"
#define ECU_GW_507_HU_VC_CRUISE_SET_SPEED_NAME "HU_VC_CruiseSetSpeed"
#define ECU_GW_507_HU_TUTORIALMODEL_NAME "HU_Tutorialmodel"
#define ECU_GW_507_HU_FRONT_RADAR_ACTIVE_NAME "HU_FrontRadarActive"
#define ECU_GW_507_HU_APA_ACTIVE3_NAME "HU_APAActive3"
#define ECU_GW_507_HU_APA_ACTIVE2_NAME "HU_APAActive2"
#define ECU_GW_507_HU_NDA_ENABLE_NAME "HU_NDAEnable"
#define ECU_GW_507_HU_FCW_SETTING_NAME "HU_FCWSetting"
#define ECU_GW_507_HU_BSDLCA_SETTING_NAME "HU_BSDLCASetting"
#define ECU_GW_507_HU_FULL_SPEED_PANORAMIC_SELECT_NAME "HU_FullSpeedPanoramicSelect"
#define ECU_GW_507_HU_DOOR_OPEN_WARNING_SELECT_NAME "HU_DoorOpenWarningSelect"
#define ECU_GW_507_HU_NDA_AUDIO_WAR_ENABLE_NAME "HU_NDAAudioWarEnable"
#define ECU_GW_507_HU_NDA_NAV_ENABLE_NAME "HU_NDANavEnable"
#define ECU_GW_507_HU_NDA_SET_SPD_MODE_NAME "HU_NDASetSpdMode"
#define ECU_GW_507_HU_OVERSPEED_WARNING_OFFSET_NAME "HU_OverspeedWarningOffset"
#define ECU_GW_507_HU_LANE_CHANGE_STYLE_NAME "HU_LaneChangeStyle"
#define ECU_GW_516_HU_CURRENT_LOCATION_VALID_NAME "HU_CurrentLocationValid"
#define ECU_GW_516_HU_CURRENT_LOCATION_LONGITUDE_NAME "HU_CurrentLocationLongitude"
#define ECU_GW_516_HU_CURRENT_LOCATION_LATITUDE_NAME "HU_CurrentLocationLatitude"
#define ECU_GW_516_HU_LOCAL_TIME_VALID_NAME "HU_LocalTimeValid"
#define ECU_GW_516_HU_AIR_HUMIDITY_NAME "HU_AirHumidity"
#define ECU_GW_516_HU_LOCAL_TIME_MONTH_NAME "HU_LocalTimeMonth"
#define ECU_GW_516_HU_AIR_HUMIDITY_VALID_NAME "HU_AirHumidityValid"
#define ECU_GW_516_HU_LOCAL_TIME_DATE_NAME "HU_LocalTimeDate"
#define ECU_GW_516_HU_LOCAL_TIME_HOUR_NAME "HU_LocalTimeHour"
#define ECU_GW_516_HU_LOCAL_TIME_MINUTE_NAME "HU_LocalTimeMinute"
#define ECU_GW_516_HU_LOCAL_TIME_SYSTEM_NAME "HU_LocalTimeSystem"
#define ECU_GW_516_HU_LOCAL_TIME_SECOND_NAME "HU_LocalTimeSecond"
#define ECU_GW_516_HU_LOCAL_TIME_YEAR_NAME "HU_LocalTimeYear"
#define ECU_GW_516_HU_MAINTAIN_REMIND_REQ_NAME "HU_MaintainRemindReq"
#define ECU_GW_516_HU_LEAVE_MAINTAIN_DAY_NAME "HU_LeaveMaintainDay"
#define ECU_GW_516_HU_LEAVE_MAINTAIN_MILEAGE_NAME "HU_LeaveMaintainMileage"
#define ECU_GW_516_HU_CURRENT_LOCATIONSTD_NAME "HU_CurrentLocationstd"
#define ECU_GW_530_IP_ENGINE_OFF_TIME_NAME "IP_EngineOffTime"
#define ECU_GW_530_IP_TOTAL_ODOMETER_NAME "IP_TotalOdometer"
#define ECU_GW_530_IP_FUEL_LEVEL_NAME "IP_FuelLevel"
#define ECU_GW_187_ESP_ABS_ACTIVE_STATUS_NAME "ESP_ABSActiveStatus"
#define ECU_GW_187_ESP_GEAR_HOLD_REQUEST_NAME "ESP_GearHoldRequest"
#define ECU_GW_187_ESP_GEAR_HOLD_REQUEST_VALID_NAME "ESP_GearHoldRequestValid"
#define ECU_GW_187_ESP_TCS_FAIL_STATUS_NAME "ESP_TCSFailStatus"
#define ECU_GW_187_ESP_ABS_FAIL_STATUS_NAME "ESP_ABSFailStatus"
#define ECU_GW_187_ESP_EBD_FAIL_STATUS_NAME "ESP_EBDFailStatus"
#define ECU_GW_187_ESP_ESP_FUNCTION_STATUS_NAME "ESP_ESPFunctionStatus"
#define ECU_GW_187_ESP_ESP_ACTIVE_STATUS_NAME "ESP_ESPActiveStatus"
#define ECU_GW_187_ESP_TORQ_INCWHL_FRONT_NAME "ESP_TorqIncwhlFront"
#define ECU_GW_187_IBCU_BRAKE_FLUID_WARNING_NAME "IBCU_BrakeFluid_Warning"
#define ECU_GW_187_EP_BI_CLEAR_DIAGNOSTIC_INFO_NAME "EPBi_ClearDiagnosticInfo"
#define ECU_GW_187_ESP_ENG_TORQ_DEC_ACTIVE_NAME "ESP_EngTorqDecActive"
#define ECU_GW_187_ESP_ENG_TORQ_INC_FRONT_ACTIVE_NAME "ESP_EngTorqIncFrontActive"
#define ECU_GW_187_ESP_VEHICLE_SPEED_VALID_NAME "ESP_VehicleSpeedValid"
#define ECU_GW_187_ESP_VEHICLE_SPEED_NAME "ESP_VehicleSpeed"
#define ECU_GW_187_EP_BI_MIL_REQ_NAME "EPBi_MILReq"
#define ECU_GW_187_ESP_ADBF_ACTIVE_NAME "ESP_ADBF_Active"
#define ECU_GW_187_ESP_ROLLING_COUNTER_187_NAME "ESP_RollingCounter_187"
#define ECU_GW_187_ESP_CRC_CHECK_187_NAME "ESP_CRCCheck_187"
#define ECU_GW_197_EPB_CLUTCH_SENSOR_NAME "EPB_ClutchSensor"
#define ECU_GW_197_ESP_ROLLING_COUNTER_197_NAME "ESP_RollingCounter_197"
#define ECU_GW_197_ESP_CRC_CHECK_197_NAME "ESP_CRCCheck_197"
#define ECU_GW_194_EMS_ENG_SPD_ERR_NAME "EMS_EngSpdErr"
#define ECU_GW_194_EMS_ENG_SPD_NAME "EMS_EngSpd"
#define ECU_GW_194_EMS_IDLE_CTRL_STS_NAME "EMS_IdleCtrlSts"
#define ECU_GW_194_EMS_ENG_RUN_REQ_NAME "EMS_EngRunReq"
#define ECU_GW_194_EMS_ENG_FU_PUMP_STS_NAME "EMS_EngFuPumpSts"
#define ECU_GW_194_EMS_ENG_STOP_INHB_NAME "EMS_EngStopInhb"
#define ECU_GW_194_EMS_ENG_STRT_SUCCESS_NAME "EMS_EngStrtSuccess"
#define ECU_GW_194_EMS_ENG_FU_CUT_OFF_NAME "EMS_EngFuCutOff"
#define ECU_GW_194_EMS_ENG_TQ_FLYWH_NAME "EMS_EngTqFlywh"
#define ECU_GW_194_EMS_ENG_TQ_FLYWH_FAILR_NAME "EMS_EngTqFlywhFailr"
#define ECU_GW_194_EMS_ENG_STS_NAME "EMS_EngSts"
#define ECU_GW_194_EMS_IGNKL15_POSN_NAME "EMS_IGNKL15Posn"
#define ECU_GW_194_EMS_ROLLING_COUNTER_194_NAME "EMS_RollingCounter_194"
#define ECU_GW_194_EMS_CRC_CHECK_194_NAME "EMS_CRCCheck_194"
#define ECU_GW_17_D_PCU_ACT_HV_PWR_CNS_EXT_NAME "PCU_ActHVPwrCnsExt"
#define ECU_GW_17_D_PCU_SOC_DISP_NAME "PCU_SOCDisp"
#define ECU_GW_17_D_PCU_VEH_STS_NAME "PCU_VehSts"
#define ECU_GW_17_D_PCU_BMS_OPER_MOD_REQ_NAME "PCU_BMSOperModReq"
#define ECU_GW_17_D_PCU_CHRG_ALLWD_NAME "PCU_ChrgAllwd"
#define ECU_GW_17_D_PCU_BATT_INTR_HEAT_ALLWD_NAME "PCU_BattIntrHeatAllwd"
#define ECU_GW_17_D_PCU_CHRG_UNLCK_I_LIM_REQ_NAME "PCU_ChrgUnlckILimReq"
#define ECU_GW_17_D_PCU_CHM_ASIGNAL_STS_NAME "PCU_CHMAsignalSts"
#define ECU_GW_17_D_PCU_CHRG_I_REQ_LIM_FAC_NAME "PCU_ChrgIReqLimFac"
#define ECU_GW_17_D_PCU_CHRG_SUSP_REQ_NAME "PCU_ChrgSuspReq"
#define ECU_GW_17_D_PCU_VEH_SPD_VLD_NAME "PCU_VehSpdVld"
#define ECU_GW_17_D_PCU_VEH_SPD_NAME "PCU_VehSpd"
#define ECU_GW_17_D_PCU_191_CYC_CNTR_NAME "PCU_191CycCntr"
#define ECU_GW_17_D_PCU_CRCID191_NAME "PCU_CRCID191"
#define ECU_GW_17_D_PCU_REAL_ACC_PEDL_NAME "PCU_RealAccPedl"
#define ECU_GW_17_D_PCU_REAL_ACC_PEDL_VLD_NAME "PCU_RealAccPedlVld"
#define ECU_GW_17_D_PCU_K3_CLU_STS_NAME "PCU_K3CluSts"
#define ECU_GW_17_D_PCU_FLYWH_TQ_TRANS_LOAD_ACT_INVLD_NAME "PCU_FlywhTqTransLoadActInvld"
#define ECU_GW_17_D_PCU_FLYWH_TQ_TRANS_LOAD_ACT_NAME "PCU_FlywhTqTransLoadAct"
#define ECU_GW_17_D_PCU_ENG_TAR_IDLE_SPD_REQ_NAME "PCU_EngTarIdleSpdReq"
#define ECU_GW_17_D_PCU_ENG_STRT_MOD_NAME "PCU_EngStrtMod"
#define ECU_GW_17_D_PCU_SPD_CTRL_MOD_SELECT_NAME "PCU_SpdCtrlModSelect"
#define ECU_GW_17_D_PCU_CLR_DIAGC_INFO_NAME "PCU_ClrDiagcInfo"
#define ECU_GW_17_D_PCU_MIL_REQ_NAME "PCU_MILReq"
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_NAME "PCU_TarGearReq"
#define ECU_GW_17_D_PCU_TAR_GEAR_REQ_VALID_NAME "PCU_TarGearReqValid"
#define ECU_GW_17_D_R_GEARBOX_ACTUAL_DRIVING_GEAR_NAME "RGearbox_ActualDrivingGear"
#define ECU_GW_17_D_PCU_TRSM_TAR_IDLE_SPD_REQ_NAME "PCU_TrsmTarIdleSpdReq"
#define ECU_GW_17_D_PCU_ROLLING_COUNTER_1_C6_NAME "PCU_RollingCounter_1C6"
#define ECU_GW_17_D_PCU_CRC_CHECK_1_C6_NAME "PCU_CRCCheck_1C6"
#define ECU_GW_17_D_PCU_PT_STS_CHRG_CRP_NAME "PCU_PtStsChrgCrp"
#define ECU_GW_17_D_PCU_ENG_TQ_FLYWH_REQ_VLD_NAME "PCU_EngTqFlywhReqVld"
#define ECU_GW_17_D_PCU_ENG_TQ_FLYWH_FAST_REQ_NAME "PCU_EngTqFlywhFastReq"
#define ECU_GW_17_D_PCU_ENG_TQ_FLYWH_SLOW_REQ_NAME "PCU_EngTqFlywhSlowReq"
#define ECU_GW_17_D_PCU_BRK_PEDL_STS1_NAME "PCU_BrkPedlSts1"
#define ECU_GW_17_D_PCU_FU_CUT_OFF_REQ_NAME "PCU_FuCutOffReq"
#define ECU_GW_17_D_PCU_ENG_TQ_FLYWH_ALLWD_MAX_VLD_NAME "PCU_EngTqFlywhAllwdMaxVld"
#define ECU_GW_17_D_PCU_ENG_TQ_FLYWH_ALLWD_MAX_NAME "PCU_EngTqFlywhAllwdMax"
#define ECU_GW_17_D_PCU_BRK_PEDL_STS2_NAME "PCU_BrkPedlSts2"
#define ECU_GW_17_D_PCU_ENG_IGN_AG_INTV_ENBL_NAME "PCU_EngIgnAgIntvEnbl"
#define ECU_GW_17_D_PCU_EMS_SURGE_DAMPER_ENA_NAME "PCU_EMSSurgeDamperEna"
#define ECU_GW_17_D_PCU_STRT_INHB_NAME "PCU_StrtInhb"
#define ECU_GW_17_D_PCU_STRT_TRQ_CTL_NAME "PCU_StrtTrqCtl"
#define ECU_GW_17_D_PCU_ENG_STP_ORD_NAME "PCU_EngStpOrd"
#define ECU_GW_17_D_PCU_ENG_STRT_ORD_NAME "PCU_EngStrtOrd"
#define ECU_GW_17_D_PCU_ROLLING_COUNTER_1_E1_NAME "PCU_RollingCounter_1E1"
#define ECU_GW_17_D_PCU_CRC_CHECK_1_E1_NAME "PCU_CRCCheck_1E1"
#define ECU_GW_17_D_PCU_PWR_INDCD_REAL_TQ_FRONT_WHL_NAME "PCU_PwrIndcdRealTqFrontWhl"
#define ECU_GW_17_D_PCU_PWR_INDCD_DRVR_REQ_TQ_WHL_FRONT_NAME "PCU_PwrIndcdDrvrReqTqWhlFront"
#define ECU_GW_17_D_PCU_FRONT_MOT_STS_NAME "PCU_FrontMotSts"
#define ECU_GW_17_D_PCU_ESP_TQ_REQ_AVL_FRONT_NAME "PCU_ESPTqReqAvlFront"
#define ECU_GW_17_D_PCU_ECGP_OVRD_NAME "PCU_ECGPOvrd"
#define ECU_GW_17_D_PCU_QECACC_NAME "PCU_QECACC"
#define ECU_GW_17_D_PCU_ACC_REQ_POSSIBLE_NAME "PCU_AccReqPossible"
#define ECU_GW_17_D_PCU_ENG_STS_NAME "PCU_EngSts"
#define ECU_GW_17_D_PCU_ENG_CLUTCH_STS_NAME "PCU_EngClutchSts"
#define ECU_GW_17_D_PCU_PWR_INDCD_REAL_TQ_WHL_FAILR_NAME "PCU_PwrIndcdRealTqWhlFailr"
#define ECU_GW_17_D_PCU_FRONT_MOT_STS_VLD_NAME "PCU_FrontMotStsVld"
#define ECU_GW_17_D_PCU_ENG_STS_VLD_NAME "PCU_EngStsVld"
#define ECU_GW_17_D_PCU_ENG_CLUTCH_STS_VLD_NAME "PCU_EngClutchStsVld"
#define ECU_GW_17_D_PCU_REAR_MOT_STS_VLD_NAME "PCU_RearMotStsVld"
#define ECU_GW_17_D_PCU_START_STOP_ACTIVE_NAME "PCU_StartStopActive"
#define ECU_GW_17_D_PCU_START_STOP_ACTIVE_VLD_NAME "PCU_StartStopActiveVld"
#define ECU_GW_17_D_PCU_ROLLING_COUNTER_211_NAME "PCU_RollingCounter_211"
#define ECU_GW_17_D_PCU_CRC_CHECK_211_NAME "PCU_CRCCheck_211"
#define ECU_GW_17_D_PCU_MB_REGEN_WHL_FRONT_NAME "PCU_MbRegenWhlFront"
#define ECU_GW_17_D_PCU_MB_REGEN_MAX_FRONT_WHL_NAME "PCU_MbRegenMaxFrontWhl"
#define ECU_GW_17_D_PCU_MB_REGEN_MAX_FRONT_WHL_VLD_NAME "PCU_MbRegenMaxFrontWhlVld"
#define ECU_GW_17_D_PCU_MB_REGEN_MAX_WHL_QLFR_NAME "PCU_MbRegenMaxWhlQlfr"
#define ECU_GW_17_D_PCU_APA_TORQ_REQUEST_AVAILABLE_NAME "PCU_APATorqRequestAvailable"
#define ECU_GW_17_D_PCU_ACC_PEDL_VLD_NAME "PCU_AccPedlVld"
#define ECU_GW_17_D_PCU_ACC_PEDL_NAME "PCU_AccPedl"
#define ECU_GW_17_D_PCU_PWR_TRAIN_STS_NAME "PCU_PwrTrainSts"
#define ECU_GW_17_D_PCU_APA_REQUEST_ENABLE_NAME "PCU_APARequestEnable"
#define ECU_GW_17_D_PCU_ROLLING_COUNTER_1_A6_NAME "PCU_RollingCounter_1A6"
#define ECU_GW_17_D_PCU_CRC_CHECK_1_A6_NAME "PCU_CRCCheck_1A6"
#define ECU_GW_17_D_PCU_MB_REGEN_MAX_WHL_TOTAL_NAME "PCU_MbRegenMaxWhlTotal"
#define ECU_GW_17_D_PCU_MB_REGEN_WHL_REAR_NAME "PCU_MbRegenWhlRear"
#define ECU_GW_17_D_PCU_MB_REGEN_MAX_REAR_WHL_NAME "PCU_MbRegenMaxRearWhl"
#define ECU_GW_17_D_PCU_ROLLING_COUNTER_1_BE_NAME "PCU_RollingCounter_1BE"
#define ECU_GW_17_D_PCU_CRC_CHECK_1_BE_NAME "PCU_CRCCheck_1BE"
#define ECU_GW_17_D_PCU_PWR_INDCD_REAL_TQ_REAR_WHL_NAME "PCU_PwrIndcdRealTqRearWhl"
#define ECU_GW_17_D_PCU_PWR_INDCD_DRVR_REQ_TQ_WHL_REAR_NAME "PCU_PwrIndcdDrvrReqTqWhlRear"
#define ECU_GW_17_D_PCU_ESP_TQ_REQ_AVL_REAR_NAME "PCU_ESPTqReqAvlRear"
#define ECU_GW_17_D_PCU_REAR_MOT_STS_NAME "PCU_RearMotSts"
#define ECU_GW_17_D_PCU_ROLLING_COUNTER_1_C4_NAME "PCU_RollingCounter_1C4"
#define ECU_GW_17_D_PCU_CRC_CHECK_1_C4_NAME "PCU_CRCCheck_1C4"
#define ECU_GW_17_D_PCU_ROLLING_COUNTER_17_D_NAME "PCU_RollingCounter_17D"
#define ECU_GW_17_D_PCU_CRC_CHECK_17_D_NAME "PCU_CRCCheck_17D"
#define ECU_GW_17_E_EPS_MEASURED_TORSION_BAR_TORQUE_NAME "EPS_MeasuredTorsionBarTorque"
#define ECU_GW_17_E_EPS_PINIONANG_VALID_NAME "EPS_Pinionang_Valid"
#define ECU_GW_17_E_EPS_PINIONANG_NAME "EPS_Pinionang"
#define ECU_GW_17_E_EPS_HANDWHEEL_RELANG_NAME "EPS_Handwheel_Relang"
#define ECU_GW_17_E_EPS_MEASURED_TORSION_BAR_TORQ_VALID_NAME "EPS_MeasuredTorsionBarTorqValid"
#define ECU_GW_17_E_EPS_HANDWHEEL_RELANG_VALID_NAME "EPS_Handwheel_Relang_Valid"
#define ECU_GW_17_E_EPS_LAT_CTRL_ACTIVE_NAME "EPS_LatCtrlActive"
#define ECU_GW_17_E_EPS_LAT_CTRL_AVAILABILITY_STATUS_NAME "EPS_LatCtrlAvailabilityStatus"
#define ECU_GW_17_E_EPS_ROLLING_COUNTER_17_E_NAME "EPS_RollingCounter_17E"
#define ECU_GW_17_E_EPS_CRC_CHECK_17_E_NAME "EPS_CRCCheck_17E"
#define ECU_ACC_1_BA_ACC_MOTOR_TORQUE_MAX_LIMIT_REQUEST_NAME "ACC_MotorTorqueMaxLimitRequest"
#define ECU_ACC_1_BA_ACC_MOTOR_TORQUE_MIN_LIMIT_REQUEST_NAME "ACC_MotorTorqueMinLimitRequest"
#define ECU_ACC_1_BA_ACC_LAT_ANG_REQ_NAME "ACC_LatAngReq"
#define ECU_ACC_1_BA_ACC_LAT_ANG_REQ_ACTIVE_NAME "ACC_LatAngReqActive"
#define ECU_ACC_1_BA_ACC_ROLLING_COUNTER_1_BA_0_NAME "ACC_RollingCounter_1BA_0"
#define ECU_ACC_1_BA_ACC_CRC_CHECK_1_BA_0_NAME "ACC_CRCCheck_1BA_0"
#define ECU_GW_20_B_WHEEL_SPEED_FR_VALID_DATA_NAME "Wheel_Speed_FR_Valid_Data"
#define ECU_GW_20_B_WHEEL_SPEED_FR_DIRECTION_NAME "Wheel_Speed_FR_Direction"
#define ECU_GW_20_B_WHEEL_SPEED_FR_DATA_NAME "Wheel_Speed_FR_Data"
#define ECU_GW_20_B_WHEEL_SPEED_FL_VALID_DATA_NAME "Wheel_Speed_FL_Valid_Data"
#define ECU_GW_20_B_WHEEL_SPEED_FL_DIRECTION_NAME "Wheel_Speed_FL_Direction"
#define ECU_GW_20_B_WHEEL_SPEED_FL_DATA_NAME "Wheel_Speed_FL_Data"
#define ECU_GW_20_B_ABS_TOD_FAST_OPEN_REQUEST_NAME "ABS_TODFastOpenRequest"
#define ECU_GW_20_B_ESP_TOD_TORQUE_MAX_LIMIT_NAME "ESP_TODTorqueMaxLimit"
#define ECU_GW_20_B_ESP_ROLLING_COUNTER_206_NAME "ESP_RollingCounter_206"
#define ECU_GW_20_B_ESP_CRC_CHECK_206_NAME "ESP_CRCCheck_206"
#define ECU_GW_20_B_WHEEL_SPEED_RR_VALID_DATA_NAME "Wheel_Speed_RR_Valid_Data"
#define ECU_GW_20_B_WHEEL_SPEED_RR_DIRECTION_NAME "Wheel_Speed_RR_Direction"
#define ECU_GW_20_B_WHEEL_SPEED_RR_DATA_NAME "Wheel_Speed_RR_Data"
#define ECU_GW_20_B_WHEEL_SPEED_RL_VALID_DATA_NAME "Wheel_Speed_RL_Valid_Data"
#define ECU_GW_20_B_WHEEL_SPEED_RL_DIRECTION_NAME "Wheel_Speed_RL_Direction"
#define ECU_GW_20_B_WHEEL_SPEED_RL_DATA_NAME "Wheel_Speed_RL_Data"
#define ECU_GW_20_B_ESP_VEHICLE_SPEED_REFERENCE_NAME "ESP_Vehicle_Speed_Reference"
#define ECU_GW_20_B_ESP_URGENCY_BRAKE_ALARM_NAME "ESP_UrgencyBrakeAlarm"
#define ECU_GW_20_B_ESP_ECD_ACTIVE_NAME "ESP_ECDActive"
#define ECU_GW_20_B_ESP_ECD_AVAILABLE_NAME "ESP_ECDAvailable"
#define ECU_GW_20_B_ESP_ROLLING_COUNTER_208_NAME "ESP_RollingCounter_208"
#define ECU_GW_20_B_ESP_CRC_CHECK_208_NAME "ESP_CRCCheck_208"
#define ECU_GW_20_B_ESP_MAS_CYL_BRAKE_PRESSURE_VALID_NAME "ESP_MasCylBrakePressureValid"
#define ECU_GW_20_B_ESP_AUTO_HOLD_STANDBY_NAME "ESP_AutoHoldStandby"
#define ECU_GW_20_B_ESP_BRAKE_LIGHT_ON_REQUEST_NAME "ESP_BrakeLightOnRequest"
#define ECU_GW_20_B_ESP_MAS_CYL_BRAKE_PRESSURE_NAME "ESP_MasCylBrakePressure"
#define ECU_GW_20_B_WHEEL_SPEED_FL_PULSE_NAME "Wheel_Speed_FL_Pulse"
#define ECU_GW_20_B_WHEEL_SPEED_FR_PULSE_NAME "Wheel_Speed_FR_Pulse"
#define ECU_GW_20_B_WHEEL_SPEED_RR_PULSE_NAME "Wheel_Speed_RR_Pulse"
#define ECU_GW_20_B_WHEEL_SPEED_RL_PULSE_NAME "Wheel_Speed_RL_Pulse"
#define ECU_GW_20_B_ESP_AUTO_HOLD_ACTIVE_NAME "ESP_AutoHoldActive"
#define ECU_GW_20_B_ESP_AUTO_HOLD_AVAILABLE_NAME "ESP_AutoHoldAvailable"
#define ECU_GW_20_B_ESP_HHC_AVAILABLE_NAME "ESP_HHC_Available"
#define ECU_GW_20_B_ESP_HHC_ACTIVE_NAME "ESP_HHC_Active"
#define ECU_GW_20_B_ESP_ROLLING_COUNTER_258_NAME "ESP_RollingCounter_258"
#define ECU_GW_20_B_ESP_CRC_CHECK_258_NAME "ESP_CRCCheck_258"
#define ECU_GW_20_B_ESP_BRAKE_FORCE_NAME "ESP_BrakeForce"
#define ECU_GW_20_B_ESP_AB_AACTIVE_NAME "ESP_ABAactive"
#define ECU_GW_20_B_ESP_AB_AAVAILABLE_NAME "ESP_ABAavailable"
#define ECU_GW_20_B_ESP_PREFILL_ACTIVE_NAME "ESP_PrefillActive"
#define ECU_GW_20_B_ESP_PREFILL_AVAILABLE_NAME "ESP_PrefillAvailable"
#define ECU_GW_20_B_ESP_AEB_AVAILABLE_NAME "ESP_AEBAvailable"
#define ECU_GW_20_B_ESP_AE_BDEC_ACTIVE_NAME "ESP_AEBdecActive"
#define ECU_GW_20_B_ESP_AW_BACTIVE_NAME "ESP_AWBactive"
#define ECU_GW_20_B_ESP_AW_BAVAILABLE_NAME "ESP_AWBavailable"
#define ECU_GW_20_B_ESP_BRAKE_OVER_HEAT_BRAKE_DISC_TEMP_NAME "ESP_BrakeOverHeatBrakeDiscTemp"
#define ECU_GW_20_B_ESP_CDD_ACTIVE_NAME "ESP_CDD_Active"
#define ECU_GW_20_B_ESP_CDD_AVAILABLE_NAME "ESP_CDD_Available"
#define ECU_GW_20_B_ESP_VEHICLE_STANDSTILL_NAME "ESP_VehicleStandstill"
#define ECU_GW_20_B_ESP_VDC_ACTIVE_NAME "ESP_VDCActive"
#define ECU_GW_20_B_ESP_TCS_ACTIVE_NAME "ESP_TCSActive"
#define ECU_GW_20_B_ESP_ONLY_ABS_ACTIVE_NAME "ESP_OnlyABSActive"
#define ECU_GW_20_B_ESP_QDCACC_NAME "ESP_QDCACC"
#define ECU_GW_20_B_ESP_CDD_ACTIVE_APA_NAME "ESP_CDD_Active_APA"
#define ECU_GW_20_B_ESP_CDD_AVAILABLE_APA_NAME "ESP_CDD_Available_APA"
#define ECU_GW_20_B_ESP_INCREASE_PRESSURE_REQ_OK_NAME "ESP_IncreasePressureReqOK"
#define ECU_GW_20_B_ESP_HDC_STATUS_NAME "ESP_HDC_STATUS"
#define ECU_GW_20_B_ESP_HBB_ACTIVE_STATUS_NAME "ESP_HBBActiveStatus"
#define ECU_GW_20_B_ESP_CDP_PARKING_ACTIVE_FOR_ACC_NAME "ESP_CDP_ParkingActiveForACC"
#define ECU_GW_20_B_ESP_CDP_PARKING_AVAIL_FOR_ACC_NAME "ESP_CDP_ParkingAvailForACC"
#define ECU_GW_20_B_IBCU_BRAKE_DISC_HIGH_TEMP_WARNING_NAME "IBCU_BrakeDiscHighTempWarning"
#define ECU_GW_20_B_ESP_PREFILLFOR_APA_ACTIVE_NAME "ESP_PrefillforAPA_active"
#define ECU_GW_20_B_ESP_PREFILLFOR_APA_AVAILABLE_NAME "ESP_PrefillforAPA_Available"
#define ECU_GW_20_B_IBCU_BRK_PEDOPL_STS_GB_NAME "IBCU_BrkPedoplStsGb"
#define ECU_GW_20_B_IBCU_BRK_PEDL_STS_GB_VLD_NAME "IBCU_BrkPedlStsGbVld"
#define ECU_GW_20_B_IBCU_PRECHECK_STATUS_NAME "IBCU_precheckStatus"
#define ECU_GW_20_B_ESP_ROLLING_COUNTER_277_NAME "ESP_RollingCounter_277"
#define ECU_GW_20_B_ESP_CRC_CHECK_277_NAME "ESP_CRCCheck_277"
#define ECU_GW_20_B_ESP_ROLLING_COUNTER_20_B_NAME "ESP_RollingCounter_20B"
#define ECU_GW_20_B_ESP_CRC_CHECK_20_B_NAME "ESP_CRCCheck_20B"
#define ECU_GW_24_F_EPS_ELECT_POWER_CONSUMPTION_NAME "EPS_ElectPowerConsumption"
#define ECU_GW_24_F_EPS_APA_ABORTFEEDBACK_NAME "EPS_APA_Abortfeedback"
#define ECU_GW_24_F_EPS_MODE_SWITCH_ST_NAME "EPS_ModeSwitchSt"
#define ECU_GW_24_F_EPS_APA_EPAS_FAILED_NAME "EPS_APA_EpasFAILED"
#define ECU_GW_24_F_EPS_TORQ_SENSOR_STATUS_NAME "EPS_TorqSensorStatus"
#define ECU_GW_24_F_EPS_STEERING_TORQUE_NAME "EPS_SteeringTorque"
#define ECU_GW_24_F_EPS_LDW_SHAKE_LEV_STATUS_NAME "EPS_LDW_ShakeLevStatus"
#define ECU_GW_24_F_EPS_APA_CONTROL_FEEDBACK_NAME "EPS_APA_ControlFeedback"
#define ECU_GW_24_F_EPS_IACC_ABORTREASON_NAME "EPS_IACC_abortreason"
#define ECU_GW_24_F_EPS_SYSTEM_ST_NAME "EPS_SystemSt"
#define ECU_GW_24_F_EPS_EPS_FAILED_NAME "EPS_EPSFailed"
#define ECU_GW_24_F_EPS_TORQUE_ASSIST_MODE_NAME "EPS_TorqueAssistMode"
#define ECU_GW_24_F_EPS_CONCUSS_AVAILABILITY_STATUS_NAME "EPS_ConcussAvailabilityStatus"
#define ECU_GW_24_F_EPS_ROLLING_COUNTER_24_F_NAME "EPS_RollingCounter_24F"
#define ECU_GW_24_F_EPS_CRC_CHECK_24_F_NAME "EPS_CRCCheck_24F"
#define ECU_GW_28_B_BCM_LOW_BEAM_STATUS_NAME "BCM_LowBeamStatus"
#define ECU_GW_28_B_BCM_HIGH_BEAM_STATUS_NAME "BCM_HighBeamStatus"
#define ECU_GW_28_B_BCM_TURN_LIGHT_SWITCH_STS_NAME "BCM_TurnLightSwitchSts"
#define ECU_GW_28_B_BCM_MIRROR_ADJUST_STS_NAME "BCM_MirrorAdjustSts"
#define ECU_GW_28_B_BCM_LOCK_TRIGGER_NAME "BCM_LockTrigger"
#define ECU_GW_28_B_BCM_DRIVER_DOOR_STATUS_NAME "BCM_DriverDoorStatus"
#define ECU_GW_28_B_BCM_TURN_INDICATOR_LEFT_NAME "BCM_TurnIndicatorLeft"
#define ECU_GW_28_B_BCM_TURN_INDICATOR_RIGHT_NAME "BCM_TurnIndicatorRight"
#define ECU_GW_28_B_BCM_HOOD_STATUS_NAME "BCM_HoodStatus"
#define ECU_GW_28_B_PEPS_START_CONTROLSIGNAL_NAME "PEPS_StartControlsignal"
#define ECU_GW_28_B_BCM_TRUNK_RELEASE_TRIGGER_NAME "BCM_TrunkReleaseTrigger"
#define ECU_GW_28_B_PEPS_REMOTE_START_REQ_NAME "PEPS_RemoteStartReq"
#define ECU_GW_28_B_BCM_EMERGENCYLIGHTSTATUS_NAME "BCM_emergencylightstatus"
#define ECU_GW_28_B_BCM_POWER_STATUS_FEEDBACK_NAME "BCM_PowerStatusFeedback"
#define ECU_GW_28_B_BCM_REAR_DEFROSTERSTATUS_NAME "BCM_RearDefrosterstatus"
#define ECU_GW_28_B_BCM_UNLOCK_TRIGGER_NAME "BCM_UnlockTrigger"
#define ECU_GW_28_B_BCM_REFUEL_REQ_NAME "BCM_RefuelReq"
#define ECU_GW_28_B_PEPS_SHIFT_FORBID_RQ_NAME "PEPS_ShiftForbidRq"
#define ECU_GW_28_B_BCM_KEY_ALARM_STATUS_NAME "BCM_KeyAlarmStatus"
#define ECU_GW_28_B_BCM_ROLLING_COUNTER_28_B_NAME "BCM_RollingCounter_28B"
#define ECU_GW_28_B_BCM_CRC_CHECK_28_B_NAME "BCM_CRCCheck_28B"
#define ECU_GW_2_D1_PEPS_LUGGAGE_UNLOCK_SIGNAL_NAME "PEPS_LuggageUnlockSignal"
#define ECU_GW_2_D1_BCM_REVERSE_POSITION_NAME "BCM_ReversePosition"
#define ECU_GW_2_D1_BCM_BRAKE_LAMP_STATUS_NAME "BCM_BrakeLampStatus"
#define ECU_GW_2_D1_BCM_TRUNK_DOOR_STATUS_NAME "BCM_TrunkDoorStatus"
#define ECU_GW_2_D1_BCM_RIGHT_REAR_DOOR_STATUS_NAME "BCM_RightRearDoorStatus"
#define ECU_GW_2_D1_BCM_PASSENGER_DOOR_STATUS_NAME "BCM_PassengerDoorStatus"
#define ECU_GW_2_DE_IP_DRIVER_LCDALED_STS_NAME "IP_DriverLCDALEDSts"
#define ECU_GW_2_DE_IP_PASSENGER_LCDALED_STS_NAME "IP_PassengerLCDALEDSts"
#define ECU_GW_2_DE_IP_DIS_FAIL_NAME "IP_DISFail"
#define ECU_GW_2_DE_IP_Q_DASH_ACC_FAIL_NAME "IP_QDashACCFail"
#define ECU_GW_2_DE_IP_ROLLING_COUNTER_2_DE_NAME "IP_RollingCounter_2DE"
#define ECU_GW_2_DE_IP_CRC_CHECK_2_DE_NAME "IP_CRCCheck_2DE"
#define ECU_GW_2_E6_EMS_ENGINE_INTAKE_AIR_TEMP_NAME "EMS_EngineIntakeAirTemp"
#define ECU_GW_2_E6_EMS_COOLT_T_ERR_NAME "EMS_CooltTErr"
#define ECU_GW_2_E6_EMS_LO_BATT_ERR_NAME "EMS_LoBattErr"
#define ECU_GW_2_E6_EMS_CATALYST_WARM_UP_NAME "EMS_CatalystWarmUp"
#define ECU_GW_2_E6_EMS_GENERAL_DENOMINATOR_STATUS_NAME "EMS_GeneralDenominatorStatus"
#define ECU_GW_2_E6_EMS_GENERAL_DENO_STATUS_VALID_NAME "EMS_GeneralDenoStatusValid"
#define ECU_GW_2_E6_EMS_FIRST_IGNITION_CYCLE_COUNTER_NAME "EMS_FirstIgnitionCycleCounter"
#define ECU_GW_2_E6_EMS_WARM_UP_CYCLE_NAME "EMS_WarmUpCycle"
#define ECU_GW_2_E6_EMS_DRIVING_CYCLE_NAME "EMS_DrivingCycle"
#define ECU_GW_2_E6_EMS_ENG_T_COOLT_NAME "EMS_EngTCoolt"
#define ECU_GW_2_E6_EMS_LO_BATT_U_NAME "EMS_LoBattU"
#define ECU_GW_2_E6_EMS_COOLREQ_NAME "EMS_Coolreq"
#define ECU_GW_2_E6_EMS_ALTITUDE_FACTOR_VALID_NAME "EMS_AltitudeFactorValid"
#define ECU_GW_2_E6_EMS_ALTITUDE_FACTOR_NAME "EMS_AltitudeFactor"
#define ECU_GW_2_E6_EMS_SEC_IGNITION_CYCLES_COUNTER_NAME "EMS_SecIgnitionCyclesCounter"
#define ECU_GW_2_E6_EMS_IGNITION_CYCLES_COUNTER_VALID_NAME "EMS_IgnitionCyclesCounterValid"
#define ECU_GW_2_E6_EMS_ROLLING_COUNTER_2_E6_NAME "EMS_RollingCounter_2E6"
#define ECU_GW_2_E6_EMS_CRC_CHECK_2_E6_NAME "EMS_CRCCheck_2E6"
#define ECU_ACC_31_A_ACC_AEB_TARGET_LNG_RANGE_NAME "ACC_AEBTargetLngRange"
#define ECU_ACC_31_A_ACC_AEB_TARGET_REL_SPEED_NAME "ACC_AEBTargetRelSpeed"
#define ECU_ACC_31_A_ACC_AEB_TARGET_LAT_RANGE_NAME "ACC_AEBTargetLatRange"
#define ECU_ACC_31_A_ACC_ELK_ALERT_NAME "ACC_ELKAlert"
#define ECU_ACC_31_A_ACC_AEB_STATUS_NAME "ACC_AEBStatus"
#define ECU_ACC_31_A_ACC_AEB_TEXT_INFO_NAME "ACC_AEBTextInfo"
#define ECU_ACC_31_A_ACC_AEB_TARGETMODE_NAME "ACC_AEBTargetmode"
#define ECU_ACC_31_A_ACC_VOICEINFO_NAME "ACC_Voiceinfo"
#define ECU_ACC_31_A_ACC_F_RADAR_FAILURE_STATUS_NAME "ACC_FRadarFailureStatus"
#define ECU_ACC_31_A_ACC_ROLLING_COUNTER_36_D_NAME "ACC_RollingCounter_36D"
#define ECU_ACC_31_A_ACC_CRC_CHECK_36_D_NAME "ACC_CRCCheck_36D"
#define ECU_ACC_31_A_ACC_R_LANE_MARKER_TYPE_NAME "ACC_RLaneMarkerType"
#define ECU_ACC_31_A_ACC_LAS_MODE_SELECTION_STATUS_NAME "ACC_LASModeSelectionStatus"
#define ECU_ACC_31_A_ACC_IACCHWA_ENABLE_NAME "ACC_IACCHWAEnable"
#define ECU_ACC_31_A_ACC_LAS_WARNING_MODE_SELECTION_STS_NAME "ACC_LASWarningModeSelectionSts"
#define ECU_ACC_31_A_ACC_HOST_LANE_RIGHT_STATUS_NAME "ACC_HostLaneRightStatus"
#define ECU_ACC_31_A_ACC_HOST_LANE_LEFT_STATUS_NAME "ACC_HostLaneLeftStatus"
#define ECU_ACC_31_A_ACC_L_LANE_MARKER_TYPE_NAME "ACC_LLaneMarkerType"
#define ECU_ACC_31_A_ACC_ROAD_CURVATURE_NAME "ACC_RoadCurvature"
#define ECU_ACC_31_A_ACC_ROAD_CURVATURE_NEAR_NAME "ACC_RoadCurvatureNear"
#define ECU_ACC_31_A_ACC_ROAD_CURVATURE_FAR_NAME "ACC_RoadCurvatureFar"
#define ECU_ACC_31_A_ACC_LANE_CHANGE_STATUS_NAME "ACC_LaneChangeStatus"
#define ECU_ACC_31_A_ACC_ROLLING_COUNTER_30_A_NAME "ACC_RollingCounter_30A"
#define ECU_ACC_31_A_ACC_CRC_CHECK_30_A_NAME "ACC_CRCCheck_30A"
#define ECU_ACC_31_A_ACC_IACCHWA_MODE_NAME "ACC_IACCHWAMode"
#define ECU_ACC_31_A_ACC_IACCHWA_TEXT_INFO_FOR_DRIVER_NAME "ACC_IACCHWATextInfoForDriver"
#define ECU_ACC_31_A_ACC_DRIVER_HANDS_OFF_STATUS_NAME "ACC_DriverHandsOffStatus"
#define ECU_ACC_31_A_ACC_TARGET_BASED_LATERAL_CONTROL_NAME "ACC_TargetBasedLateralControl"
#define ECU_ACC_31_A_ACC_EMERGENCY_LIGHTING_REQUEST_NAME "ACC_EmergencyLightingRequest"
#define ECU_ACC_31_A_ACC_LL_LANE_DETECTION_NAME "ACC_LLLaneDetection"
#define ECU_ACC_31_A_ADC_ECAS_MODE_REQ_NAME "ADC_EcasModeReq"
#define ECU_ACC_31_A_ACC_RR_LANE_DETECTION_NAME "ACC_RRLaneDetection"
#define ECU_ACC_31_A_ACC_HIGH_BEAM_CONTROL_NAME "ACC_HighBeamControl"
#define ECU_ACC_31_A_ACC_ROLLING_COUNTER_30_D_NAME "ACC_RollingCounter_30D"
#define ECU_ACC_31_A_ACC_CRC_CHECK_30_D_NAME "ACC_CRCCheck_30D"
#define ECU_ACC_31_A_ACC_ELK_MODE_NAME "ACC_ELKMode"
#define ECU_ACC_31_A_ACC_ELK_INTERVENTION_MODE_NAME "ACC_ELKInterventionMode"
#define ECU_ACC_31_A_ACC_ELK_ENABLE_STATUS_NAME "ACC_ELKEnableStatus"
#define ECU_ACC_31_A_ACC_LAT_PATH_HEADING_ANGLE_NAME "ACC_LatPathHeadingAngle"
#define ECU_ACC_31_A_ACC_LNG_TAKE_OVER_REQ_REASON_NAME "ACC_LngTakeOverReqReason"
#define ECU_ACC_31_A_ACC_ROLLING_COUNTER_367_NAME "ACC_RollingCounter_367"
#define ECU_ACC_31_A_ACC_CRC_CHECK_367_NAME "ACC_CRCCheck_367"
#define ECU_ACC_31_A_ACC_AEB_TARGET_LAT_REL_SPEED_NAME "ACC_AEBTargetLatRelSpeed"
#define ECU_GW_355_EMS_CRUISE_SWITCH_ON_OFF_NAME "EMS_CruiseSwitchOnOff"
#define ECU_GW_355_EMS_CRUISE_SWITCH_RESUME_NAME "EMS_CruiseSwitchResume"
#define ECU_GW_355_EMS_CRUISE_SWITCH_CANCEL_NAME "EMS_CruiseSwitchCANCEL"
#define ECU_GW_355_EMS_CRUISE_SWITCH_SET_NAME "EMS_CruiseSwitchSET"
#define ECU_GW_355_EMS_CRUISE_DISTANCE_NAME "EMS_CruiseDistance"
#define ECU_GW_355_EMS_ROLLING_COUNTER_355_NAME "EMS_RollingCounter_355"
#define ECU_GW_355_EMS_CRC_CHECK_355_NAME "EMS_CRCCheck_355"
#define ECU_GW_3_AF_HU_SLOPE_GRADIENT_10M_NAME "HU_SlopeGradient_10m"
#define ECU_GW_3_AF_HU_SLOPE_GRADIENT_20M_NAME "HU_SlopeGradient_20m"
#define ECU_GW_3_AF_HU_SLOPE_GRADIENT_30M_NAME "HU_SlopeGradient_30m"
#define ECU_GW_3_AF_HU_SLOPE_GRADIENT_40M_NAME "HU_SlopeGradient_40m"
#define ECU_GW_3_AF_HU_SLOPE_GRADIENT_50M_NAME "HU_SlopeGradient_50m"
#define ECU_GW_3_AF_HU_SLOPE_GRADIENT_100M_NAME "HU_SlopeGradient_100m"
#define ECU_GW_3_AF_HU_INTERVAL_VELOCITY_INFO_NAME "HU_IntervalVelocityInfo"
#define ECU_GW_3_AF_HU_INTERVAL_VELOCITY_DIS_NAME "HU_IntervalVelocityDis"
#define ECU_GW_3_AF_HU_ACCIDENT_PRONE_NAME "HU_AccidentProne"
#define ECU_GW_3_AF_HU_ACCIDENT_PRONE_DISTANCE_NAME "HU_AccidentProneDistance"
#define ECU_GW_3_AF_HU_BRIDGE_INFO_NAME "HU_BridgeInfo"
#define ECU_GW_3_AF_HU_BRIDGE_DIS_NAME "HU_BridgeDis"
#define ECU_GW_3_AF_HU_SERVICE_ROAD_NAME "HU_ServiceRoad"
#define ECU_GW_3_AF_HU_WEATHER_TYPE_NAME "HU_WeatherType"
#define ECU_GW_3_AF_HU_NAV_COUNTRY_CODE_NAME "HU_NavCountryCode"
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_NAME "HU_NavSpeedLimit"
#define ECU_GW_3_AF_HU_ENTER_RAMP_INFO_NAME "HU_EnterRampInfo"
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_UNITS_NAME "HU_NavSpeedLimitUnits"
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_STATUS_NAME "HU_NavSpeedLimitStatus"
#define ECU_GW_3_AF_HU_RAMP_INFO_NAME "HU_RampInfo"
#define ECU_GW_3_AF_HU_NAV_STATUS_NAME "HU_NavStatus"
#define ECU_GW_3_AF_HU_ENTER_CURVE_INFO_NAME "HU_EnterCurveInfo"
#define ECU_GW_3_AF_HU_NAV_CURRENT_ROAD_TYPE_NAME "HU_NavCurrentRoadType"
#define ECU_GW_3_AF_HU_NAV_SPEED_LIMIT_TYPE_NAME "HU_NavSpeedLimitType"
#define ECU_GW_3_AF_HU_CURVE_DISTANCE_NAME "HU_CurveDistance"
#define ECU_GW_3_AF_HU_RAMP_DISTANCE_NAME "HU_RampDistance"
#define ECU_GW_3_AF_HU_NOVICE_ENABLE_NAME "HU_Novice_Enable"
#define ECU_GW_3_AF_HU_ROLLING_COUNTER_3_AF_3_NAME "HU_RollingCounter_3AF_3"
#define ECU_GW_3_AF_HU_CRC_CHECK_3_AF_3_NAME "HU_CRCCheck_3AF_3"
#define ECU_GW_3_AF_HU_SPEED_LIMIT_DISTANCE_NAME "HU_SpeedLimitDistance"
#define ECU_GW_3_AF_HU_ROLLING_COUNTER_3_BB_NAME "HU_RollingCounter_3BB"
#define ECU_GW_3_AF_HU_CRC_CHECK_3_BB_NAME "HU_CRCCheck_3BB"
#define ECU_GW_3_AF_HU_SERVICE_ROAD_DIS_NAME "HU_ServiceRoadDis"
#define ECU_GW_3_AF_HU_LANE_TYPE_ID1_NAME "HU_LaneType_ID1"
#define ECU_GW_3_AF_HU_LANE_TYPE_ID2_NAME "HU_LaneType_ID2"
#define ECU_GW_3_AF_HU_LANE_TYPE_ID3_NAME "HU_LaneType_ID3"
#define ECU_GW_3_AF_HU_LANE_TYPE_ID4_NAME "HU_LaneType_ID4"
#define ECU_GW_3_AF_HU_LANE_TYPE_ID5_NAME "HU_LaneType_ID5"
#define ECU_GW_3_AF_HU_LANE_TYPE_ID6_NAME "HU_LaneType_ID6"
#define ECU_GW_3_AF_HU_EHP_HEART_FLAG_NAME "HU_EHPHeartFlag"
#define ECU_GW_3_AF_HU_EHR_HEART_FLAG_NAME "HU_EHRHeartFlag"
#define ECU_GW_3_AF_HU_ADAS_POSN_PATHLDX_NAME "HU_ADAS_Posn_Pathldx"
#define ECU_GW_3_AF_HU_ADAS_POSN_OFFSET_NAME "HU_ADAS_Posn_Offset"
#define ECU_GW_3_AF_HU_ROLLING_COUNTER_3_AF_NAME "HU_RollingCounter_3AF"
#define ECU_GW_3_AF_HU_CRC_CHECK_3_AF_NAME "HU_CRCCheck_3AF"
#define ECU_GW_3_B3_BCM_DOOR_HANDLE_TIME_DIFFERENCE_NAME "BCM_DoorHandle_TimeDifference"
#define ECU_GW_3_B3_BCM_PASSENGE_DOOR_HANDLE_STATUS_NAME "BCM_PassengeDoorHandleStatus"
#define ECU_GW_3_B3_BCM_RIGHT_REAR_DOOR_HANDLE_STATUS_NAME "BCM_RightRearDoorHandleStatus"
#define ECU_GW_3_B3_BCM_REAR_FOGLAMP_STATUS_NAME "BCM_RearFoglampStatus"
#define ECU_GW_3_B3_BCM_BRAKE_LAMP_ERROR_NAME "BCM_BrakeLampError"
#define ECU_GW_3_B3_BCM_RIGHT_REAR_FOGLAMP_ERROR_NAME "BCM_RightRearFoglampError"
#define ECU_GW_3_B3_BCM_LEFT_REAR_FOGLAMP_ERROR_NAME "BCM_LeftRearFoglampError"
#define ECU_GW_3_B3_BCM_REAR_POSITION_LAMP_ERROR_NAME "BCM_RearPositionLampError"
#define ECU_GW_3_B3_LCM_REVERSE_LIGHT_STS_NAME "LCM_ReverseLightSts"
#define ECU_GW_3_B3_BCM_REVERSE_LAMP_ERROR_NAME "BCM_ReverseLampError"
#define ECU_GW_3_B3_BCM_CHM_LAMP_ERROR_NAME "BCM_CHMLampError"
#define ECU_GW_3_BD_HU_CSLA_ENABLE_NAME "HU_CSLAEnable"
#define ECU_GW_3_BD_HU_HWA_ENABLE_NAME "HU_HWAEnable"
#define ECU_GW_3_BD_HU_IRLC_ENABLE_NAME "HU_IRLCEnable"
#define ECU_GW_3_BD_HU_ELK_ENABLE_NAME "HU_ELKEnable"
#define ECU_GW_3_BD_HU_LANE_CHANGE_REQ_NAME "HU_LaneChangeReq"
#define ECU_GW_3_BD_HU_ESS_ENABLE_NAME "HU_ESSEnable"
#define ECU_GW_3_BD_HU_TLA_ENABLE_NAME "HU_TLAEnable"
#define ECU_GW_3_BD_HU_ADS_ROAD_VOICE_ENABLE_NAME "HU_ADSRoadVoiceEnable"
#define ECU_GW_3_BD_HU_ADS_RESCUE_CONFIRM_NAME "HU_ADSRescueConfirm"
#define ECU_GW_3_BD_HU_UDLC_ENABLE_NAME "HU_UDLCEnable"
#define ECU_GW_3_BD_HU_TRANSPARENT_VALUE_CAR_REQUEST_NAME "HU_TransparentValueCarRequest"
#define ECU_GW_3_BD_HU_3_DAVM_REQ_NAME "HU_3DAVMReq"
#define ECU_GW_3_BD_HU_ADS_LANE_CHANGE_VOICE_ENABLE_NAME "HU_ADSLaneChangeVoiceEnable"
#define ECU_GW_3_BD_HU_ADS_SAFE_VOICE_ENABLE_NAME "HU_ADSSafeVoiceEnable"
#define ECU_GW_3_BD_HU_ROLLING_COUNTER_394_NAME "HU_RollingCounter_394"
#define ECU_GW_3_BD_HU_CRC_CHECK_394_NAME "HU_CRCCheck_394"
#define ECU_GW_3_BD_HU_AVM_MAP_DISPLAY_FEEDBACK_NAME "HU_AVMMapDisplayFeedback"
#define ECU_GW_3_BD_HU_REBROADCAST_REQ_NAME "HU_RebroadcastReq"
#define ECU_GW_3_BD_HU_360_AV_MDETECTION_REQUEST_NAME "HU_360AVMdetectionRequest"
#define ECU_GW_3_BD_HU_REAL_TIME_REQ_NAME "HU_RealTimeReq"
#define ECU_GW_3_BD_HU_DVR_EDIT_SELECTED_NAME "HU_DVREditSelected"
#define ECU_GW_3_BD_HU_VISION_ANGLE_REQ_NAME "HU_VisionAngleReq"
#define ECU_GW_3_BD_HU_NAVI_ICON_NUMBER_2_NAME "HU_NaviIconNumber_2"
#define ECU_GW_3_BD_HU_AUTO_VIEW_SET_NAME "HU_AutoViewSet"
#define ECU_GW_3_BD_HU_SD_CAPACITY_NAME "HU_SDCapacity"
#define ECU_GW_3_BD_HU_SEEOFFANIMATION_NAME "HU_Seeoffanimation"
#define ECU_GW_3_BD_HU_TUID_REQ_NAME "HU_TUIDReq"
#define ECU_GW_3_BD_HU_REGISTER_STATUS_NAME "HU_RegisterStatus"
#define ECU_GW_3_BD_HU_SURRONDING_MONITOR_DONE_NAME "HU_SurrondingMonitorDone"
#define ECU_GW_3_BD_HU_BCALL_REQ_NAME "HU_BcallReq"
#define ECU_GW_3_BD_HU_DVR_ERROR_RECORD_NAME "HU_DVRErrorRecord"
#define ECU_GW_3_BD_HU_DVR_SYSTEM_IMPRINT_NAME "HU_DVRSystemImprint"
#define ECU_GW_3_BD_HU_NAVI_DISTANCE_NAME "HU_NaviDistance"
#define ECU_GW_3_BD_HU_NAVI_ICON_NUMBER_NAME "HU_NaviIconNumber"
#define ECU_GW_3_BD_HU_VC_VR_NAME "HU_VC_VR"
#define ECU_GW_3_BD_HU_HUD_POS_ADJUST_INC_NAME "HU_HUDPosAdjustInc"
#define ECU_GW_3_BD_HU_HUD_POS_ADJUST_DEC_NAME "HU_HUDPosAdjustDec"
#define ECU_GW_3_BD_HU_COMPASS_NAME "HU_Compass"
#define ECU_GW_3_BD_HU_APA_ACTIVE_NAME "HU_APAActive"
#define ECU_GW_3_BD_HU_REMOTE_DISP_STS_NAME "HU_RemoteDispSts"
#define ECU_GW_3_BD_HU_LAEB_ENABLE_NAME "HU_LAEBEnable"
#define ECU_GW_3_BD_HU_CURRENT_MEDIA_INFO_NAME "HU_CurrentMedia_Info"
#define ECU_GW_3_BD_HU_APA_REMOTE_DISP_STS_NAME "HU_APARemoteDispSts"
#define ECU_GW_3_BD_HU_RADS_SWITCH_NAME "HU_RADSSwitch"
#define ECU_GW_3_BD_HU_LANGUAGE_SYNC_NAME "HU_LanguageSync"
#define ECU_GW_3_BD_HU_ASP_REMIND_ENABLE_NAME "HU_ASPRemindEnable"
#define ECU_GW_3_BD_HU_PAC_MODE_SELECT_NAME "HU_PACModeSelect"
#define ECU_GW_3_BD_HU_EXT_REMOTE_DETECT_UPLOAD_STATUS_NAME "HU_EXT_RemoteDetectUploadStatus"
#define ECU_GW_3_BD_HU_ASP_MODE_SELECT_NAME "HU_ASPModeSelect"
#define ECU_GW_3_BD_HU_CROSS_PARKING_MODE_SET_NAME "HU_CrossParkingModeSet"
#define ECU_GW_3_BD_HU_ASP_SWITCH_NAME "HU_ASPSwitch"
#define ECU_GW_3_BD_HU_APA_MODE_SELECT_NAME "HU_APAModeSelect"
#define ECU_GW_3_BD_HU_REAR_FOGLAMP_SET_NAME "HU_RearFoglampSet"
#define ECU_GW_3_BD_HU_AUTO_HEAD_LI_SET_NAME "HU_AutoHeadLiSet"
#define ECU_GW_3_BD_HU_BODY_COLOUR_SET_NAME "HU_BodyColourSet"
#define ECU_GW_3_BD_HU_AVMDVR_REPLAY_MODE_REQ_NAME "HU_AVMDVRReplayModeReq"
#define ECU_GW_3_BD_HU_WHEEL_HUB_SET_NAME "HU_WheelHubSet"
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_SET_NAME "HU_LicenseNumberSet"
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_NAME "HU_LicenseNumber"
#define ECU_GW_3_BD_HU_LICENSE_NUMBER_CHECK_SUM_NAME "HU_LicenseNumberCheckSum"
#define ECU_GW_3_BD_HU_APA_THEME_CHANGE_NAME "HU_APAThemeChange"
#define ECU_GW_3_BD_HU_DVR_UPDATE_REQ_NAME "HU_DVRUpdateReq"
#define ECU_GW_3_C4_HU_ENTER_TUNNEL_INFO_NAME "HU_EnterTunnelInfo"
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_NAME "HU_RoadCurvature"
#define ECU_GW_3_C4_HU_TUNNEL_DISTANCE_NAME "HU_TunnelDistance"
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_FAR_NAME "HU_RoadCurvatureFar"
#define ECU_GW_3_C4_HU_TUNNEL_LENGTH_NAME "HU_TunnelLength"
#define ECU_GW_3_C4_HU_NAV_GUIGANCE_STATUS_NAME "HU_NavGuiganceStatus"
#define ECU_GW_3_C4_HU_ROLLING_COUNTER_3_B8_NAME "HU_RollingCounter_3B8"
#define ECU_GW_3_C4_HU_CRC_CHECK_3_B8_NAME "HU_CRCCheck_3B8"
#define ECU_GW_3_C4_HU_RAMP_SIDE_NAME "HU_RampSide"
#define ECU_GW_3_C4_HU_FORWARD_ROAD_TYPE_NAME "HU_ForwardRoadType"
#define ECU_GW_3_C4_HU_LANE_CNT_NAME "HU_LaneCnt"
#define ECU_GW_3_C4_HU_TOLL_INFO_NAME "HU_TollInfo"
#define ECU_GW_3_C4_HU_TOLL_DIS_NAME "HU_TollDis"
#define ECU_GW_3_C4_HU_ROAD_TRAFFIC_FLOW_NAME "HU_Road_TrafficFlow"
#define ECU_GW_3_C4_HU_MAP_DATA_UPDATE_STATUS_NAME "HU_MapDataUpdateStatus"
#define ECU_GW_3_C4_HU_ROLLING_COUNTER_3_C2_NAME "HU_RollingCounter_3C2"
#define ECU_GW_3_C4_HU_CRC_CHECK_3_C2_NAME "HU_CRCCheck_3C2"
#define ECU_GW_3_C4_HU_TO_NUMCHANGE_OF_LANES_DIST_NAME "HU_To_NumchangeOfLanes_Dist"
#define ECU_GW_3_C4_HU_LANE_CHANGTYPE_NAME "HU_Lane_Changtype"
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_10M_NAME "HU_RoadCurvature_10m"
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_20M_NAME "HU_RoadCurvature_20m"
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_30M_NAME "HU_RoadCurvature_30m"
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_40M_NAME "HU_RoadCurvature_40m"
#define ECU_GW_3_C4_HU_ROLLING_COUNTER_3_C4_2_NAME "HU_RollingCounter_3C4_2"
#define ECU_GW_3_C4_HU_CRC_CHECK_3_C4_2_NAME "HU_CRCCheck_3C4_2"
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_50M_NAME "HU_RoadCurvature_50m"
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_60M_NAME "HU_RoadCurvature_60m"
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_70M_NAME "HU_RoadCurvature_70m"
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_80M_NAME "HU_RoadCurvature_80m"
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_90M_NAME "HU_RoadCurvature_90m"
#define ECU_GW_3_C4_HU_ROLLING_COUNTER_3_C6_NAME "HU_RollingCounter_3C6"
#define ECU_GW_3_C4_HU_CRC_CHECK_3_C6_NAME "HU_CRCCheck_3C6"
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_100M_NAME "HU_RoadCurvature_100m"
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_300M_NAME "HU_RoadCurvature_300m"
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_400M_NAME "HU_RoadCurvature_400m"
#define ECU_GW_3_C4_HU_ROAD_CURVATURE_600M_NAME "HU_RoadCurvature_600m"
#define ECU_GW_3_C4_HU_MAP_MATCH_STATUS_NAME "HU_MapMatchStatus"
#define ECU_GW_3_C4_HU_ROLLING_COUNTER_3_C7_NAME "HU_RollingCounter_3C7"
#define ECU_GW_3_C4_HU_CRC_CHECK_3_C7_NAME "HU_CRCCheck_3C7"
#define ECU_GW_3_C4_HU_ROLLING_COUNTER_3_C4_NAME "HU_RollingCounter_3C4"
#define ECU_GW_3_C4_HU_CRC_CHECK_3_C4_NAME "HU_CRCCheck_3C4"
#define ECU_GW_3_FD_BCM_DRIVE_MODE_NAME "BCM_DriveMode"
#define ECU_GW_3_FD_BCM_EPS_TORQ_SYN_STATUS_NAME "BCM_EPSTorqSYNStatus"
#define ECU_GW_3_FD_BCM_DRV_MOD_SW_STS_NAME "BCM_DrvModSwSts"
#define ECU_GW_3_FD_BCM_EPS_TORQUE_MODE_NAME "BCM_EPSTorqueMode"
#define ECU_GW_3_FD_BCM_POWER_MANAGE_LEVEL_NAME "BCM_PowerManageLevel"
#define ECU_GW_3_FD_BCM_REAR_FOGLAMP_STATUS_FB_NAME "BCM_RearFoglampStatusFB"
#define ECU_GW_3_FD_BCM_AUT_HEAD_LI_STS_NAME "BCM_AutHeadLiSts"
#define ECU_GW_3_FD_BCM_FRONT_WINDSHIELD_WARM_STATUS_NAME "BCM_FrontWindshieldWarmStatus"
#define ECU_GW_3_FD_BCM_SWITCH_DIMMERLEVEL_NAME "BCM_SwitchDimmerlevel"
#define ECU_GW_3_FD_BCM_ROLLING_COUNTER_3_FD_NAME "BCM_RollingCounter_3FD"
#define ECU_GW_3_FD_BCM_CRC_CHECK_3_FD_NAME "BCM_CRCCheck_3FD"
#define ECU_GW_3_FF_BCM_MUSIC_PLAY_REQUEST_SIGNAL_NAME "BCM_MusicPlayRequestSignal"
#define ECU_GW_3_FF_BCM_MUSIC_LIGHT_MODE_SELECT_STS_NAME "BCM_MusicLightModeSelectSts"
#define ECU_GW_3_FF_BCM_FOLLOW_ME_TURNON_NAME "BCM_FollowMeTurnon"
#define ECU_GW_3_FF_PEPS_WELCOME_LIGHT_STAUS_NAME "PEPS_WelcomeLightStaus"
#define ECU_GW_3_FF_BCM_MUSICLIGHTFEEDBACK_NAME "BCM_Musiclightfeedback"
#define ECU_GW_3_FF_BCM_FRONT_POSITION_LAMP_ERROR_NAME "BCM_FrontPositionLampError"
#define ECU_GW_3_FF_BCM_AUTO_HEADLIGHT_STS_NAME "BCM_AutoHeadlightSts"
#define ECU_GW_3_FF_BCM_FRONT_FOGLAMP_STATUS_NAME "BCM_FrontFoglampStatus"
#define ECU_GW_3_FF_BCM_POSITION_LAMP_STATUS_NAME "BCM_PositionLampStatus"
#define ECU_GW_3_FF_BCM_RIGHT_FRONT_FOGLAMP_ERROR_NAME "BCM_RightFrontFoglampError"
#define ECU_GW_3_FF_BCM_LEFT_FRONT_FOGLAMP_ERROR_NAME "BCM_LeftFrontFoglampError"
#define ECU_GW_3_FF_BCM_RIGHT_LOW_BEAM_ERROR_NAME "BCM_RightLowBeamError"
#define ECU_GW_3_FF_BCM_LEFT_LOW_BEAM_ERROR_NAME "BCM_LeftLowBeamError"
#define ECU_GW_3_FF_BCM_RIGHT_DAY_LAMP_ERROR_NAME "BCM_RightDayLampError"
#define ECU_GW_3_FF_BCM_LEFT_DAY_LAMP_ERROR_NAME "BCM_LeftDayLampError"
#define ECU_GW_3_FF_BCM_TURN_INDICATOR_RIGHT_ERROR_NAME "BCM_TurnIndicatorRightError"
#define ECU_GW_3_FF_BCM_TURN_INDICATOR_LEFT_ERROR_NAME "BCM_TurnIndicatorLeftError"
#define ECU_GW_3_FF_BCM_POSITION_LAMP_SWITCH_STATUS_NAME "BCM_PositionLampSwitchStatus"
#define ECU_GW_3_FF_LCM_DRL_STS_NAME "LCM_DRLSts"
#define ECU_GW_3_FF_BCM_FOLLOW_ME_HOME_LIGHT_SET_STATUS_NAME "BCM_FollowMeHomeLightSetStatus"
#define ECU_GW_3_FF_BCM_FLOOR_LAMP_STATUS_NAME "BCM_FloorLampStatus"
#define ECU_GW_3_FF_BCM_HIGH_BEAM_LAMP_ERROR_NAME "BCM_HighBeamLampError"
#define ECU_GW_3_FF_BCM_ROLLING_COUNTER_3_FF_NAME "BCM_RollingCounter_3FF"
#define ECU_GW_3_FF_BCM_CRC_CHECK_3_FF_NAME "BCM_CRCCheck_3FF"
#define ECU_GW_51_E_TPMS_LF_TEMPERATURE_WARNING_NAME "TPMS_LFTemperatureWarning"
#define ECU_GW_51_E_TPMS_RF_TEMPERATURE_WARNING_NAME "TPMS_RFTemperatureWarning"
#define ECU_GW_51_E_TPMS_RR_TEMPERATURE_WARNING_NAME "TPMS_RRTemperatureWarning"
#define ECU_GW_51_E_TPMS_LR_TEMPERATURE_WARNING_NAME "TPMS_LRTemperatureWarning"
#define ECU_GW_51_E_TPMS_TIRE_POSITION_NAME "TPMS_TirePosition"
#define ECU_GW_51_E_TPMS_TIRE_TEMPERATURE_NAME "TPMS_TireTemperature"
#define ECU_GW_51_E_TPMS_LF_LEAKAGE_WARNING_NAME "TPMS_LFLeakageWarning"
#define ECU_GW_51_E_TPMS_RF_LEAKAGE_WARNING_NAME "TPMS_RFLeakageWarning"
#define ECU_GW_51_E_TPMS_RR_LEAKAGE_WARNING_NAME "TPMS_RRLeakageWarning"
#define ECU_GW_51_E_TPMS_LR_LEAKAGE_WARNING_NAME "TPMS_LRLeakageWarning"
#define ECU_GW_51_E_TPMS_SUGGESTION_NAME "TPMS_Suggestion"
#define ECU_GW_51_E_TPMS_COMMENDATORYPRESSURE_NAME "TPMS_Commendatorypressure"
#define ECU_GW_51_E_TPMS_AERATE_FLAG_NAME "TPMS_AerateFlag"
#define ECU_GW_51_E_BCM_ROLLING_COUNTER_51_E_NAME "BCM_RollingCounter_51E"
#define ECU_GW_51_E_BCM_CRC_CHECK_51_E_NAME "BCM_CRCCheck_51E"
#define ECU_ACC_693_ACC_DTC1_HIGH_BYTE_NAME "ACC_DTC1_HighByte"
#define ECU_ACC_693_ACC_DTC1_MIDD_BYTE_NAME "ACC_DTC1_MiddByte"
#define ECU_ACC_693_ACC_DTC1_LOW_BYTE_NAME "ACC_DTC1_LowByte"
#define ECU_ACC_693_ACC_DTC1_STATUS_NAME "ACC_DTC1_Status"
#define ECU_ACC_693_ACC_DTC2_HIGH_BYTE_NAME "ACC_DTC2_HighByte"
#define ECU_ACC_693_ACC_DTC2_MIDD_BYTE_NAME "ACC_DTC2_MiddByte"
#define ECU_ACC_693_ACC_DTC2_LOW_BYTE_NAME "ACC_DTC2_LowByte"
#define ECU_ACC_693_ACC_DTC2_STATUS_NAME "ACC_DTC2_Status"
#define ECU_LAS_694_LAS_DTC1_HIGH_BYTE_NAME "LAS_DTC1_HighByte"
#define ECU_LAS_694_LAS_DTC1_MIDD_BYTE_NAME "LAS_DTC1_MiddByte"
#define ECU_LAS_694_LAS_DTC1_LOW_BYTE_NAME "LAS_DTC1_LowByte"
#define ECU_LAS_694_LAS_DTC1_STATUS_NAME "LAS_DTC1_Status"
#define ECU_LAS_694_LAS_DTC2_HIGH_BYTE_NAME "LAS_DTC2_HighByte"
#define ECU_LAS_694_LAS_DTC2_MIDD_BYTE_NAME "LAS_DTC2_MiddByte"
#define ECU_LAS_694_LAS_DTC2_LOW_BYTE_NAME "LAS_DTC2_LowByte"
#define ECU_LAS_694_LAS_DTC2_STATUS_NAME "LAS_DTC2_Status"
#define ECU_LAS_452_NM_MESSAGE452_NAME "NM_message452"
#define ECU_GW_28_C_GW_MFS_SET_REDUCE_SWITCH_SIGNAL_NAME "GW_MFS_SETReduce_switch_signal"
#define ECU_GW_28_C_GW_MFS_RES_PLUS_SWITCH_SIGNAL_NAME "GW_MFS_RESPlus_switch_signal"
#define ECU_GW_28_C_GW_MFS_CANCLE_SWITCH_SIGNAL_NAME "GW_MFS_Cancle_switch_signal"
#define ECU_GW_28_C_GW_MFS_CRUSIE_SWITCH_SIGNAL_NAME "GW_MFS_Crusie_switch_signal"
#define ECU_GW_28_C_GW_MFS_EPS_SWITCH_NAME "GW_MFS_EPS_switch"
#define ECU_GW_28_C_GW_MFS_IAC_CENABLE_SWITCH_SIGNAL_NAME "GW_MFS_IACCenable_switch_signal"
#define ECU_GW_28_C_GW_MFS_LIM_SWITCH_SIGNAL_NAME "GW_MFS_LIM_switch_signal"
#define ECU_GW_28_C_GW_MFS_DIST_SWITCH_SIGNAL_NAME "GW_MFS_DIST_switch_signal"
#define ECU_GW_28_C_GW_MFS_HOD_SYSTEM_STATUS_NAME "GW_MFS_HODSystemStatus"
#define ECU_GW_28_C_GW_MFS_HANDSOFF_DETECT_RESULT_NAME "GW_MFS_handsoffDetectResult"
#define ECU_GW_28_C_GW_MFS_DIST_PLUS_SWITCH_SIGNAL_NAME "GW_MFS_DISTPlus_switch_signal"
#define ECU_GW_28_C_GW_MFS_DIST_REDUCE_SWITCH_SIGNAL_NAME "GW_MFS_DISTReduce_switch_signal"
#define ECU_GW_28_C_GW_MFS_HOD_CALIBRATED_STATUS_NAME "GW_MFS_HODCalibratedStatus"
#define ECU_GW_28_C_GW_MFS_HOD_LIN_STATUS_NAME "GW_MFS_HODLinStatus"
#define ECU_GW_28_C_GW_MFS_HOD_APP_STATUS_NAME "GW_MFS_HODAppStatus"
#define ECU_GW_28_C_GW_MFS_HANDSOFF_ABILITY_DETECT_NAME "GW_MFS_handsoffAbilityDetect"
#define ECU_GW_28_C_GW_MFS_HOD_SENSER_STATUS_NAME "GW_MFS_HODSenserStatus"
#define ECU_GW_28_C_GW_MFS_ERS_REDUCE_SWITCH_NAME "GW_MFS_ERSReduce_switch"
#define ECU_GW_28_C_GW_MFS_ERS_PLUS_SWITCH_NAME "GW_MFS_ERSPlus_switch"
#define ECU_GW_28_C_GW_MFS_DIAG_INFO_SW_28_C_NAME "GW_MFS_DiagInfoSW_28C"
#define ECU_GW_28_C_GW_MFS_GEARSHIFT_PLUS_SWITCH_NAME "GW_MFS_GearshiftPlus_switch"
#define ECU_GW_28_C_GW_MFS_GEARSHIFT_REDUCE_SWITCH_NAME "GW_MFS_GearshiftReduce_switch"
#define ECU_GW_28_C_GW_MFS_ROLLING_COUNTER_28_C_NAME "GW_MFS_RollingCounter_28C"
#define ECU_GW_28_C_GW_MFS_CRC_CHECK_28_C_NAME "GW_MFS_CRCCheck_28C"
#define ECU_GW_331_TCU_FAILURE_LAMP_NAME "TCU_FailureLamp"
#define ECU_GW_331_TCU_TRANS_TEMP_WARNING_NAME "TCU_TransTempWarning"
#define ECU_GW_331_TCU_COOLANT_FAN_REQUEST_NAME "TCU_CoolantFanRequest"
#define ECU_GW_331_TCU_TRANS_FLUID_TEMP_NAME "TCU_TransFluidTemp"
#define ECU_GW_331_TCU_K0_CLUTCH_EXIT_OIL_TEMP_NAME "TCU_K0ClutchExitOilTemp"
#define ECU_GW_331_TCU_GEAR_FOR_DISPLAY_NAME "TCU_GearForDisplay"
#define ECU_GW_331_TCU_ROTOR_ACUTAL_COOLING_FLOW_NAME "TCU_RotorAcutalCoolingFlow"
#define ECU_GW_331_TCU_PARK_REL_A_POSN_IP_REQ_NAME "TCU_ParkRelAPosnIPReq"
#define ECU_GW_331_TCU_PARK_REL_M_POSN_IP_REQ_NAME "TCU_ParkRelMPosnIPReq"
#define ECU_GW_331_TCU_PARK_SELECT_IP_REQ_NAME "TCU_ParkSelectIPReq"
#define ECU_GW_331_TCU_ESL_FAULT_IP_REQ_NAME "TCU_ESLFaultIPReq"
#define ECU_GW_331_TCU_ARC_FAULT_IP_REQ_NAME "TCU_ARCFaultIPReq"
#define ECU_GW_331_TCU_POWERPLANT_STATUS_IP_REQ_NAME "TCU_PowerplantStatusIPReq"
#define ECU_GW_331_TCU_TRANS_FAULT_LEVEL_NAME "TCU_TransFaultLevel"
#define ECU_GW_331_TCU_ROLLING_COUNTER_338_NAME "TCU_RollingCounter_338"
#define ECU_GW_331_TCU_CRC_CHECK_338_NAME "TCU_CRCCheck_338"
#define ECU_GW_1_AF_TCU_STL_KFAILURE_NAME "TCU_STLKfailure"
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_VALID_NAME "TCU_ActualDrivingGearValid"
#define ECU_GW_1_AF_TCU_SHIFT_POSTION_VALID_NAME "TCU_ShiftPostionValid"
#define ECU_GW_1_AF_TCU_ACTUAL_DRIVING_GEAR_NAME "TCU_ActualDrivingGear"
#define ECU_GW_1_AF_TCU_GEAR_SHIFT_POSITION_NAME "TCU_GearShiftPosition"
#define ECU_GW_1_AF_TCU_ACTUAL_PRESELECT_GEAR_NAME "TCU_ActualPreselectGear"
#define ECU_GW_1_AF_TCU_INPUT_SHAFT_SPEED_NAME "TCU_InputShaftSpeed"
#define ECU_GW_1_AF_TCU_THO_STATE_NAME "TCU_THOState"
#define ECU_GW_1_AF_TCU_GEAR_RATIO_NAME "TCU_GearRatio"
#define ECU_GW_1_AF_TCU_TIP_SWITCH_SIGNAL_NAME "TCU_TipSwitchSignal"
#define ECU_GW_1_AF_TCU_ROLLING_COUNTER_1_A8_NAME "TCU_RollingCounter_1A8"
#define ECU_GW_1_AF_TCU_CRC_CHECK_1_A8_NAME "TCU_CRCCheck_1A8"
#define ECU_GW_320_GW_OT_AMODE_CHKS_NAME "GW_OTAmode_Chks"
#define ECU_GW_320_GW_DCAN_DIAG_STS_NAME "GW_DCANDiagSts"
#define ECU_GW_320_GW_GATEWAY_FAILURE_FLAG_NAME "GW_GatewayFailureFlag"
#define ECU_GW_320_GW_OT_AMODE_CNTR_NAME "GW_OTAmode_Cntr"
#define ECU_GW_320_GW_ADS_SEC_OC_VERIFY_FAILURE_FLAG_NAME "GW_ADSSecOCVerifyFailureFlag"
#define ECU_GW_320_GW_RESET_REQ_NAME "GW_ResetReq"
#define ECU_GW_320_GW_OT_AMODE_NAME "GW_OTAmode"
#define ECU_LAS_39_A_LAS_TSR_SPEED_LIMIT_TYPE_NAME "LAS_TSRSpeedLimitType"
#define ECU_LAS_39_A_LAS_OVERSPEED_VISUAL_WARNING_NAME "LAS_OverspeedVisualWarning"
#define ECU_LAS_39_A_LAS_OVERSPEED_SOUND_WARNING_NAME "LAS_OverspeedSoundWarning"
#define ECU_LAS_39_A_LAS_OVERSPEED_WARNING_ENABLE_STATUS_NAME "LAS_OverspeedWarningEnableStatus"
#define ECU_LAS_39_A_LAS_OVERSPEED_WARNING_OFFSET_NAME "LAS_OverspeedWarningOffset"
#define ECU_LAS_39_A_LAS_HMA_LIGHT_DISTRIBUTION_NAME "LAS_HMALightDistribution"
#define ECU_LAS_39_A_LAS_HMA_ENABLE_STATUS_NAME "LAS_HMAEnableStatus"
#define ECU_LAS_39_A_LAS_FRONT_CAMERA_CALIBRATION_STATUS_NAME "LAS_FrontCameraCalibrationStatus"
#define ECU_LAS_39_A_LAS_FRONT_CAMERA_FAILURE_STATUS_NAME "LAS_FrontCameraFailureStatus"
#define ECU_LAS_39_A_LAS_TSR_ENABLE_NAME "LAS_TSREnable"
#define ECU_LAS_39_A_LAS_OVERSPEED_SOUND_WARNING_EN_ST_NAME "LAS_OverspeedSoundWarningEnSt"
#define ECU_LAS_39_A_LAS_TSR_STATUS_NAME "LAS_TSRStatus"
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_NAME "LAS_TSRHostSpdLimit"
#define ECU_LAS_39_A_LAS_HMA_STATUS_NAME "LAS_HMAStatus"
#define ECU_LAS_39_A_LAS_TSR_HOST_SPD_LIMIT_UNITS_NAME "LAS_TSRHostSpdLimitUnits"
#define ECU_LAS_39_A_LAS_ROLLING_COUNTER_332_NAME "LAS_RollingCounter_332"
#define ECU_LAS_39_A_LAS_CRC_CHECK_332_NAME "LAS_CRCCheck_332"
#define ECU_LAS_39_A_LAS_ROLLING_COUNTER_3_D4_NAME "LAS_RollingCounter_3D4"
#define ECU_LAS_39_A_LAS_CRC_CHECK_3_D4_NAME "LAS_CRCCheck_3D4"
#define ECU_LAS_39_A_LAS_ROLLING_COUNTER_3_C0_NAME "LAS_RollingCounter_3C0"
#define ECU_LAS_39_A_LAS_CRC_CHECK_3_C0_NAME "LAS_CRCCheck_3C0"
#define ECU_LAS_39_A_LAS_ROLLING_COUNTER_37_D_NAME "LAS_RollingCounter_37D"
#define ECU_LAS_39_A_LAS_CRC_CHECK_37_D_NAME "LAS_CRCCheck_37D"
#define ECU_LAS_39_A_LAS_CROSSWALK_LNG_RANGE_H_LANE_NAME "LAS_CrosswalkLngRange_HLane"
#define ECU_LAS_39_A_LAS_RD4_ROAD_INFOR_AVAILABLE_NAME "LAS_RD4RoadInforAvailable"
#define ECU_LAS_39_A_LAS_RD2_ROAD_INFOR_AVAILABLE_NAME "LAS_RD2RoadInforAvailable"
#define ECU_LAS_39_A_LAS_ROAD_FEATURE_NAME "LAS_RoadFeature"
#define ECU_LAS_39_A_LAS_RD4_LONG_DISTENCE_NAME "LAS_RD4LongDistence"
#define ECU_LAS_39_A_LAS_RD3_LONG_DISTENCE_NAME "LAS_RD3LongDistence"
#define ECU_LAS_39_A_LAS_RD2_LONG_DISTENCE_NAME "LAS_RD2LongDistence"
#define ECU_LAS_39_A_LAS_RD1_LONG_DISTENCE_NAME "LAS_RD1LongDistence"
#define ECU_LAS_39_A_LAS_RD3_ROAD_INFOR_AVAILABLE_NAME "LAS_RD3RoadInforAvailable"
#define ECU_LAS_39_A_LAS_RD1_ROAD_INFOR_AVAILABLE_NAME "LAS_RD1RoadInforAvailable"
#define ECU_LAS_39_A_LAS_ROLLING_COUNTER_579_NAME "LAS_RollingCounter_579"
#define ECU_LAS_39_A_LAS_CRC_CHECK_579_NAME "LAS_CRCCheck_579"
#define ECU_LAS_39_A_ACC_ROLLING_COUNTER_39_A_NAME "ACC_RollingCounter_39A"
#define ECU_LAS_39_A_ACC_CRC_CHECK_39_A_NAME "ACC_CRCCheck_39A"
#define ECU_GW_310_AMP_VOL_SPEED_ENABLE_SET_STATUS_NAME "AMP_VOLSpeedEnableSETStatus"
#define ECU_GW_310_AMP_HEAD_SPKNIVISET_STATUS_NAME "AMP_HeadSPKNIVISETStatus"
#define ECU_GW_310_AMP_HEAD_SPK_TEL_SET_STATUS_NAME "AMP_HeadSPKTelSETStatus"
#define ECU_GW_310_AMP_HEAD_SPK_MEDIA_SET_STATUS_NAME "AMP_HeadSPKMediaSETStatus"
#define ECU_GW_310_AMP_HEAD_SPK_VOL_SET_STATUS_NAME "AMP_HeadSPKVolSETStatus"
#define ECU_GW_310_AMP_ALARM_VOL_SET_STATUS_NAME "AMP_AlarmVolSETStatus"
#define ECU_GW_310_AMP_LR_HEAD_SPK_BALANCE_SET_STATUS_NAME "AMP_LRHeadSPKBalanceSETStatus"
#define ECU_GW_310_AMP_ALARM_STYLE_SET_STATUS_NAME "AMP_AlarmStyleSETStatus"
#define ECU_GW_310_AMP_TOUCH_VOL_SET_STATUS_NAME "AMP_TouchVolSETStatus"
#define ECU_GW_310_AMP_SPK_CHANNEL_SET_STATUS_NAME "AMP_SPKChannelSETStatus"
#define ECU_GW_310_AMP_MUTESET_STATUS_NAME "AMP_MUTESETStatus"
#define ECU_GW_310_AMP_IP_ENABLE_ALARM_FAILURE_STATUS_NAME "AMP_IPEnableAlarmFailureStatus"
#define ECU_GW_310_AMP_ALL_ALARM_FAILURE_STATUS_NAME "AMP_AllAlarmFailureStatus"
#define ECU_GW_310_AMP_VOL_SPEED_LEV_SET_STATUS_NAME "AMP_VOLSpeedLevSETStatus"
#define ECU_GW_3_E8_BCM_SOC_NAME "BCM_SOC"
#define ECU_GW_3_E8_BCM_SOF_Q_NAME "BCM_SOF_Q"
#define ECU_GW_3_E8_BCM_SOF_V1_NAME "BCM_SOF_V1"
#define ECU_GW_3_E8_BCM_SOF_V2_NAME "BCM_SOF_V2"
#define ECU_GW_3_E8_BCM_SOF_T_NAME "BCM_SOF_t"
#define ECU_GW_3_E8_BCM_SOC_STATE_NAME "BCM_SOC_STATE"
#define ECU_GW_3_E8_BCM_SOF_Q_STATE_NAME "BCM_SOF_Q_STATE"
#define ECU_GW_3_E8_BCM_SOF_V1_STATE_NAME "BCM_SOF_V1_STATE"
#define ECU_GW_3_E8_BCM_SOF_V2_STATE_NAME "BCM_SOF_V2_STATE"
#define ECU_GW_3_E8_BCM_SOF_T_STATE_NAME "BCM_SOF_t_STATE"
#define ECU_GW_3_E7_BCM_U_BATT_NAME "BCM_U_BATT"
#define ECU_GW_3_E7_BCM_I_RANGE_NAME "BCM_I_RANGE"
#define ECU_GW_3_E7_BCM_I_BATT_NAME "BCM_I_BATT"
#define ECU_GW_3_E7_BCM_T_BATT_NAME "BCM_T_BATT"
#define ECU_GW_3_E7_BCM_IBATT_QUIESCENT_NAME "BCM_IBATT_QUIESCENT"
#define ECU_GW_3_E7_BCM_STATUS_CURRENT_NAME "BCM_Status_Current"
#define ECU_GW_3_E7_BCM_STATUS_VOLTAGE_NAME "BCM_Status_Voltage"
#define ECU_GW_3_E7_BCM_STATUS_TEMP_NAME "BCM_Status_Temp"
#define ECU_GW_3_E7_BCM_ERROR_CALIB_NAME "BCM_ERROR_Calib"
#define ECU_GW_3_E7_BCM_ERROR_IDENT_NAME "BCM_ERROR_IDENT"
#define ECU_GW_3_E7_BCM_RESP_ERROR_NAME "BCM_Resp_Error"
#define ECU_GW_3_E7_BCM_FLAG_INCONSISTENCY_NAME "BCM_FLAG_INCONSISTENCY"
#define ECU_GW_38_A_GW_MFS_DOWN_SWITCH_NAME "GW_MFS_Down_switch"
#define ECU_GW_38_A_GW_MFS_UP_SWITCH_NAME "GW_MFS_UP_switch"
#define ECU_GW_38_A_GW_MFS_RIGHT_SWITCH_NAME "GW_MFS_Right_switch"
#define ECU_GW_38_A_GW_MFS_LEFT_SWITCH_NAME "GW_MFS_Left_switch"
#define ECU_GW_38_A_GW_MFS_DVR_SWITCH_NAME "GW_MFS_DVR_switch"
#define ECU_GW_38_A_GW_MFS_MODE_SWITCH_NAME "GW_MFS_Mode_switch"
#define ECU_GW_38_A_GW_MFS_SPEECH_SWITCH_NAME "GW_MFS_Speech_switch"
#define ECU_GW_38_A_GW_MFS_OK_SWITCH_NAME "GW_MFS_OK_switch"
#define ECU_GW_38_A_GW_MFS_MUTE_SWITCH_NAME "GW_MFS_Mute_switch"
#define ECU_GW_38_A_GW_MFS_VOL_REDUCE_SWITCH_NAME "GW_MFS_VolReduce_switch"
#define ECU_GW_38_A_GW_MFS_VOL_PLUS_SWITCH_NAME "GW_MFS_VolPlus_switch"
#define ECU_GW_38_A_GW_MFS_CUST_SWITCH_NAME "GW_MFS_Cust_switch"
#define ECU_GW_38_A_GW_MFS_ANSWER_SWITCH_SIGNAL_NAME "GW_MFS_Answer_switch_signal"
#define ECU_GW_38_A_GW_MFS_HUNGUP_SWITCH_SIGNAL_NAME "GW_MFS_Hungup_switch_signal"
#define ECU_GW_38_A_GW_MFS_SEEK_REDUCE_SWITCH_NAME "GW_MFS_SeekReduce_switch"
#define ECU_GW_38_A_GW_MFS_SEEK_PLUS_SWITCH_NAME "GW_MFS_SeekPlus_switch"
#define ECU_GW_38_A_GW_MFS_WE_CHAT_SWITCH_SIGNAL_NAME "GW_MFS_WeChat_switch_signal"
#define ECU_GW_38_A_GW_MFS_AVM_SWITCH_NAME "GW_MFS_AVM_switch"
#define ECU_GW_38_A_GW_MFS_DIAG_INFO_SW_38_A_NAME "GW_MFS_DiagInfoSW_38A"
#define ECU_GW_262_PEPS_START_INDICATOR_SIGNAL_NAME "PEPS_StartIndicatorSignal"
#define ECU_GW_262_PEPS_REMOTE_APA_DONE_KEY_OFF_REQ_NAME "PEPS_RemoteAPADoneKeyOffReq"
#define ECU_GW_262_PEPS_APA_ENGINE0FF_FEEDBACK_NAME "PEPS_APA_Engine0ffFeedback"
#define ECU_GW_262_PEPS_APA_LOCK_FEEDBACK_NAME "PEPS_APA_LockFeedback"
#define ECU_GW_262_PEPS_APA_REMOTE_PARKING_ON_NAME "PEPS_APARemoteParkingOn"
#define ECU_GW_262_PEPS_UNALLOW_START_ESCL_ERROR_NAME "PEPS_UnallowStart_ESCL_Error"
#define ECU_GW_262_PEPS_APA_CLOSE_WIN_FEEDBACK_NAME "PEPS_APA_CloseWinFeedback"
#define ECU_GW_262_PEPS_REMOTE_CONTROL_AC_REQ_NAME "PEPS_RemoteControlACReq"
#define ECU_GW_262_PEPS_POWER_DISTRIBUTION_STATUS_NAME "PEPS_PowerDistributionStatus"
#define ECU_GW_262_PEPS_UNALLOW_START_ESCL_LOCK_NAME "PEPS_UnallowStart_ESCL_LOCK"
#define ECU_GW_262_PEPS_UNALLOW_START_SIGNAL_NOT_PN_NAME "PEPS_UnallowStartSignal_Not_PN"
#define ECU_GW_262_PEPS_IMMO_FAILED_ALARMSIGNAL_NAME "PEPS_IMMOFailedAlarmsignal"
#define ECU_GW_262_PEPS_STARTUP_BUTTON_SIGNAL_NAME "PEPS_StartupButtonSignal"
#define ECU_GW_262_PEPS_REMOTE_START_FEEDBACK_NAME "PEPS_RemoteStartFeedback"
#define ECU_GW_262_PEPS_APA_POWER_MIRROR_FOLD_FEEDBACK_NAME "PEPS_APA_PowerMirrorFoldFeedback"
#define ECU_GW_262_PEPS_ENGINE_STARTUP_INHIBIT_STS_NAME "PEPS_EngineStartupInhibitSts"
#define ECU_GW_262_PEPS_POWER_DISTRIBUTION_FAULT_BIT_NAME "PEPS_PowerDistributionFaultBit"
#define ECU_GW_262_PEPS_ENGINE_STARTUP_INHIBIT_FB_NAME "PEPS_EngineStartupInhibitFB"
#define ECU_GW_262_PEPS_IMMO_FEEDBACK_NAME "PEPS_IMMOFeedback"
#define ECU_GW_262_PEPS_REMOTE_START_KEY_STATUS_NAME "PEPS_RemoteStartKeyStatus"
#define ECU_GW_262_PEPS_PEPS_FAIL_STATUS_NAME "PEPS_PEPSFailStatus"
#define ECU_GW_262_PEPS_KEY_STANDBY_POSITION_INDICATOR_NAME "PEPS_KeyStandbyPositionIndicator"
#define ECU_GW_262_PEPS_APA_REMOTE_PARKING_OFF_NAME "PEPS_APARemoteParkingOff"
#define ECU_GW_262_PEPS_ROLLING_COUNTER_262_NAME "PEPS_RollingCounter_262"
#define ECU_GW_262_PEPS_CRC_CHECK_262_NAME "PEPS_CRCCheck_262"
#define ECU_GW_334_DSM_LEFT_MIRROR_UP_DOWN_STS_NAME "DSM_LeftMirrorUpDownSts"
#define ECU_GW_334_DSM_LEFT_MIRROR_LEFT_RIGHT_STS_NAME "DSM_LeftMirrorLeftRightSts"
#define ECU_GW_334_DSM_RIGHT_MIRROR_LEFT_RIGHT_STS_NAME "DSM_RightMirrorLeftRightSts"
#define ECU_GW_334_DSM_RIGHT_MIRROR_UP_DOWN_STS_NAME "DSM_RightMirrorUpDownSts"
#define ECU_GW_334_DSM_ROLLING_COUNTER_334_NAME "DSM_RollingCounter_334"
#define ECU_GW_334_DSM_CRC_CHECK_334_NAME "DSM_CRCCheck_334"
#define ECU_GW_395_TBOX_REMOTE_ENGINE_STARTUP_REQ_NAME "TBOX_RemoteEngineStartupReq"
#define ECU_GW_395_TBOX_ENGINE_STARTUP_INHIBIT_NAME "TBOX_EngineStartupInhibit"
#define ECU_GW_395_TBOX_LOCK_COMMAND_NAME "TBOX_LockCommand"
#define ECU_GW_395_TBOX_VEHICLE_VEDIO_DETECT_REQ_NAME "TBOX_VehicleVedioDetectReq"
#define ECU_GW_395_TBOX_CAR_REMIND_NAME "TBOX_CarRemind"
#define ECU_GW_395_TBOX_AUDIO_REQUEST_NAME "TBOX_AudioRequest"
#define ECU_GW_395_TBOX_CHANGE_PART_STATUS_NAME "TBOX_ChangePartStatus"
#define ECU_GW_395_TBOX_ESE_UPDATA_HU_WAKE_UP_REQ_NAME "TBOX_EseUpdataHUWakeUpReq"
#define ECU_GW_395_TBOX_CALL_STATUS_NAME "TBOX_CallStatus"
#define ECU_GW_395_TBOX_B_CALL_STATUS_NAME "TBOX_BCallStatus"
#define ECU_GW_395_TBOX_AC_TEMP_VALUE_REQ_NAME "TBOX_ACTempValueReq"
#define ECU_GW_395_TBOX_VEHICLE_STATUS_DEMAND_REQ_NAME "TBOX_VehicleStatusDemandReq"
#define ECU_GW_395_TBOX_REMOTE_START_RUN_TIME_NAME "TBOX_RemoteStartRunTime"
#define ECU_GW_395_TBOX_VIN_MATCH_STATUS_NAME "TBOX_VINMatchStatus"
#define ECU_GW_395_TBOX_VIN_REQ_NAME "TBOX_VINReq"
#define ECU_GW_395_TBOX_SEARCH_CAR_REQ_NAME "TBOX_SearchCarReq"
#define ECU_GW_395_TBOX_RMOTE_TRUNK_NAME "TBOX_RmoteTrunk"
#define ECU_GW_395_TBOX_RMOTE_ROOF_NAME "TBOX_RmoteRoof"
#define ECU_GW_395_TBOX_REMOTE_AC_STARTUP_REQ_NAME "TBOX_RemoteACStartupReq"
#define ECU_GW_395_TBOX_REMOTE_STEER_WHEEL_HOT_REQ_NAME "TBOX_RemoteSteerWheelHotReq"
#define ECU_GW_395_TBOX_REMOTE_DRIVER_SEAT_HOT_REQ_NAME "TBOX_RemoteDriverSeatHotReq"
#define ECU_GW_395_TBOX_REMOTE_PASSANGER_SEAT_HOT_REQ_NAME "TBOX_RemotePassangerSeatHotReq"
#define ECU_GW_395_TBOX_REMOTE_DETECT_REQ_NAME "TBOX_RemoteDetectReq"
#define ECU_GW_395_TBOX_REMOTE_AIR_CLEAN_REQ_NAME "TBOX_RemoteAirCleanReq"
#define ECU_GW_395_TBOX_REMOTE_DIS_REQ_NAME "TBOX_RemoteDisReq"
#define ECU_GW_395_TBOX_REMOTE_AIR_QUALITY_INQUIRE_NAME "TBOX_RemoteAirQualityInquire"
#define ECU_GW_395_TBOX_REMOTE_DR_VENTILATIE_REQ_NAME "TBOX_RemoteDrVentilatieReq"
#define ECU_GW_395_TBOX_REMOTE_PA_VENTILATIE_REQ_NAME "TBOX_RemotePaVentilatieReq"
#define ECU_GW_395_TBOX_REMOTE_INSTALL_REQ_NAME "TBOX_RemoteInstallReq"
#define ECU_GW_395_TBOX_AP_AMODULE_ENABLE_NAME "TBOX_APAmoduleEnable"
#define ECU_GW_395_TBOX_APA_MANEUVER_CANCEL_NAME "TBOX_APAManeuverCancel"
#define ECU_GW_395_TBOX_APA_MANEUVER_START_NAME "TBOX_APAManeuverStart"
#define ECU_GW_395_TBOX_APA_MANEUVER_SUSPEND_NAME "TBOX_APAManeuverSuspend"
#define ECU_GW_395_TBOX_APAPOC_MODE_SELECT_NAME "TBOX_APAPOCModeSelect"
#define ECU_GW_395_TBOX_APA_FUCTION_SELECTION_NAME "TBOX_APAFuctionSelection"
#define ECU_GW_395_TBOX_VERTICALBACKWARD_NAME "TBOX_Verticalbackward"
#define ECU_GW_395_TBOX_VERTICALFORWARD_NAME "TBOX_Verticalforward"
#define ECU_GW_395_TBOX_APA_VIDEO_DELAY_NAME "TBOX_APA_VideoDelay"
#define ECU_GW_395_TBOX_APA_SIGNAL_DELAY_NAME "TBOX_APA_SignalDelay"
#define ECU_GW_395_TBOX_TURN_RIGHT_NAME "TBOX_TurnRight"
#define ECU_GW_395_TBOX_TURN_LEFT_NAME "TBOX_TurnLeft"
#define ECU_GW_395_TBOX_APA_REMOTE_DRIVE_REQ_NAME "TBOX_APARemoteDriveReq"
#define ECU_GW_395_TBOX_SIGNAL_TYPE_NAME "TBOX_SignalType"
#define ECU_GW_395_TBOX_SIGNAL_STRENGTH_NAME "TBOX_SignalStrength"
#define ECU_GW_395_TBOX_HZP_FUNCTION_REQ_NAME "TBOX_HZPFunctionReq"
#define ECU_GW_395_TBOX_HZP_CONTROL_ENABLE_NAME "TBOX_HZPControlEnable"
#define ECU_GW_395_TBOX_AVM_DISPLAY_FORM_NAME "TBOX_AVM_DisplayForm"
#define ECU_GW_395_T_BOX_MESSSAGE_COUNTER_395_NAME "TBox_MesssageCounter_395"
#define ECU_GW_395_T_BOX_RESET_FLAG_395_NAME "TBox_ResetFlag_395"
#define ECU_GW_395_T_BOX_AUTHENTICATOR_395_NAME "TBox_Authenticator_395"
#define ECU_GW_18_A_TCU_AP_ADRIVER_INTERRUPTION_NAME "TCU_APAdriverInterruption"
#define ECU_GW_18_A_TCU_APA_SHIFT_GEAR_REQUEST_ENABLE_NAME "TCU_APAShiftGearRequestEnable"
#define ECU_GW_24_A_ESL_SHIFT_LEVER_POSITIONREQUEST_NAME "ESL_ShiftLeverPositionrequest"
#define ECU_GW_24_A_ESL_UN_LOCK_BUTTON_POSITION_STATUS_NAME "ESL_UnLockButtonPositionStatus"
#define ECU_GW_24_A_ESL_EPB_BUTTON_POSITION_STATUS_NAME "ESL_EPBButton_PositionStatus"
#define ECU_GW_24_A_ESL_DRIVE_MODE_REQUEST_NAME "ESL_DriveModeRequest"
#define ECU_GW_24_A_ESL_DRIVER_PARK_REQUEST_NAME "ESL_DriverParkRequest"
#define ECU_GW_24_A_ESL_SHIFT_LEVER_POSITION_FAULT_STS_NAME "ESL_ShiftLeverPositionFaultSts"
#define ECU_GW_24_A_ESL_DRIVE_MODE_FAULT_STATUS_NAME "ESL_DriveModeFaultStatus"
#define ECU_GW_24_A_ESL_DRIVER_PARK_BUTTON_FAULT_STATUS_NAME "ESL_DriverParkButtonFaultStatus"
#define ECU_GW_24_A_ESL_UN_LOCK_BUTTON_FAULT_STATUS_NAME "ESL_UnLockButtonFaultStatus"
#define ECU_GW_24_A_ESL_EPB_BUTTON_FAULT_STATUS_NAME "ESL_EPBButton_FaultStatus"
#define ECU_GW_24_A_ESL_HALL_STATUS_NAME "ESL_HALLStatus"
#define ECU_GW_24_A_ESL_RESET_STS_NAME "ESL_ResetSts"
#define ECU_GW_24_A_ESL_TCUGEAR_REF_NAME "ESL_TcugearRef"
#define ECU_GW_24_A_ESL_ROLLING_COUNTER_24_A_NAME "ESL_RollingCounter_24A"
#define ECU_GW_24_A_ESL_CRC_CHECK_24_A_NAME "ESL_CRCCheck_24A"
#define ECU_GW_25_C_GW_TRIP_COUNTER_25_C_NAME "GW_TripCounter_25C"
#define ECU_GW_25_C_GW_RESET_COUNTER_25_C_NAME "GW_ResetCounter_25C"
#define ECU_GW_25_C_GW_AUTHERNTICATOR_25_C_NAME "GW_Authernticator_25C"
#define ECU_GW_2_D7_HU_3_D_HOR_ANGLE_REQ_NAME "HU_3DHorAngleReq"
#define ECU_GW_2_D7_HU_DVR_DISPLAY_VISION_NAME "HU_DVRDisplayVision"
#define ECU_GW_2_D7_HU_AV_MSWITCH_NAME "HU_AVMswitch"
#define ECU_GW_2_D7_HU_DVR_MODE_NAME "HU_DVRMode"
#define ECU_GW_2_D7_HU_AVM_TRIGGERMETHOD_NAME "HU_AVMTriggermethod"
#define ECU_GW_2_D7_HU_SCREEN_OPERATE_STATUS_NAME "HU_ScreenOperateStatus"
#define ECU_GW_2_D7_HU_DVR_DRIVING_PLAY_SWITCH_STATUS_NAME "HU_DVRDrivingPlaySwitchStatus"
#define ECU_GW_341_PCU_PWR_TQ_WH_MIN_TOTAL_NAME "PCU_PwrTqWhMinTotal"
#define ECU_GW_341_PCU_PWR_TQ_WH_MAX_TOTAL_NAME "PCU_PwrTqWhMaxTotal"
#define ECU_GW_341_PCU_PWR_TQ_WH_MIN_VLD_NAME "PCU_PwrTqWhMinVld"
#define ECU_GW_341_PCU_PWR_TQ_WH_MAX_VLD_NAME "PCU_PwrTqWhMaxVld"
#define ECU_GW_341_PCU_ACC_PED_SHIELD_NAME "PCU_AccPedShield"
#define ECU_GW_341_PCU_ROLLING_COUNTER_341_NAME "PCU_RollingCounter_341"
#define ECU_GW_341_PCU_CRC_CHECK_341_NAME "PCU_CRCCheck_341"
#define ECU_GW_3_D6_SLCM_RR_WINDOW_STATUS_NAME "SLCM_RRWindowStatus"
#define ECU_GW_3_D6_SLCM_FR_WINDOW_STATUS_NAME "SLCM_FRWindowStatus"
#define ECU_GW_3_D8_SLCM_RL_WIN_MOTOR_NAME "SLCM_RLWinMotor"
#define ECU_GW_3_D8_SLCM_DRIVER_WIN_MOTOR_NAME "SLCM_DriverWinMotor"
#define ECU_GW_3_D8_SLCM_RL_WINDOW_SWITCH_NAME "SLCM_RLWindowSwitch"
#define ECU_GW_3_D8_SLCM_DRIVER_WINDOW_SWITCH_NAME "SLCM_DriverWindowSwitch"
#define ECU_GW_3_D8_SLCM_RL_WINDOW_AP_ACTICE_NAME "SLCM_RLWindowAPActice"
#define ECU_GW_3_D8_SLCM_DRIVER_WINDOW_AP_ACTICE_NAME "SLCM_DriverWindowAPActice"
#define ECU_GW_3_D8_SLCM_RL_WINDOW_INITIALIZED_STS_NAME "SLCM_RLWindowInitializedSts"
#define ECU_GW_3_D8_SLCM_DRIVER_WINDOW_INITIALIZED_STS_NAME "SLCM_DriverWindowInitializedSts"
#define ECU_GW_3_D8_SLCM_RL_WINDOW_STATUS_NAME "SLCM_RLWindowStatus"
#define ECU_GW_3_D8_SLCM_DRIVER_WINDOW_STATUS_NAME "SLCM_DriverWindowStatus"
#define ECU_GW_3_D8_SLCM_FAIL_STATUS_NAME "SLCM_FailStatus"
#define ECU_GW_3_DE_DSM_DSM_HORIZONTAL_POSITION_STS_NAME "DSM_DSMHorizontalPositionSts"
#define ECU_GW_3_DE_DSM_DSM_FRONT_END_POSITION_STS_NAME "DSM_DSMFrontEndPositionSts"
#define ECU_GW_3_DE_DSM_DSM_VERTICAL_POSITION_STS_NAME "DSM_DSMVerticalPositionSts"
#define ECU_GW_3_DE_DSM_DSM_BACKREST_POSITION_STS_NAME "DSM_DSMBackrestPositionSts"
#define ECU_GW_3_DE_DSM_ROLLING_COUNTER_3_DE_NAME "DSM_RollingCounter_3DE"
#define ECU_GW_3_DE_DSM_CRC_CHECK_3_DE_NAME "DSM_CRCCheck_3DE"
#define ECU_GW_3_EE_GW_SAF_CERT_STS_NAME "GW_SafCertSts"
#define ECU_GW_6_B0_GW_APA_AUTHENTICATION_STATUS_NAME "GW_APA_AuthenticationStatus"
#define ECU_ACC_2_D3_ACC_AEB_STATUS_FOR_SRS_NAME "ACC_AEBStatus_for_SRS"
#define ECU_ACC_2_D3_ACC_AEB_ACTIVE_FOR_SRS_NAME "ACC_AEBActive_for_SRS"
#define ECU_ACC_2_D3_ACC_AEB_TARGET_LNG_RANGE_FOR_SRS_NAME "ACC_AEBTargetLngRange_for_SRS"
#define ECU_ACC_2_D3_ACC_AEB_TARGET_REL_SPEED_FOR_SRS_NAME "ACC_AEBTargetRelSpeed_for_SRS"
#define ECU_ACC_2_D3_ACC_AEB_TARGET_TTC_FOR_SRS_NAME "ACC_AEBTargetTTC_for_SRS"
#define ECU_ACC_2_D3_ACC_AEB_TARGET_TYPE_FOR_SRS_NAME "ACC_AEBTargetType_for_SRS"
#define ECU_ACC_2_D3_ACC_AEB_TARGET_PROB_FOR_SRS_NAME "ACC_AEBTargetProb_for_SRS"
#define ECU_ACC_2_D3_ACC_ROLLING_COUNTER_282_NAME "ACC_RollingCounter_282"
#define ECU_ACC_2_D3_ACC_CRC_CHECKR_282_NAME "ACC_CRCCheckr_282"
#define ECU_ACC_2_D3_ACC_AEB_TARGET_LAT_RANGE_FOR_SRS_NAME "ACC_AEBTargetLatRange_for_SRS"
#define ECU_ACC_2_D3_ACC_AEB_TARGET_LAT_REL_SPEED_FOR_SRS_NAME "ACC_AEBTargetLatRelSpeed_for_SRS"
#define ECU_ACC_2_D3_ACC_ROLLING_COUNTER_283_NAME "ACC_RollingCounter_283"
#define ECU_ACC_2_D3_ACC_CRC_CHECK_283_NAME "ACC_CRCCheck_283"
#define ECU_ACC_301_ACC_RESET_STS_NAME "ACC_ResetSts"
#define ECU_LAS_30_C_LAS_RESET_STS_NAME "LAS_ResetSts"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_TRACK_ID_NAME "RLR_ElkOBJ1_Track_ID"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_TYPE_NAME "RLR_ElkOBJ1_Type"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_WIDTH_NAME "RLR_ElkOBJ1_Width"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_HEIGHT_NAME "RLR_ElkOBJ1_Height"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_LENGTH_NAME "RLR_ElkOBJ1_Length"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_HEADING_ANGLE_NAME "RLR_ElkOBJ1_HeadingAngle"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_DY_NAME "RLR_ElkOBJ1_Dy"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_REF_POINT_LOC_NAME "RLR_ElkOBJ1_RefPointLoc"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_DX_NAME "RLR_ElkOBJ1_Dx"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_REL_VY_NAME "RLR_ElkOBJ1_RelVy"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_REL_VX_NAME "RLR_ElkOBJ1_RelVx"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_REL_AY_NAME "RLR_ElkOBJ1_RelAy"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_REL_AX_NAME "RLR_ElkOBJ1_RelAx"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_LOCATION_NAME "RLR_ElkOBJ1_Location"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_EXIST_PROB_NAME "RLR_ElkOBJ1_ExistProb"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_MEASURED_NAME "RLR_ElkOBJ1_Measured"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_OBSTACLE_PROB_NAME "RLR_ElkOBJ1_ObstacleProb"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_REF_POINT_DY_NAME "RLR_ElkOBJ1_RefPointDy"
#define ECU_GW_2_E2_RLR_ELK_OBJ1_REF_POINT_DX_NAME "RLR_ElkOBJ1_RefPointDx"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_OBSTACLE_PROB_NAME "RLR_ElkOBJ2_ObstacleProb"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_REF_POINT_DY_NAME "RLR_ElkOBJ2_RefPointDy"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_REF_POINT_DX_NAME "RLR_ElkOBJ2_RefPointDx"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_TRACK_ID_NAME "RLR_ElkOBJ2_Track_ID"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_TYPE_NAME "RLR_ElkOBJ2_Type"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_WIDTH_NAME "RLR_ElkOBJ2_Width"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_HEIGHT_NAME "RLR_ElkOBJ2_Height"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_LENGTH_NAME "RLR_ElkOBJ2_Length"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_HEADING_ANGLE_NAME "RLR_ElkOBJ2_HeadingAngle"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_DY_NAME "RLR_ElkOBJ2_Dy"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_REF_POINT_LOC_NAME "RLR_ElkOBJ2_RefPointLoc"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_DX_NAME "RLR_ElkOBJ2_Dx"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_REL_VY_NAME "RLR_ElkOBJ2_RelVy"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_REL_VX_NAME "RLR_ElkOBJ2_RelVx"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_REL_AY_NAME "RLR_ElkOBJ2_RelAy"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_REL_AX_NAME "RLR_ElkOBJ2_RelAx"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_LOCATION_NAME "RLR_ElkOBJ2_Location"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_EXIST_PROB_NAME "RLR_ElkOBJ2_ExistProb"
#define ECU_GW_2_E2_RLR_ELK_OBJ2_MEASURED_NAME "RLR_ElkOBJ2_Measured"
#define ECU_GW_2_E2_RLR_ROLLING_COUNTER_2_E2_NAME "RLR_RollingCounter_2E2"
#define ECU_GW_2_E2_RLR_CRC_CHECK_2_E2_NAME "RLR_CRCCheck_2E2"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_TRACK_ID_NAME "RLR_ElkOBJ3_Track_ID"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_TYPE_NAME "RLR_ElkOBJ3_Type"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_WIDTH_NAME "RLR_ElkOBJ3_Width"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_HEIGHT_NAME "RLR_ElkOBJ3_Height"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_LENGTH_NAME "RLR_ElkOBJ3_Length"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_HEADING_ANGLE_NAME "RLR_ElkOBJ3_HeadingAngle"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_DY_NAME "RLR_ElkOBJ3_Dy"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_REF_POINT_LOC_NAME "RLR_ElkOBJ3_RefPointLoc"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_DX_NAME "RLR_ElkOBJ3_Dx"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_REL_VY_NAME "RLR_ElkOBJ3_RelVy"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_REL_VX_NAME "RLR_ElkOBJ3_RelVx"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_REL_AY_NAME "RLR_ElkOBJ3_RelAy"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_REL_AX_NAME "RLR_ElkOBJ3_RelAx"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_LOCATION_NAME "RLR_ElkOBJ3_Location"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_EXIST_PROB_NAME "RLR_ElkOBJ3_ExistProb"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_MEASURED_NAME "RLR_ElkOBJ3_Measured"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_OBSTACLE_PROB_NAME "RLR_ElkOBJ3_ObstacleProb"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_REF_POINT_DY_NAME "RLR_ElkOBJ3_RefPointDy"
#define ECU_GW_2_E3_RLR_ELK_OBJ3_REF_POINT_DX_NAME "RLR_ElkOBJ3_RefPointDx"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_OBSTACLE_PROB_NAME "RLR_ElkOBJ4_ObstacleProb"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_REF_POINT_DY_NAME "RLR_ElkOBJ4_RefPointDy"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_REF_POINT_DX_NAME "RLR_ElkOBJ4_RefPointDx"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_TRACK_ID_NAME "RLR_ElkOBJ4_Track_ID"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_TYPE_NAME "RLR_ElkOBJ4_Type"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_WIDTH_NAME "RLR_ElkOBJ4_Width"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_HEIGHT_NAME "RLR_ElkOBJ4_Height"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_LENGTH_NAME "RLR_ElkOBJ4_Length"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_HEADING_ANGLE_NAME "RLR_ElkOBJ4_HeadingAngle"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_DY_NAME "RLR_ElkOBJ4_Dy"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_REF_POINT_LOC_NAME "RLR_ElkOBJ4_RefPointLoc"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_DX_NAME "RLR_ElkOBJ4_Dx"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_REL_VY_NAME "RLR_ElkOBJ4_RelVy"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_REL_VX_NAME "RLR_ElkOBJ4_RelVx"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_REL_AY_NAME "RLR_ElkOBJ4_RelAy"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_REL_AX_NAME "RLR_ElkOBJ4_RelAx"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_LOCATION_NAME "RLR_ElkOBJ4_Location"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_EXIST_PROB_NAME "RLR_ElkOBJ4_ExistProb"
#define ECU_GW_2_E3_RLR_ELK_OBJ4_MEASURED_NAME "RLR_ElkOBJ4_Measured"
#define ECU_GW_2_E3_RLR_ROLLING_COUNTER_2_E3_NAME "RLR_RollingCounter_2E3"
#define ECU_GW_2_E3_RLR_CRC_CHECK_2_E3_NAME "RLR_CRCCheck_2E3"
#define ECU_GW_2_C9_HU_XLEVEL_NAME "HU_Xlevel"
#define ECU_GW_2_C9_HU_YLEVEL_NAME "HU_Ylevel"
#define ECU_GW_2_C9_HU_INTERFACE_CHANGE_SINGNAL_NAME "HU_InterfaceChangeSingnal"
#define ECU_GW_2_C9_HU_NOVICE_RESPONSE_NAME "HU_Novice_Response"
#define ECU_GW_761_DIAGNOSE_MESSAGE761_NAME "Diagnose_message761"
#define ECU_GW_57_D_HU_APA_ON_OFF_NAME "HU_APAOnOff"
#define ECU_GW_518_BCM_CAR_MODE_NAME "BCM_CarMode"
#define ECU_GW_2_AE_LCDAL_SYSTEM_STATUS_NAME "LCDAL_SystemStatus"
#define ECU_LAS_3_D9_ACC_OBS_TARGET1_LNG_RANGE_NAME "ACC_ObsTarget1LngRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET1_LAT_RANGE_NAME "ACC_ObsTarget1LatRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET1_TYPE_NAME "ACC_ObsTarget1Type"
#define ECU_LAS_3_D9_ACC_OBS_TARGET1_ID_NAME "ACC_ObsTarget1ID"
#define ECU_LAS_3_D9_ACC_OBS_TARGET2_LNG_RANGE_NAME "ACC_ObsTarget2LngRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET2_LAT_RANGE_NAME "ACC_ObsTarget2LatRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET2_TYPE_NAME "ACC_ObsTarget2Type"
#define ECU_LAS_3_D9_ACC_OBS_TARGET2_ID_NAME "ACC_ObsTarget2ID"
#define ECU_LAS_3_D9_ACC_OBS_TARGET3_LNG_RANGE_NAME "ACC_ObsTarget3LngRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET3_LAT_RANGE_NAME "ACC_ObsTarget3LatRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET3_TYPE_NAME "ACC_ObsTarget3Type"
#define ECU_LAS_3_D9_ACC_OBS_TARGET3_ID_NAME "ACC_ObsTarget3ID"
#define ECU_LAS_3_D9_ACC_OBS_TARGET4_LNG_RANGE_NAME "ACC_ObsTarget4LngRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET4_LAT_RANGE_NAME "ACC_ObsTarget4LatRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET4_TYPE_NAME "ACC_ObsTarget4Type"
#define ECU_LAS_3_D9_ACC_OBS_TARGET4_ID_NAME "ACC_ObsTarget4ID"
#define ECU_LAS_3_D9_ACC_OBS_TARGET5_LNG_RANGE_NAME "ACC_ObsTarget5LngRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET5_LAT_RANGE_NAME "ACC_ObsTarget5LatRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET5_TYPE_NAME "ACC_ObsTarget5Type"
#define ECU_LAS_3_D9_ACC_OBS_TARGET5_ID_NAME "ACC_ObsTarget5ID"
#define ECU_LAS_3_D9_ACC_OBS_TARGET6_LNG_RANGE_NAME "ACC_ObsTarget6LngRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET6_LAT_RANGE_NAME "ACC_ObsTarget6LatRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET6_TYPE_NAME "ACC_ObsTarget6Type"
#define ECU_LAS_3_D9_ACC_OBS_TARGET6_ID_NAME "ACC_ObsTarget6ID"
#define ECU_LAS_3_D9_ACC_OBS_TARGET7_LNG_RANGE_NAME "ACC_ObsTarget7LngRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET7_LAT_RANGE_NAME "ACC_ObsTarget7LatRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET7_TYPE_NAME "ACC_ObsTarget7Type"
#define ECU_LAS_3_D9_ACC_OBS_TARGET7_ID_NAME "ACC_ObsTarget7ID"
#define ECU_LAS_3_D9_ACC_OBS_TARGET8_LNG_RANGE_NAME "ACC_ObsTarget8LngRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET8_LAT_RANGE_NAME "ACC_ObsTarget8LatRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET8_TYPE_NAME "ACC_ObsTarget8Type"
#define ECU_LAS_3_D9_ACC_OBS_TARGET8_ID_NAME "ACC_ObsTarget8ID"
#define ECU_LAS_3_D9_ACC_OBS_TARGET9_LNG_RANGE_NAME "ACC_ObsTarget9LngRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET9_LAT_RANGE_NAME "ACC_ObsTarget9LatRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET9_TYPE_NAME "ACC_ObsTarget9Type"
#define ECU_LAS_3_D9_ACC_OBS_TARGET9_ID_NAME "ACC_ObsTarget9ID"
#define ECU_LAS_3_D9_ACC_OBS_TARGET10_LNG_RANGE_NAME "ACC_ObsTarget10LngRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET10_LAT_RANGE_NAME "ACC_ObsTarget10LatRange"
#define ECU_LAS_3_D9_ACC_OBS_TARGET10_TYPE_NAME "ACC_ObsTarget10Type"
#define ECU_LAS_3_D9_ACC_OBS_TARGET10_ID_NAME "ACC_ObsTarget10ID"
#define ECU_LAS_3_DB_ACC_OBS_TARGET11_LNG_RANGE_NAME "ACC_ObsTarget11LngRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET11_LAT_RANGE_NAME "ACC_ObsTarget11LatRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET11_TYPE_NAME "ACC_ObsTarget11Type"
#define ECU_LAS_3_DB_ACC_OBS_TARGET11_ID_NAME "ACC_ObsTarget11ID"
#define ECU_LAS_3_DB_ACC_OBS_TARGET12_LNG_RANGE_NAME "ACC_ObsTarget12LngRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET12_LAT_RANGE_NAME "ACC_ObsTarget12LatRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET12_TYPE_NAME "ACC_ObsTarget12Type"
#define ECU_LAS_3_DB_ACC_OBS_TARGET12_ID_NAME "ACC_ObsTarget12ID"
#define ECU_LAS_3_DB_ACC_OBS_TARGET13_LNG_RANGE_NAME "ACC_ObsTarget13LngRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET13_LAT_RANGE_NAME "ACC_ObsTarget13LatRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET13_TYPE_NAME "ACC_ObsTarget13Type"
#define ECU_LAS_3_DB_ACC_OBS_TARGET13_ID_NAME "ACC_ObsTarget13ID"
#define ECU_LAS_3_DB_ACC_OBS_TARGET14_LNG_RANGE_NAME "ACC_ObsTarget14LngRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET14_LAT_RANGE_NAME "ACC_ObsTarget14LatRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET14_TYPE_NAME "ACC_ObsTarget14Type"
#define ECU_LAS_3_DB_ACC_OBS_TARGET14_ID_NAME "ACC_ObsTarget14ID"
#define ECU_LAS_3_DB_ACC_OBS_TARGET15_LNG_RANGE_NAME "ACC_ObsTarget15LngRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET15_LAT_RANGE_NAME "ACC_ObsTarget15LatRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET15_TYPE_NAME "ACC_ObsTarget15Type"
#define ECU_LAS_3_DB_ACC_OBS_TARGET15_ID_NAME "ACC_ObsTarget15ID"
#define ECU_LAS_3_DB_ACC_OBS_TARGET16_LNG_RANGE_NAME "ACC_ObsTarget16LngRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET16_LAT_RANGE_NAME "ACC_ObsTarget16LatRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET16_TYPE_NAME "ACC_ObsTarget16Type"
#define ECU_LAS_3_DB_ACC_OBS_TARGET16_ID_NAME "ACC_ObsTarget16ID"
#define ECU_LAS_3_DB_ACC_OBS_TARGET17_LNG_RANGE_NAME "ACC_ObsTarget17LngRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET17_LAT_RANGE_NAME "ACC_ObsTarget17LatRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET17_TYPE_NAME "ACC_ObsTarget17Type"
#define ECU_LAS_3_DB_ACC_OBS_TARGET17_ID_NAME "ACC_ObsTarget17ID"
#define ECU_LAS_3_DB_ACC_OBS_TARGET18_LNG_RANGE_NAME "ACC_ObsTarget18LngRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET18_LAT_RANGE_NAME "ACC_ObsTarget18LatRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET18_TYPE_NAME "ACC_ObsTarget18Type"
#define ECU_LAS_3_DB_ACC_OBS_TARGET18_ID_NAME "ACC_ObsTarget18ID"
#define ECU_LAS_3_DB_ACC_OBS_TARGET19_LNG_RANGE_NAME "ACC_ObsTarget19LngRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET19_LAT_RANGE_NAME "ACC_ObsTarget19LatRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET19_TYPE_NAME "ACC_ObsTarget19Type"
#define ECU_LAS_3_DB_ACC_OBS_TARGET19_ID_NAME "ACC_ObsTarget19ID"
#define ECU_LAS_3_DB_ACC_OBS_TARGET20_LNG_RANGE_NAME "ACC_ObsTarget20LngRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET20_LAT_RANGE_NAME "ACC_ObsTarget20LatRange"
#define ECU_LAS_3_DB_ACC_OBS_TARGET20_TYPE_NAME "ACC_ObsTarget20Type"
#define ECU_LAS_3_DB_ACC_OBS_TARGET20_ID_NAME "ACC_ObsTarget20ID"
#define ECU_GW_371_PCU_DRV_MOD2_NAME "PCU_DrvMod2"
#define ECU_GW_371_PCU_SPECIAL_MODE_SET_FB_NAME "PCU_SpecialModeSetFB"
#define ECU_GW_31_C_PCU_POWER_OUTPUT_STS_NAME "PCU_PowerOutputSts"
#define ECU_GW_31_C_PCU_VCU_RDY_STS_NAME "PCU_VcuRdySts"
#define ECU_GW_10_A_EPB_FAIL_STATUS_NAME "EPB_FailStatus"
#define ECU_GW_10_A_EPB_STATUS_NAME "EPB_Status"
#define ECU_GW_10_A_EPB_ACHIEVED_CLAMP_FORCE_NAME "EPB_AchievedClampForce"
#define ECU_GW_10_A_EPB_SWITCH_POSITION_NAME "EPB_SwitchPosition"
#define ECU_GW_10_A_EPB_SWITCH_POSITION_VALID_NAME "EPB_SwitchPositionValid"
#define ECU_GW_10_A_ESP_RWU_PARKING_ACTIVE_FOR_ACC_NAME "ESP_RWU_ParkingActiveForACC"
#define ECU_GW_10_A_ESP_RWU_PARKING_AVAIL_FOR_ACC_NAME "ESP_RWU_ParkingAvailForACC"
#define ECU_GW_10_A_EPB_AP_AREQUEST_AVAILABLE_NAME "EPB_APArequest_Available"
#define ECU_GW_10_A_EPB_ROLLING_COUNTER_10_A_NAME "EPB_RollingCounter_10A"
#define ECU_GW_10_A_EPB_CRC_CHECK_10_A_NAME "EPB_CRCCheck_10A"
#define ECU_BDC_400_NM_MESSAGE400_NAME "NM_message400"
#define ECU_ACC_453_NM_MESSAGE453_NAME "NM_message453"
#define ECU_GW_7_DF_DIAGNOSE_MESSAGE7_DF_NAME "Diagnose_message7DF"
#define ECU_GW_15_D_ESP_IMU_CALIBRATED_NAME "ESP_IMUCalibrated"
#define ECU_GW_15_D_ESP_ROLLING_COUNTER_278_NAME "ESP_RollingCounter_278"
#define ECU_GW_15_D_ESP_CRC_CHECK_278_NAME "ESP_CRCCheck_278"
#define ECU_GW_10_F_IBCU_S_OUTPUT_ROD_DRIVER_NAME "IBCU_sOutputRodDriver"
#define ECU_GW_10_F_IBCU_S_OUTPUT_ROD_DRIVER_Q_NAME "IBCU_sOutputRodDriver_Q"
#define ECU_GW_10_F_IBCU_S_OUTPUT_ROD_ACT_Q_NAME "IBCU_sOutputRodAct_Q"
#define ECU_GW_10_F_IBCU_S_OUTPUT_ROD_ACT_NAME "IBCU_sOutputRodAct"
#define ECU_GW_32_A_TRM_CONNECT_STS_NAME "TRM_ConnectSts"
#define ECU_GW_3_BE_ATS_CURRENT_DRIVING_MODE_NAME "ATS_CurrentDrivingMode"
#define ECU_GW_37_A_VMC_ECAS_MODE_NAME "VMC_EcasMode"
#define ECU_GW_37_A_VMC_ECDC_MODE_NAME "VMC_EcdcMode"
#define ECU_GW_37_A_VMC_ECAS_MODE_VAL_NAME "VMC_EcasModeVal"
#define ECU_GW_37_A_VMC_ECAS_MODE_CHA_STS_NAME "VMC_EcasModeCHASts"
#define ECU_GW_37_A_VMC_CTRL_LEVEL_FR_VALID_NAME "VMC_CtrlLevelFRValid"
#define ECU_GW_37_A_VMC_CTRL_LEVEL_FL_VALID_NAME "VMC_CtrlLevelFLValid"
#define ECU_GW_37_A_VMC_ECAS_MODE_FRT_STS_NAME "VMC_EcasModeFRTSts"
#define ECU_GW_37_A_VMC_ECAS_MODE_REL_STS_NAME "VMC_EcasModeRELSts"
#define ECU_GW_37_A_VMC_CTRL_LEVEL_RR_VALID_NAME "VMC_CtrlLevelRRValid"
#define ECU_GW_37_A_VMC_CTRL_LEVEL_R_LY_VALID_NAME "VMC_CtrlLevelRLyValid"
#define ECU_GW_37_A_VMC_CTRL_LEVEL_FL_NAME "VMC_CtrlLevelFL"
#define ECU_GW_37_A_VMC_CTRL_LEVEL_FR_NAME "VMC_CtrlLevelFR"
#define ECU_GW_37_A_VMC_LVL_TAR_RL_NAME "VMC_LvlTarRL"
#define ECU_GW_37_A_VMC_LVL_TAR_RR_NAME "VMC_LvlTarRR"
#define ECU_GW_37_A_VMC_CTRL_LEVEL_RL_NAME "VMC_CtrlLevelRL"
#define ECU_GW_37_A_VMC_CTRL_LEVEL_RR_NAME "VMC_CtrlLevelRR"
#define ECU_GW_37_A_VMC_LVL_TAR_FL_NAME "VMC_LvlTarFL"
#define ECU_GW_37_A_VMC_LVL_TAR_FR_NAME "VMC_LvlTarFR"
#define ECU_GW_37_A_VMC_ROLLING_COUNTER_37_A_NAME "VMC_RollingCounter_37A"
#define ECU_GW_37_A_VMC_CRC_CHECK_37_A_NAME "VMC_CRCCheck_37A"

/**
 * Signals in message ACC_382.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_acc_382_t {
    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_35_d;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_check_35_d;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_35_c;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_check_35_c;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..63 (0..0.98438 -)
     * Scale: 0.015625
     * Offset: 0
     */
    uint8_t acc_lane_quality;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..4094 (-1..0.99902 rad)
     * Scale: 0.0004882813
     * Offset: -1
     */
    uint16_t acc_lane_equation_c1;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..4094 (-0.03123..0.03123 -)
     * Scale: 1.52588e-05
     * Offset: -0.0312347412
     */
    uint16_t acc_lane_equation_c2;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..4094 (-0.00098..0.00098 -)
     * Scale: 4.768e-07
     * Offset: -0.0009760857
     */
    uint16_t acc_lane_equation_c3;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_lane_equation_status;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_3_e6;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_check_3_e6;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target1_detection;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target1_id;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target1_type;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target1_direction;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..4000 (-100..300 m)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t acc_target1_lng_range;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_target1_lat_range;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..628 (-3.14..3.14 rad)
     * Scale: 0.01
     * Offset: -3.14
     */
    uint16_t acc_target1_heading_angle;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target1_zone_id;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target2_detection;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target2_id;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target2_type;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..4000 (-100..300 m)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t acc_target2_lng_range;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_target2_lat_range;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target2_direction;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..628 (-3.14..3.14 rad)
     * Scale: 0.01
     * Offset: -3.14
     */
    uint16_t acc_target2_heading_angle;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target2_zone_id;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target3_detection;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target3_id;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target3_type;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..4000 (-100..300 m)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t acc_target3_lng_range;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_target3_lat_range;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target3_direction;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..628 (-3.14..3.14 rad)
     * Scale: 0.01
     * Offset: -3.14
     */
    uint16_t acc_target3_heading_angle;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target3_zone_id;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target4_detection;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target4_id;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target4_type;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..4000 (-100..300 m)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t acc_target4_lng_range;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_target4_lat_range;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target4_direction;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..628 (-3.14..3.14 rad)
     * Scale: 0.01
     * Offset: -3.14
     */
    uint16_t acc_target4_heading_angle;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target4_zone_id;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target5_detection;

    /**
     * 
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target5_id;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target5_type;

    /**
     * 
     *
     * Range: 0..4000 (-100..300 m)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t acc_target5_lng_range;

    /**
     * 
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_target5_lat_range;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target5_direction;

    /**
     * 
     *
     * Range: 0..628 (-3.14..3.14 rad)
     * Scale: 0.01
     * Offset: -3.14
     */
    uint16_t acc_target5_heading_angle;

    /**
     * 
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target5_zone_id;

    /**
     * Range: 0..3000 (0..300 m)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t acc_tar_veh_lng_range;
};

/**
 * Signals in message GW_2A4.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_2_a4_t {
    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lcdar_bsd_lca_sound_war;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lcdar_left_rcta_alert;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lcdar_system_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lcdar_rcta_alert;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lcdar_rctb_active;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lcdar_rctb_enable;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lcdar_rctb_status;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lcdar_left_elk_o_alert;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lcdar_elk_o_status;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lcdar_elk_o_alert;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..64000 (-16..16 m/s2)
     * Scale: 0.0005
     * Offset: -16
     */
    uint16_t lcdar_rctb_target_decel;

    /**
     * rolling counter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lcdar_rolling_counter_2_af;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lcdar_crc_check_2_af;
};

/**
 * Signals in message GW_765.
 *
 * CANFDÕï¶ÏÒÇÊ¹ÓÃ 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_765_t {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t diagnose_message765;
};

/**
 * Signals in message ACC_76D.
 *
 * CANFDÕï¶ÏÒÇÊ¹ÓÃ 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_acc_76_d_t {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t diagnose_message76_d;
};

/**
 * Signals in message GW_791.
 *
 * CANÕï¶ÏÒÇÊ¹ÓÃ 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_791_t {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t diagnose_message791;
};

/**
 * Signals in message ACC_799.
 *
 * CANÕï¶ÏÒÇÊ¹ÓÃ 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_acc_799_t {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t diagnose_message799;
};

/**
 * Signals in message GW_752.
 *
 * CANFDÕï¶ÏÒÇÊ¹ÓÃ 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_752_t {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t diagnose_message752;
};

/**
 * Signals in message LAS_75A.
 *
 * CANFDÕï¶ÏÒÇÊ¹ÓÃ 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_las_75_a_t {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t diagnose_message75_a;
};

/**
 * Signals in message GW_763.
 *
 * CANÕï¶ÏÒÇÊ¹ÓÃ 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_763_t {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t diagnose_message763;
};

/**
 * Signals in message LAS_76B.
 *
 * CANÕï¶ÏÒÇÊ¹ÓÃ 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_las_76_b_t {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t diagnose_message76_b;
};

/**
 * Signals in message LAS_592.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_las_592_t {
    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_wake_up_byte4_bit1;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_wake_up_byte4_bit0;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_not_sleep_byte7_bit1;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_not_sleep_byte7_bit0;
};

/**
 * Signals in message ACC_594.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_acc_594_t {
    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_wake_up_byte4_bit1;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_wake_up_byte4_bit0;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_not_sleep_byte7_bit1;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fr_not_sleep_byte7_bit0;
};

/**
 * Signals in message GW_50.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_50_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t srs_crash_output_status;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t srs_crash_output_status_check_sum;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t srs_driver_buckle_switch_status;

    /**
     * For PDM is configured projects=
     * (if PDM is configured, logical detection with PDM is required)
     * 0x0= [Buckled] or [Unbuckled and passenger not occupied]
     * 0x1= [Unbuckle and passenger occupied]
     * 0x2= Not Used
     * 0x3= Not Used
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t srs_passenger_buckle_switch_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t srs_left_rear_buckle_switch_sts;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t srs_warning_lamp_status;

    /**
     * SRS_PADIndication =0=offÊ±¸±¼ÝÊ»ÆøÄÒ´ò¿ªÖ¸Ê¾µÆµãÁÁ£¬   SRS_PADIndication =1=onÊ±¸±¼ÝÊ»ÆøÄÒ¹Ø±ÕÖ¸Ê¾µÆµãÁÁ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t srs_pad_indication;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t srs_middle_rear_buckle_switch_sts;

    /**
     * ¸±¼Ý×ùÒÎÖØÁ¿¼ì²â´«¸ÐÆ÷Óë¸±¼Ý°²È«´ø¿Û´®ÁªµÄ³µÐÍ²»·¢¸ÃÐÅºÅ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t srs_front_psg_occupancy;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t srs_right_rear_buckle_switch_sts;

    /**
     * ACM½ÓÊÕÎªAT×¨ÓÃ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t srs_rolling_counter_id050;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t srs_crc_check_50;
};

/**
 * Signals in message GW_170.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_170_t {
    /**
     * 
     *
     * Range: 0..4094 (-20.48..20.46 Nm)
     * Scale: 0.01
     * Offset: -20.48
     */
    uint16_t eps_actual_motor_torq;

    /**
     * Æ½Ì¨Îª10ms£¬CD569ÌØÀýÎª8ms
     *
     * Range: 0..2046 (-20.48..20.44 Nm)
     * Scale: 0.02
     * Offset: -20.48
     */
    uint16_t eps_max_safety_torsion_bar_torq;

    /**
     * Æ½Ì¨Îª10ms£¬CD569ÌØÀýÎª8ms
     *
     * Range: 0..2046 (-20.48..20.44 Nm)
     * Scale: 0.02
     * Offset: -20.48
     */
    uint16_t eps_min_safety_torsion_bar_torq;

    /**
     * Æ½Ì¨Îª10ms£¬CD569ÌØÀýÎª8ms
     *
     * Range: 0..2046 (-20.48..20.44 Nm)
     * Scale: 0.02
     * Offset: -20.48
     */
    uint16_t eps_actual_torsion_bar_torq;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_fault_state;

    /**
     * Æ½Ì¨Îª10ms£¬CD569ÌØÀýÎª8ms
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_rolling_counter_170;

    /**
     * Æ½Ì¨Îª10ms£¬CD569ÌØÀýÎª8ms
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_crc_check_170;
};

/**
 * Signals in message GW_180.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_180_t {
    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: -7800..7800 (-780..780 degree)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t sas_steering_angle;

    /**
     * Range: 0..254 (0..1016 deg/s)
     * Scale: 4
     * Offset: 0
     */
    uint8_t sas_steering_angle_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sas_steering_angle_valid;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sas_sas_failure;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sas_calibrated;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sas_rolling_counter;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sas_crc_check;
};

/**
 * Signals in message ACC_244.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_acc_244_t {
    /**
     * 1¡¢ACC target acceleration for transmission.
     * 2¡¢ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..255 (-5..7.75 m/s2)
     * Scale: 0.05
     * Offset: -5
     */
    uint8_t acc_acc_target_acceleration;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_lka_status;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ£¬ÆäÓàÓÉAPA»òAVM·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_ldw_vibration_warning_req;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ£¬ÆäÓàÓÉAPA»òAVM·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_ldw_status;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_emergency_data_rrd_req;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_ldw_shake_lev_status;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_dec_to_stop;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_text_info_for_driver;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_cdd_active;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_driveoff_request;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_acc_mode;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_24_e;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_check_24_e;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..64000 (-16..16 m/s2)
     * Scale: 0.0005
     * Offset: -16
     */
    uint16_t acc_aeb_target_deceleration;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_active;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_ab_alevel;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aba_active;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aw_blevel;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_awb_active;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_prefill_active;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_fcw_active;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_fcw_latent_warning;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_fcw_pre_warning;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_vehilce_hold_req;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..2000 (-5000..5000 NM)
     * Scale: 5
     * Offset: -5000
     */
    uint16_t acc_acc_trq_req;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_acc_trq_req_active;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_ctrl_type;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_25_e;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_check_25_e;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_lng_take_over_req;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_lat_takeover_req;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_hands_on_req;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ads_eomto_req;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ads_rolling_counter_244;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ads_crc_check_244;
};

/**
 * Signals in message GW_278.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_278_t {
    /**
     * Range: 0..254 (-12.7..12.7 m/s2)
     * Scale: 0.1
     * Offset: -12.7
     */
    uint8_t esp_lat_accel;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..1021 (-16..15.90625 m/s2)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t esp_long_accel;

    /**
     * Range: 0..16382 (-81.91..81.91 degree/s)
     * Scale: 0.01
     * Offset: -81.91
     */
    uint16_t esp_yaw_rate;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_yaw_rate_valid;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_rolling_counter_278;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_crc_check_278;
};

/**
 * Signals in message GW_298.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_298_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_trunk_request_signal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_key_learning_signal;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_easy_open_orginal_signal;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_remote_failed_alarm_signal;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_search_car_signal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_luggage_unlock_signal;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_key_number;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_key_authentication_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_easy_open;

    /**
     * C207¶ÀÓÐ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_welcomelamp;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_smart_trunk_ulock_remind;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_unlock_signal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_lock_signal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_lock_key_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_trunk_unlock_req;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_smart_welcome_light_staus;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_trunk_key_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_un_lock_key_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_driver_door_lock_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_passenger_door_lock_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_rear_door_status;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rolling_counter_298;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_crc_check_298;
};

/**
 * Signals in message ACC_307.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_acc_307_t {
    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..254 (0..254 Km/h)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_set_speed;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obj_valid;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_accep_brequest;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_distance_level;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_time_gap_set;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_fcw_setting_status;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_enable;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_iacc_suspend_reason;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_35_e;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_check_35_e;

    /**
     * Å·ÉÐ×¨ÓÃ
     *
     * Range: 0..500 (-70..180 m)
     * Scale: 0.5
     * Offset: -70
     */
    uint16_t acc_acc_target_lng_range;

    /**
     * Í¬C236
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_feature_config;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_f_radar_calibration_status;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..500 (-250..250 km/h)
     * Scale: 1
     * Offset: -250
     */
    uint16_t acc_acc_target_rel_spd;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_322;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_check_322;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_344;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_check_344;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_csl_set_req;

    /**
     * Í¬C236
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_target_selected;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_csla_enable_status;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_35_f;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_check_35_f;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target6_detection;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target6_id;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target6_type;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target6_direction;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..4000 (-100..300 m)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t acc_target6_lng_range;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_target6_lat_range;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..628 (-3.14..3.14 rad)
     * Scale: 0.01
     * Offset: -3.14
     */
    uint16_t acc_target6_heading_angle;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target6_zone_id;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target7_detection;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target7_id;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target7_type;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target7_direction;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..4000 (-100..300 m)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t acc_target7_lng_range;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_target7_lat_range;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..628 (-3.14..3.14 rad)
     * Scale: 0.01
     * Offset: -3.14
     */
    uint16_t acc_target7_heading_angle;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target7_zone_id;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..240 (0..12 m)
     * Scale: 0.05
     * Offset: 0
     */
    uint8_t acc_ll_lane_dis;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..240 (-12..0 m)
     * Scale: 0.05
     * Offset: -12
     */
    uint8_t acc_rr_lane_dis;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..120 (-1..5 m)
     * Scale: 0.05
     * Offset: -1
     */
    uint8_t acc_l_lane_distance_fus;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..120 (-5..1 m)
     * Scale: 0.05
     * Offset: -5
     */
    uint8_t acc_r_lane_distance_fus;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_vehicle_start_remind_sts;
};

/**
 * Signals in message ACC_312.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_acc_312_t {
    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_selflearning_status;

    /**
     * ½è¼øC385
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_target_prob;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_target_direction;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_target_detection;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_target_type;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_3_e4;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_check_3_e4;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ads_eom_warnning;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..511 (0..511 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ads_ads_voice_request;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ads_nda_audio_war_enable_status;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_driver_window_control;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..2047 (-10.25..10.22 degree)
     * Scale: 0.01
     * Offset: -10.25
     */
    uint16_t acc_selflearning_angle;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ads_rolling_counter_3_d7;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ads_crc_check_3_d7;

    /**
     * Range: 0..320 (-16..16 m/s2)
     * Scale: 0.1
     * Offset: -16
     */
    uint16_t acc_aeb_target_ax;

    /**
     * ÐÂÔö£¬È¡Öµ·¶Î§Í¬ ACC_AEBTargetProb
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_target_four_wheel_prob;
};

/**
 * Signals in message GW_340.
 *
 * Ô´¶ËB_TMS_340»ò
HybridA_TMS_398,6 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_340_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_fr_blow_type;

    /**
     * ¹ú6Ôö¼Ó
     * Ë«Å¯Í¨£¨S401¼°¸Ä¿î£©¹úÁùÏîÄ¿£¨ÐÂÔö£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_pr_air_merge_port_opening_ratio_vd;

    /**
     * Range: 0..15 (0..15 µµ)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_rr_req_wind_level;

    /**
     * ¹ú6Ôö¼Ó
     * Ë«Å¯Í¨£¨S401¼°¸Ä¿î£©¹úÁùÏîÄ¿£¨ÐÂÔö£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_rr_air_merge_port_opening_ratio_vd;

    /**
     * ¹ú6Ôö¼Ó
     * Ë«Å¯Í¨£¨S401¼°¸Ä¿î£©¹úÁùÏîÄ¿£¨ÐÂÔö£©
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_rr_air_merge_port_opening_ratio;

    /**
     * ¹ú6Ôö¼Ó
     * Ë«Å¯Í¨£¨S401¼°¸Ä¿î£©¹úÁùÏîÄ¿£¨ÐÂÔö£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_rr_req_wind_level_vd;

    /**
     * ¹ú6Ôö¼Ó
     * Ë«Å¯Í¨£¨S401¼°¸Ä¿î£©¹úÁùÏîÄ¿£¨ÐÂÔö£©
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_dr_air_merge_port_opening_ratio;

    /**
     * ¹ú6Ôö¼Ó
     * Ë«Å¯Í¨£¨S401¼°¸Ä¿î£©¹úÁùÏîÄ¿£¨ÐÂÔö£©
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_pr_air_merge_port_opening_ratio;

    /**
     * ¹ú6Ôö¼Ó
     * Ë«Å¯Í¨£¨S401¼°¸Ä¿î£©¹úÁùÏîÄ¿£¨ÐÂÔö£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_dr_air_merge_port_opening_ratio_vd;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_ac_on_off;

    /**
     * Range: 0..255 (-40..87.5 degreeC)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t ac_evaporator_temp;
};

/**
 * Signals in message GW_347.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_347_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_signal_status;

    /**
     * ÎÞÐ§ÖµÊÇÎª×ªDBC
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_tire_presure_signal_status;

    /**
     * 1¡¢ÎÞÐ§ÖµÊÇÎª×ªDBC
     * 2¡¢ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_rf_pressure_warning;

    /**
     * 1¡¢ÎÞÐ§ÖµÊÇÎª×ªDBC
     * 2¡¢ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_lr_pressure_warning;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..255 (0..350.115 KPa)
     * Scale: 1.373
     * Offset: 0
     */
    uint8_t tpms_lf_tyre_pressure;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..255 (0..350.115 KPa)
     * Scale: 1.373
     * Offset: 0
     */
    uint8_t tpms_rf_tyre_pressure;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..255 (0..350.115 KPa)
     * Scale: 1.373
     * Offset: 0
     */
    uint8_t tpms_rr_tyre_pressure;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..255 (0..350.115 KPa)
     * Scale: 1.373
     * Offset: 0
     */
    uint8_t tpms_lr_tyre_pressure;

    /**
     * 1¡¢ÎÞÐ§ÖµÊÇÎª×ªDBC
     * 2¡¢ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_rr_pressure_warning;

    /**
     * 1¡¢ÎÞÐ§ÖµÊÇÎª×ªDBC
     * 2¡¢ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_lf_pressure_warning;

    /**
     * ÎÞÐ§ÖµÊÇÎª×ªDBC
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_system_failure_warning;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rolling_counter_347;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_crc_check_347;
};

/**
 * Signals in message GW_365.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_365_t {
    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_distraction_status;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_driver_head_detect;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_drowsiness_status;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_ims_status;

    /**
     * 10ÒÔÏÂÈÏÎª±ÕÑÛ
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_eye_detect_satus;

    /**
     * 
     *
     * Range: 0..150 (-75..75 ¶È)
     * Scale: 1
     * Offset: -75
     */
    uint8_t ims_eye_gaze_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_driver_eye_detect;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_driver_eye_closestatus;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_phone_call_sts;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_driver_eyes_fov_area;

    /**
     * Range: 0..255 (0..255 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_driver_eye_confidence;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_rolling_counter_356;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_crc_check_356;

    /**
     * 
     *
     * Range: 0..70 (-25..45 ¶È)
     * Scale: 1
     * Offset: -25
     */
    uint8_t ims_head_detect_sts_pitch;

    /**
     * 
     *
     * Range: 0..90 (-45..45 ¶È)
     * Scale: 1
     * Offset: -45
     */
    uint8_t ims_head_detect_sts_roll;

    /**
     * 
     *
     * Range: 0..150 (-75..75 ¶È)
     * Scale: 1
     * Offset: -75
     */
    uint8_t ims_head_detect_sts_yaw;

    /**
     * 
     *
     * Range: 0..15 (0..15 cm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_brow_offset_value;

    /**
     * 
     *
     * Range: 0..15 (0..15 cm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_jaw_offset_value;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_rolling_counter_360;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_crc_check_360;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_driver_id;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_id_update_remind;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_drowsiness_warning;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_drowsiness_sens_fb;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_drowsiness_set_fb;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_distraction_set_fb;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_distraction_warning;

    /**
     * 
     *
     * Range: 0..2047 (-2046..2048 mm)
     * Scale: 2
     * Offset: -2046
     */
    uint16_t dms_xlocation_eye;

    /**
     * 
     *
     * Range: 0..2047 (-2046..2048 mm)
     * Scale: 2
     * Offset: -2046
     */
    uint16_t dms_ylocation_eye;

    /**
     * 
     *
     * Range: 0..2047 (-2046..2048 mm)
     * Scale: 2
     * Offset: -2046
     */
    uint16_t dms_zlocation_eye;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_rolling_counter_3_a7;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ims_crc_check_3_a7;
};

/**
 * Signals in message GW_366.
 *
 * Ô´¶ËB_TMS_366»ò
HybridA_TMS_398,3 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_366_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_work_sts;

    /**
     * ¹ú6Ôö¼Ó
     * Ë«Å¯Í¨£¨S401¼°¸Ä¿î£©¹úÁùÏîÄ¿£¨ÐÂÔö£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_fr_req_wind_level_vd;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_ptc_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_environmental_temp_vd;

    /**
     * Range: 0..254 (-40..87 degreeC)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t ac_environmental_temp;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_fr_req_wind_level;

    /**
     * Range: 0..4095 (0..40.95 Mpa)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t ac_ac_pre;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_ac_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_ac_req_valid;
};

/**
 * Signals in message GW_387.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_387_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_drive_mode_feedback;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_drive_mode_status;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_ble_key_indicator;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_driving_mode_memory_status;

    /**
     * ½öÓÃÓÚS302
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_drive_mode_set;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_welcome_light_mode_fb;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rainfall_level;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_eps_torque_mode_feedback;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_theme_change_set;

    /**
     * Î´Æ½Ì¨»¯£¬½öS401·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_front_wash_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_front_wiper_status;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rls_light_switch_reason;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_buzzer_warning_mode;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_light_sensor;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_statusrainsensor;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_statuslowbeam;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_system_failure_flag;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rear_wiper_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_save_energy_set_status;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rolling_counter_387;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_crc_check_387;
};

/**
 * Signals in message GW_390.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_390_t {
    /**
     * ÎÞÐ§ÖµÊÇÎª×ªDBC
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_pms_level;

    /**
     * ÎÞÐ§ÖµÊÇÎª×ªDBC
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_low_power_warning;

    /**
     * Range: 0..255 (0..255 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_soh_life_percent;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_bsn_level;
};

/**
 * Signals in message GW_396.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_396_t {
    /**
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_sunroof_pos_vit;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_sunroof_status;

    /**
     * Range: 0..127 (0..127 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_sunshade_pos_vit_fl;

    /**
     * Relative position of window in percent.
     * When the signal ¡°Sunroof_POS_Direction¡±=0=
     * 0%±íÊ¾Ìì´°ÍêÈ«¹Ø±Õ¡£
     * 100%±íÊ¾Ìì´°È«¿ª¡£
     * ÐÅºÅ¾«¶È5%
     * When the signal ¡°Sunroof_POS_Direction¡±=1=
     * 0%±íÊ¾Ìì´°ÍêÈ«¹Ø±Õ¡£
     * 100%±íÊ¾ÍêÈ«ÆðÇÌ¡£
     * ÐÅºÅ¾«¶È10%
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_sunroof_pos_direction;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_sunroof_rain_set_status;

    /**
     * Range: 0..7 (0..7 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_sunshade_movement;

    /**
     * Range: 0..7 (0..7 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_sunroof_movement;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_lock_auto_cls_win_set_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_sunroof_motor;

    /**
     * ´ËÐÅºÅÓÃÓÚÎÆ²¨·À¼Ð£¬·Ç»ô¶û·À¼Ð
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_remote_window_control;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_win_open_warn;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_win_down_cfg_sts;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_win_up_cfg_sts;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_remote_window_up_set_staus;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_remote_window_down_set_staus;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_auto_close_window;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_aeration_hint_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_sunroof_ap_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_remote_window_up_signal;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_remote_window_down_signal;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_sunroof_intialized;
};

/**
 * Signals in message GW_507.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_507_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_parking_mode_select;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_las_mode_selection;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_fcta_enable;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_rcta_enable;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_rcw_enable;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_tsr_switch;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_las_warning_mode_selection;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_ldw_shake_lev;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_fatigue_dection_enable;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_rctb_enable;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_sea_enable;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_overspeed_sound_war_enable;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_iacc_enable;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_lock_ctrl_enable;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_audio_warning_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_hzp_recomend_res;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_overspeed_warning_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_hzp_on_off;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_parking_resume;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_uls_fkp_activation;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_fctb_enable;

    /**
     * Ô¤Áô
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_uls_bsd_activation;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_parking_confirm;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..15 (0..15 m)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_remote_distance_set;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_tjp_enable;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_slot_voice_select;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..7 (0..7 cm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_obstacle_safe_distance_set;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_replay_command;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_recordingcycle_setting;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_format_req;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_top_look_down_switch;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_vedio_seek;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_hma_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_avm_calibration_confirm;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_print_screen;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_replay_speed;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_enable_set;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_tape_set;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_language_set;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_turn_light_avm_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_radar_avm_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_replay_mode;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_resolution_set;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_distort_correct_switch;

    /**
     * Range: 0..511 (0..511 second)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_dvr_video_play_user_time;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_avm_calibration_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_mod_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_emergency_record;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_ramp_avm_switch;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_browse_command;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_shoot_control;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_transparent_car_switch;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_cruise_control_set;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_auto_brake_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_park_voice_int_set_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_acc_obj_enable;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_vc_cruise_set_distance;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_vc_cruise_control;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_vc_cruise_set_speed;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_tutorialmodel;

    /**
     * 0x1= ActivateÓÃÓÚÈí°´¼üºÍÓïÒô¼¤»î£»
     * 0x2= DeactivateÓÃÓÚÈí°´¼üºÍÓïÒô¹Ø±Õ£»·¢ËÍ0x1/0x2µÄÂß¼­ÓÉHUÅÐ¶Ï£¬³õÊ¼»¯ºÍ¹ÊÕÏÊ±·¢0x0=Invalid
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_front_radar_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_apa_active3;

    /**
     * ½öÓÃÓÚAPA2.0¹¦ÄÜ
     * 0x1= ActivateÓÃÓÚÈí°´¼üºÍÓïÒô¼¤»î£»
     * 0x2= DeactivateÓÃÓÚÈí°´¼üºÍÓïÒô¹Ø±Õ£»·¢ËÍ0x1/0x2µÄÂß¼­ÓÉHUÅÐ¶Ï£¬³õÊ¼»¯ºÍ¹ÊÕÏÊ±·¢0x0=Invalid
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_apa_active2;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_nda_enable;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_fcw_setting;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_bsdlca_setting;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_full_speed_panoramic_select;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_door_open_warning_select;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_nda_audio_war_enable;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_nda_nav_enable;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_nda_set_spd_mode;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..57 (-10..47 -)
     * Scale: 1
     * Offset: -10
     */
    uint8_t hu_overspeed_warning_offset;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_lane_change_style;
};

/**
 * Signals in message GW_516.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_516_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_current_location_valid;

    /**
     * Range: 88435455..448435455 (-180..180 degree)
     * Scale: 1e-06
     * Offset: -268.435455
     */
    uint32_t hu_current_location_longitude;

    /**
     * Range: 44217727..224217727 (-90..90 degree)
     * Scale: 1e-06
     * Offset: -134.217727
     */
    uint32_t hu_current_location_latitude;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_local_time_valid;

    /**
     * Ô¤ÁôÐÅºÅ£¬ÓÉ¶¯Á¦ÔºÊäÈëÏîÄ¿ÊÇ·ñ´îÔØ
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_air_humidity;

    /**
     * Range: 1..12 (1..12 month)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_local_time_month;

    /**
     * Ô¤ÁôÐÅºÅ£¬ÓÉ¶¯Á¦ÔºÊäÈëÏîÄ¿ÊÇ·ñ´îÔØ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_air_humidity_valid;

    /**
     * Range: 1..31 (1..31 day)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_local_time_date;

    /**
     * Range: 0..23 (0..23 hour)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_local_time_hour;

    /**
     * Range: 0..59 (0..59 minute)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_local_time_minute;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_local_time_system;

    /**
     * Range: 0..59 (0..59 second)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_local_time_second;

    /**
     * Range: 0..255 (2013..2268 year)
     * Scale: 1
     * Offset: 2013
     */
    uint8_t hu_local_time_year;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_maintain_remind_req;

    /**
     * Range: 0..3100 (0..3100 Ìì)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_leave_maintain_day;

    /**
     * Range: 0..100000 (0..100000 km)
     * Scale: 1
     * Offset: 0
     */
    uint32_t hu_leave_maintain_mileage;

    /**
     * Range: 0..10000 (0..100 m)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t hu_current_locationstd;
};

/**
 * Signals in message GW_530.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_530_t {
    /**
     * This signal identifies the amount of time from IGN Off to the next Ignition cycle.  This signal is required for the Thermal Estimation algorithms to work properly.
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..65535 (0..65535 s)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ip_engine_off_time;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..9999990 (0..999999 Km)
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t ip_total_odometer;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ip_fuel_level;
};

/**
 * Signals in message GW_187.
 *
 * Ô´¶ËCHS_EPBi/IBCU_17A,0 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_187_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_abs_active_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_gear_hold_request;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_gear_hold_request_valid;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_tcs_fail_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_abs_fail_status;

    /**
     * TCU½ÓÊÕÎªDCT×¨ÓÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_ebd_fail_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_esp_function_status;

    /**
     * TCU½ÓÊÕÎªDCT×¨ÓÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_esp_active_status;

    /**
     * 
     *
     * Range: 0..17400 (-5400..12000 Nm)
     * Scale: 1
     * Offset: -5400
     */
    uint16_t esp_torq_incwhl_front;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ibcu_brake_fluid_warning;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ep_bi_clear_diagnostic_info;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_eng_torq_dec_active;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_eng_torq_inc_front_active;

    /**
     * TCU½ÓÊÕÎªDCT×¨ÓÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_vehicle_speed_valid;

    /**
     * TCU½ÓÊÕÎªDCT×¨ÓÃ
     * ACM½ÓÊÕÎªAT/DCT×¨ÓÃ
     *
     * Range: 0..6400 (0..360 km/h)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t esp_vehicle_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ep_bi_mil_req;

    /**
     * Assist Dynamic Brake Failure
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_adbf_active;

    /**
     * AT/DCT
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_rolling_counter_187;

    /**
     * AT/DCT
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_crc_check_187;
};

/**
 * Signals in message GW_197.
 *
 * Ô´¶ËCHS_IBCU/EPBi_17A,1 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_197_t {
    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_clutch_sensor;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_rolling_counter_197;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_crc_check_197;
};

/**
 * Signals in message GW_194.
 *
 * Ô´¶ËHybridA_EMS/PDCU_17C,1 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_194_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_eng_spd_err;

    /**
     * Range: 0..65534 (0..16383.5 Rpm)
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t ems_eng_spd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_idle_ctrl_sts;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_eng_run_req;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_eng_fu_pump_sts;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_eng_stop_inhb;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_eng_strt_success;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_eng_fu_cut_off;

    /**
     * Range: 0..37500 (-350..400 Nm)
     * Scale: 0.02
     * Offset: -350
     */
    uint16_t ems_eng_tq_flywh;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_eng_tq_flywh_failr;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_eng_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_ignkl15_posn;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_rolling_counter_194;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_crc_check_194;
};

/**
 * Signals in message GW_17D.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_17_d_t {
    /**
     * 
     *
     * Range: 0..255 (0..25.5 kw)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pcu_act_hv_pwr_cns_ext;

    /**
     * 
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_soc_disp;

    /**
     * 
     * 0x0=¾²Ö¹
     * 0x1=µç»úÇý¶¯
     * 0x2=´®ÁªÇý¶¯
     * 0x3=²¢ÁªÇý¶¯
     * 0x4=ÄÜÁ¿»ØÊÕ£¨½«ÖÆ¶¯,»¬ÐÐÄÜÁ¿»ØÊÕºÏ²¢ÎªÄÜÁ¿»ØÊÕ£©
     * 0x5=²¢Áª³äµç
     * 0x6=³µÁ¾¾²Ö¹£¬µ¡ËÙ³äµç
     * 0x7=µ¡ËÙ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_veh_sts;

    /**
     * 
     *
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_bms_oper_mod_req;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_chrg_allwd;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_batt_intr_heat_allwd;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_chrg_unlck_i_lim_req;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_chm_asignal_sts;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_chrg_i_req_lim_fac;

    /**
     * ³äµçÇ¹µç×ÓËøÐèÒª
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_chrg_susp_req;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_veh_spd_vld;

    /**
     * 
     *
     * Range: 0..254 (0..254 km/h)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_veh_spd;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_191_cyc_cntr;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_crcid191;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..255 (0..99.96 %)
     * Scale: 0.392
     * Offset: 0
     */
    uint8_t pcu_real_acc_pedl;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_real_acc_pedl_vld;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_k3_clu_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_flywh_tq_trans_load_act_invld;

    /**
     * Range: 0..254 (0..254 Nm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_flywh_tq_trans_load_act;

    /**
     * Range: 0..511 (0..5110 rpm)
     * Scale: 10
     * Offset: 0
     */
    uint16_t pcu_eng_tar_idle_spd_req;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_eng_strt_mod;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_spd_ctrl_mod_select;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_clr_diagc_info;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_mil_req;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_tar_gear_req;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_tar_gear_req_valid;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_gearbox_actual_driving_gear;

    /**
     * Range: 0..511 (0..5110 rpm)
     * Scale: 10
     * Offset: 0
     */
    uint16_t pcu_trsm_tar_idle_spd_req;

    /**
     * £¬ÀàÐÍÔö¼ÓREEV
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_rolling_counter_1_c6;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_crc_check_1_c6;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_pt_sts_chrg_crp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_eng_tq_flywh_req_vld;

    /**
     * Range: 0..7500 (-350..400 Nm)
     * Scale: 0.1
     * Offset: -350
     */
    uint16_t pcu_eng_tq_flywh_fast_req;

    /**
     * Range: 0..7500 (-350..400 Nm)
     * Scale: 0.1
     * Offset: -350
     */
    uint16_t pcu_eng_tq_flywh_slow_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_brk_pedl_sts1;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_fu_cut_off_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_eng_tq_flywh_allwd_max_vld;

    /**
     * Range: 0..7500 (-350..400 Nm)
     * Scale: 0.1
     * Offset: -350
     */
    uint16_t pcu_eng_tq_flywh_allwd_max;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_brk_pedl_sts2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_eng_ign_ag_intv_enbl;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_ems_surge_damper_ena;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_strt_inhb;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_strt_trq_ctl;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_eng_stp_ord;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_eng_strt_ord;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_rolling_counter_1_e1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_crc_check_1_e1;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..17400 (-5400..12000 Nm)
     * Scale: 1
     * Offset: -5400
     */
    uint16_t pcu_pwr_indcd_real_tq_front_whl;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..17400 (-5400..12000 Nm)
     * Scale: 1
     * Offset: -5400
     */
    uint16_t pcu_pwr_indcd_drvr_req_tq_whl_front;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_front_mot_sts;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_esp_tq_req_avl_front;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_ecgp_ovrd;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_qecacc;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_acc_req_possible;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_eng_sts;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_eng_clutch_sts;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_pwr_indcd_real_tq_whl_failr;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_front_mot_sts_vld;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_eng_sts_vld;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_eng_clutch_sts_vld;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_rear_mot_sts_vld;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_start_stop_active;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_start_stop_active_vld;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_rolling_counter_211;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_crc_check_211;

    /**
     * 
     *
     * Range: 0..65535 (-32768..32767 Nm)
     * Scale: 1
     * Offset: -32768
     */
    uint16_t pcu_mb_regen_whl_front;

    /**
     * 
     *
     * Range: 0..65535 (-32768..32767 Nm)
     * Scale: 1
     * Offset: -32768
     */
    uint16_t pcu_mb_regen_max_front_whl;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_mb_regen_max_front_whl_vld;

    /**
     * 
     *
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_mb_regen_max_whl_qlfr;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_apa_torq_request_available;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_acc_pedl_vld;

    /**
     * RMU·¨¹æÒªÇó
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..255 (0..99.96 pct)
     * Scale: 0.392
     * Offset: 0
     */
    uint8_t pcu_acc_pedl;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_pwr_train_sts;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_apa_request_enable;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_rolling_counter_1_a6;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_crc_check_1_a6;

    /**
     * 
     *
     * Range: 0..65535 (-32768..32767 Nm)
     * Scale: 1
     * Offset: -32768
     */
    uint16_t pcu_mb_regen_max_whl_total;

    /**
     * 
     *
     * Range: 0..65535 (-32768..32767 Nm)
     * Scale: 1
     * Offset: -32768
     */
    uint16_t pcu_mb_regen_whl_rear;

    /**
     * 
     *
     * Range: 0..65535 (-32768..32767 Nm)
     * Scale: 1
     * Offset: -32768
     */
    uint16_t pcu_mb_regen_max_rear_whl;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_rolling_counter_1_be;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_crc_check_1_be;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..17400 (-5400..12000 Nm)
     * Scale: 1
     * Offset: -5400
     */
    uint16_t pcu_pwr_indcd_real_tq_rear_whl;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..17400 (-5400..12000 Nm)
     * Scale: 1
     * Offset: -5400
     */
    uint16_t pcu_pwr_indcd_drvr_req_tq_whl_rear;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_esp_tq_req_avl_rear;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_rear_mot_sts;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_rolling_counter_1_c4;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_crc_check_1_c4;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_rolling_counter_17_d;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pcu_crc_check_17_d;
};

/**
 * Signals in message GW_17E.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_17_e_t {
    /**
     * Æ½Ì¨Îª10ms£¬CD569ÌØÀýÎª8ms
     *
     * Range: 0..4094 (-20.48..20.46 Nm)
     * Scale: 0.01
     * Offset: -20.48
     */
    uint16_t eps_measured_torsion_bar_torque;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_pinionang_valid;

    /**
     * 
     *
     * Range: 0..14400 (-720..720 degree)
     * Scale: 0.1
     * Offset: -720
     */
    uint16_t eps_pinionang;

    /**
     * 
     *
     * Range: 0..21600 (-1080..1080 degree)
     * Scale: 0.1
     * Offset: -1080
     */
    uint16_t eps_handwheel_relang;

    /**
     * Æ½Ì¨Îª10ms£¬CD569ÌØÀýÎª8ms
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_measured_torsion_bar_torq_valid;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_handwheel_relang_valid;

    /**
     * Æ½Ì¨Îª10ms£¬CD569ÌØÀýÎª8ms
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_lat_ctrl_active;

    /**
     * Æ½Ì¨Îª10ms£¬CD569ÌØÀýÎª8ms
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_lat_ctrl_availability_status;

    /**
     * 1.rolling counter
     * 2.Æ½Ì¨Îª10ms£¬CD569ÌØÀýÎª8ms
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_rolling_counter_17_e;

    /**
     * Æ½Ì¨Îª10ms£¬CD569ÌØÀýÎª8ms
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_crc_check_17_e;
};

/**
 * Signals in message ACC_1BA.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_acc_1_ba_t {
    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..2046 (-20.48..20.44 Nm)
     * Scale: 0.02
     * Offset: -20.48
     */
    uint16_t acc_motor_torque_max_limit_request;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..2046 (-20.48..20.44 Nm)
     * Scale: 0.02
     * Offset: -20.48
     */
    uint16_t acc_motor_torque_min_limit_request;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..14400 (-720..720 degree)
     * Scale: 0.1
     * Offset: -720
     */
    uint16_t acc_lat_ang_req;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_lat_ang_req_active;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_1_ba_0;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_check_1_ba_0;
};

/**
 * Signals in message GW_20B.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_20_b_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wheel_speed_fr_valid_data;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wheel_speed_fr_direction;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..6400 (0..360 km/h)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t wheel_speed_fr_data;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wheel_speed_fl_valid_data;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wheel_speed_fl_direction;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..6400 (0..360 km/h)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t wheel_speed_fl_data;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abs_tod_fast_open_request;

    /**
     * 
     *
     * Range: 0..4094 (0..4094 NM)
     * Scale: 1
     * Offset: 0
     */
    uint16_t esp_tod_torque_max_limit;

    /**
     * rollingcounter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_rolling_counter_206;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_crc_check_206;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wheel_speed_rr_valid_data;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wheel_speed_rr_direction;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..6400 (0..360 km/h)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t wheel_speed_rr_data;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wheel_speed_rl_valid_data;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wheel_speed_rl_direction;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..6400 (0..360 km/h)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t wheel_speed_rl_data;

    /**
     * Range: 0..6400 (0..360 km/h)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t esp_vehicle_speed_reference;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_urgency_brake_alarm;

    /**
     * ESP·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_ecd_active;

    /**
     * ESP·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_ecd_available;

    /**
     * rollingcounter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_rolling_counter_208;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_crc_check_208;

    /**
     * 258
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_mas_cyl_brake_pressure_valid;

    /**
     * 258
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_auto_hold_standby;

    /**
     * 258
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_brake_light_on_request;

    /**
     * indicatedthepressureofbrakemastercylinder,butnotthepressureofbrake
     *
     * Range: 0..2500 (0..250 Bar)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t esp_mas_cyl_brake_pressure;

    /**
     * All4wheelpulsesignalsaresentbyABSwithoutfiltering.Theriseedgeandfalledgearebothcountedinit,thewheelpulsemustbesequentialintheway0,1,2¡­254,0,4¡­
     *
     * Range: 0..254 (0..254 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wheel_speed_fl_pulse;

    /**
     * All4wheelpulsesignalsaresentbyABSwithoutfiltering.Theriseedgeandfalledgearebothcountedinit,thewheelpulsemustbesequentialintheway0,1,2¡­254,0,3¡­
     *
     * Range: 0..254 (0..254 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wheel_speed_fr_pulse;

    /**
     * All4wheelpulsesignalsaresentbyABSwithoutfiltering.Theriseedgeandfalledgearebothcountedinit,thewheelpulsemustbesequentialintheway0,1,2¡­254,0,1¡­
     *
     * Range: 0..254 (0..254 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wheel_speed_rr_pulse;

    /**
     * All4wheelpulsesignalsaresentbyABSwithoutfiltering.Theriseedgeandfalledgearebothcountedinit,thewheelpulsemustbesequentialintheway0,1,2¡­254,0,2¡­
     *
     * Range: 0..254 (0..254 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wheel_speed_rl_pulse;

    /**
     * 258
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_auto_hold_active;

    /**
     * 258
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_auto_hold_available;

    /**
     * 258 AT/DCT
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_hhc_available;

    /**
     * 258
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_hhc_active;

    /**
     * 258
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_rolling_counter_258;

    /**
     * 258
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_crc_check_258;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_brake_force;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_ab_aactive;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_ab_aavailable;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_prefill_active;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_prefill_available;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_aeb_available;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_ae_bdec_active;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_aw_bactive;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_aw_bavailable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_brake_over_heat_brake_disc_temp;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_cdd_active;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_cdd_available;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_vehicle_standstill;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_vdc_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_tcs_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_only_abs_active;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_qdcacc;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..1 (0..1 NA)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_cdd_active_apa;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..1 (0..1 NA)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_cdd_available_apa;

    /**
     * ½¨Ñ¹³É¹¦ºó³ÖÐø·¢15Ö¡
     *
     * Range: 0..1 (0..1 NA)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_increase_pressure_req_ok;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_hdc_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_hbb_active_status;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_cdp_parking_active_for_acc;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_cdp_parking_avail_for_acc;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ibcu_brake_disc_high_temp_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_prefillfor_apa_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_prefillfor_apa_available;

    /**
     * Range: 0..255 (0..255 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ibcu_brk_pedopl_sts_gb;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ibcu_brk_pedl_sts_gb_vld;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ibcu_precheck_status;

    /**
     * rollingcounter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_rolling_counter_277;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_crc_check_277;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_rolling_counter_20_b;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t esp_crc_check_20_b;
};

/**
 * Signals in message GW_24F.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_24_f_t {
    /**
     * Range: 0..254 (0..127 A)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t eps_elect_power_consumption;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_apa_abortfeedback;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_mode_switch_st;

    /**
     * APA needs
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_apa_epas_failed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_torq_sensor_status;

    /**
     * Range: 0..254 (-22.78..22.78 Nm)
     * Scale: 0.1794
     * Offset: -22.78
     */
    uint8_t eps_steering_torque;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_ldw_shake_lev_status;

    /**
     * ¼´EPS_PAS_Requestfeedback
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_apa_control_feedback;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_iacc_abortreason;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_system_st;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_eps_failed;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_torque_assist_mode;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_concuss_availability_status;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_rolling_counter_24_f;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_crc_check_24_f;
};

/**
 * Signals in message GW_28B.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_28_b_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_low_beam_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_high_beam_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_turn_light_switch_sts;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_mirror_adjust_sts;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_lock_trigger;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_driver_door_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_turn_indicator_left;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_turn_indicator_right;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_hood_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_start_controlsignal;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_trunk_release_trigger;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_remote_start_req;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_emergencylightstatus;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_power_status_feedback;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rear_defrosterstatus;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_unlock_trigger;

    /**
     * PHEV×¨ÓÃ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_refuel_req;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_shift_forbid_rq;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_key_alarm_status;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rolling_counter_28_b;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_crc_check_28_b;
};

/**
 * Signals in message GW_2D1.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_2_d1_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_luggage_unlock_signal;

    /**
     * MT³µÐÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_reverse_position;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_brake_lamp_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_trunk_door_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_rear_door_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_passenger_door_status;
};

/**
 * Signals in message GW_2DE.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_2_de_t {
    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ip_driver_lcdaled_sts;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ip_passenger_lcdaled_sts;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ip_dis_fail;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ip_q_dash_acc_fail;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ip_rolling_counter_2_de;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ip_crc_check_2_de;
};

/**
 * Signals in message GW_2E6.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_2_e6_t {
    /**
     * Range: 0..254 (-40..150.5 degreeC)
     * Scale: 0.75
     * Offset: -40
     */
    uint8_t ems_engine_intake_air_temp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_coolt_t_err;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_lo_batt_err;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_catalyst_warm_up;

    /**
     * TCUÊÇ·ñÐèÒª
     * ·¨¹æÐèÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_general_denominator_status;

    /**
     * TCUÊÇ·ñÐèÒª
     * ·¨¹æÐèÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_general_deno_status_valid;

    /**
     * TCUÊÇ·ñÐèÒª
     * ·¨¹æÐèÇó
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_first_ignition_cycle_counter;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_warm_up_cycle;

    /**
     * TCUÊÇ·ñÐèÒª
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_driving_cycle;

    /**
     * Range: 0..254 (-48..142.5 ¡ãC)
     * Scale: 0.75
     * Offset: -48
     */
    uint8_t ems_eng_t_coolt;

    /**
     * Range: 0..254 (0..25.4 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t ems_lo_batt_u;

    /**
     * 
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_coolreq;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_altitude_factor_valid;

    /**
     * Range: 0..254 (0..4 -)
     * Scale: 0.01575
     * Offset: 0
     */
    uint8_t ems_altitude_factor;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_sec_ignition_cycles_counter;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_ignition_cycles_counter_valid;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_rolling_counter_2_e6;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_crc_check_2_e6;
};

/**
 * Signals in message ACC_31A.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_acc_31_a_t {
    /**
     * 1¡¢¸ºÊý´ú±íÏòºó£¬ÕýÊý´ú±íÏòÇ°£¬Ô­µãÎªÇ°À×´ï²¨Êø·¢ÉäÃæ
     * 2¡¢ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..500 (-70..180 m)
     * Scale: 0.5
     * Offset: -70
     */
    uint16_t acc_aeb_target_lng_range;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..500 (-250..250 km/h)
     * Scale: 1
     * Offset: -250
     */
    uint16_t acc_aeb_target_rel_speed;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_aeb_target_lat_range;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_elk_alert;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_status;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_text_info;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_targetmode;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_voiceinfo;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_f_radar_failure_status;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_36_d;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_check_36_d;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ£¬ÆäÓàÓÉAPA»òAVM·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_r_lane_marker_type;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_las_mode_selection_status;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_iacchwa_enable;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_las_warning_mode_selection_sts;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ£¬ÆäÓàÓÉAPA»òAVM·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_host_lane_right_status;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ£¬ÆäÓàÓÉAPA»òAVM·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_host_lane_left_status;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ£¬ÆäÓàÓÉAPA»òAVM·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_l_lane_marker_type;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..120 (-0.03..0.03 1/m)
     * Scale: 0.0005
     * Offset: -0.03
     */
    uint8_t acc_road_curvature;

    /**
     * 1¡¢Ïò×óÎªÕý£¬ÏòÓÒÎª¸º
     * 2¡¢ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..120 (-0.03..0.03 1/m)
     * Scale: 0.0005
     * Offset: -0.03
     */
    uint8_t acc_road_curvature_near;

    /**
     * 1¡¢Ïò×óÎªÕý£¬ÏòÓÒÎª¸º
     * 2¡¢ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..120 (-0.03..0.03 1/m)
     * Scale: 0.0005
     * Offset: -0.03
     */
    uint8_t acc_road_curvature_far;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_lane_change_status;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_30_a;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_check_30_a;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_iacchwa_mode;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_iacchwa_text_info_for_driver;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_driver_hands_off_status;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_target_based_lateral_control;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_emergency_lighting_request;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_ll_lane_detection;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t adc_ecas_mode_req;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rr_lane_detection;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_high_beam_control;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_30_d;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_check_30_d;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_elk_mode;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_elk_intervention_mode;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_elk_enable_status;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: -900..900 (-90..90 degree)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t acc_lat_path_heading_angle;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_lng_take_over_req_reason;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_367;

    /**
     * ACC Ö÷¿ØÔòACC·¢ËÍ£¬LAS Ö÷¿ØÔòLAS·¢ËÍ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_check_367;

    /**
     * ½è¼øC385
     *
     * Range: 0..1023 (-64..63.875 m/s)
     * Scale: 0.125
     * Offset: -64
     */
    uint16_t acc_aeb_target_lat_rel_speed;
};

/**
 * Signals in message GW_355.
 *
 * Ô´¶ËP_EMS_355 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_355_t {
    /**
     * 1¡¢ÎÞÏà¹ØÅäÖÃÊ±±£ÁôÐÅºÅÄ¬ÈÏ·¢0
     * 2¡¢ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_cruise_switch_on_off;

    /**
     * 1¡¢ÎÞÏà¹ØÅäÖÃÊ±±£ÁôÐÅºÅÄ¬ÈÏ·¢0
     * 2¡¢ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_cruise_switch_resume;

    /**
     * 1¡¢ÎÞÏà¹ØÅäÖÃÊ±±£ÁôÐÅºÅÄ¬ÈÏ·¢0
     * 2¡¢ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_cruise_switch_cancel;

    /**
     * 1¡¢ÎÞÏà¹ØÅäÖÃÊ±±£ÁôÐÅºÅÄ¬ÈÏ·¢0
     * 2¡¢ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_cruise_switch_set;

    /**
     * 1¡¢ÎÞÏà¹ØÅäÖÃÊ±±£ÁôÐÅºÅÄ¬ÈÏ·¢0
     * 2¡¢ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_cruise_distance;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_rolling_counter_355;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ems_crc_check_355;
};

/**
 * Signals in message GW_3AF.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_3_af_t {
    /**
     * 
     *
     * Range: 0..1022 (-51.1..51.1 -)
     * Scale: 0.1
     * Offset: -51.1
     */
    uint16_t hu_slope_gradient_10m;

    /**
     * 
     *
     * Range: 0..1022 (-51.1..51.1 -)
     * Scale: 0.1
     * Offset: -51.1
     */
    uint16_t hu_slope_gradient_20m;

    /**
     * 
     *
     * Range: 0..1022 (-51.1..51.1 -)
     * Scale: 0.1
     * Offset: -51.1
     */
    uint16_t hu_slope_gradient_30m;

    /**
     * 
     *
     * Range: 0..1022 (-51.1..51.1 m)
     * Scale: 0.1
     * Offset: -51.1
     */
    uint16_t hu_slope_gradient_40m;

    /**
     * 
     *
     * Range: 0..1022 (-51.1..51.1 -)
     * Scale: 0.1
     * Offset: -51.1
     */
    uint16_t hu_slope_gradient_50m;

    /**
     * 
     *
     * Range: 0..1022 (-51.1..51.1 m)
     * Scale: 0.1
     * Offset: -51.1
     */
    uint16_t hu_slope_gradient_100m;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_interval_velocity_info;

    /**
     * 
     *
     * Range: 0..60 (0..600 m)
     * Scale: 10
     * Offset: 0
     */
    uint8_t hu_interval_velocity_dis;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_accident_prone;

    /**
     * 
     *
     * Range: 0..60 (0..600 m)
     * Scale: 10
     * Offset: 0
     */
    uint8_t hu_accident_prone_distance;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_bridge_info;

    /**
     * 
     *
     * Range: 0..60 (0..600 m)
     * Scale: 10
     * Offset: 0
     */
    uint8_t hu_bridge_dis;

    /**
     * 
     *
     * Range: 0..3 (0..3 m)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_service_road;

    /**
     * 
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_weather_type;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_nav_country_code;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_nav_speed_limit;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_enter_ramp_info;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_nav_speed_limit_units;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_nav_speed_limit_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_ramp_info;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_nav_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_enter_curve_info;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_nav_current_road_type;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_nav_speed_limit_type;

    /**
     * Range: 0..60 (0..600 m)
     * Scale: 10
     * Offset: 0
     */
    uint8_t hu_curve_distance;

    /**
     * Range: 0..300 (0..3000 m)
     * Scale: 10
     * Offset: 0
     */
    uint16_t hu_ramp_distance;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_novice_enable;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_rolling_counter_3_af_3;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_crc_check_3_af_3;

    /**
     * Range: 0..60 (0..600 m)
     * Scale: 10
     * Offset: 0
     */
    uint8_t hu_speed_limit_distance;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_rolling_counter_3_bb;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_crc_check_3_bb;

    /**
     * 
     *
     * Range: 0..60 (0..600 m)
     * Scale: 10
     * Offset: 0
     */
    uint8_t hu_service_road_dis;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_lane_type_id1;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_lane_type_id2;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_lane_type_id3;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_lane_type_id4;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_lane_type_id5;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_lane_type_id6;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_ehp_heart_flag;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_ehr_heart_flag;

    /**
     * 
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_adas_posn_pathldx;

    /**
     * 
     *
     * Range: 0..8191 (0..8191 m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_adas_posn_offset;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_rolling_counter_3_af;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_crc_check_3_af;
};

/**
 * Signals in message GW_3B3.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_3_b3_t {
    /**
     * 1¡¢¼ì²âµ½µÚÒ»¸öÊäÈë±äµÍÊ±¿ªÊ¼¼ÆÊ±£¬Êä³öÍ£Ö¹Ç°¼ì²âµ½µÚ¶þ¸öÊäÈë±äµÍÊ±Í£Ö¹¼ÆÊ±£¬CANÐÅºÅµÄÊ±¼äÎªÁ½¸öÊäÈë±ä»¯µÄÊ±¼ä£¬·¢ËÍÈýÖ¡£¬
     * 2¡¢Á½¸ö¶¼Î´µ½Î»·¢ËÍÎÞÐ§Öµ£¬
     * 3¡¢Õ¹¿ª»òÕßÕÛµþÊ±Èç¹ûÔÚ×î´óÇý¶¯Ê±¼äÄÚ¶¼Î´ÊÕµ½×îºóÒ»¸öµ½Î»£¨µÚÒ»¸öÊÕµ½ÁË£©£¬Ôò·¢ËÍÎÞÐ§Öµ
     * 4¡¢3Ö¡ÐÅºÅ»¹Ã»ÓÐ¸üÐÂÍê³ÉÊ±£¬Èç¹ûÓÖ´¥·¢¼ÆÊ±Âß¼­£¬°´ºóÒ»´ÎµÄÊ±¼ä¸üÐÂCANÐÅºÅ£¬²»±£³ÖÉÏÒ»´Î3Ö¡·¢Íê
     *
     * Range: 0..255 (0..1275 ms)
     * Scale: 5
     * Offset: 0
     */
    uint8_t bcm_door_handle_time_difference;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_passenge_door_handle_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_rear_door_handle_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rear_foglamp_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_brake_lamp_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_rear_foglamp_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_rear_foglamp_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rear_position_lamp_error;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lcm_reverse_light_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_reverse_lamp_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_chm_lamp_error;
};

/**
 * Signals in message GW_3BD.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_3_bd_t {
    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_csla_enable;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_hwa_enable;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_irlc_enable;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_elk_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_lane_change_req;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_ess_enable;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_tla_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_ads_road_voice_enable;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_ads_rescue_confirm;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_udlc_enable;

    /**
     * Range: 0..100 (0..100 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_transparent_value_car_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_3_davm_req;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_ads_lane_change_voice_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_ads_safe_voice_enable;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_rolling_counter_394;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_crc_check_394;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_avm_map_display_feedback;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_rebroadcast_req;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_360_av_mdetection_request;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_real_time_req;

    /**
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_dvr_edit_selected;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_vision_angle_req;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_navi_icon_number_2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_auto_view_set;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_sd_capacity;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_seeoffanimation;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_tuid_req;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_register_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_surronding_monitor_done;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_bcall_req;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_error_record;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_system_imprint;

    /**
     * Range: 0..131070 (0..131070 m)
     * Scale: 1
     * Offset: 0
     */
    uint32_t hu_navi_distance;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_navi_icon_number;

    /**
     * ÔÝÊ±C301Ê¹ÓÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_vc_vr;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_hud_pos_adjust_inc;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_hud_pos_adjust_dec;

    /**
     * ÒÇ±í³µÍ·³¯ÏòÖ¸±±ÕëÂÞÅÌÏÔÊ¾¿ØÖÆÐÅºÅ
     *
     * Range: 0..360 (0..360 Degree)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_compass;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_apa_active;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_remote_disp_sts;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_laeb_enable;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_current_media_info;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_apa_remote_disp_sts;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_rads_switch;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_language_sync;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_asp_remind_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_pac_mode_select;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_ext_remote_detect_upload_status;

    /**
     * ÐèÒªHUÅÐ¶ÏÂß¼­,ÓÃ»§aÃëÖ®ÄÚÎ´²Ù×÷·¢ËÍ0x3£¨Í¬ÓÃ»§Ö±½ÓµãÈ¡Ïû£©,³µ»ú¼ÇÒäNeverRemind×´Ì¬,²¢¸ù¾ÝÇé¿öÏìÓ¦APA·¢³öµÄASP¿ÉÓÃÇëÇó,Èç¹ûNeverRemind±»¹´Ñ¡,ÔòºöÂÔAPAµÄÇëÇó£»NeverRemind¿ÉÒÔÔÚÉèÖÃÖÐÈ¡Ïû£»
     * APPÊÕµ½0x3ºóÍË³öµ½Ò£¿Ø²´³µ½çÃæ,Í¬Ê±³µ»úÍË³öÏÔÊ¾,ÐèÒª°´¼ü¼¤»î½øÈë²´³µ½çÃæ,Á½¸ö½çÃæ¾ùÏÔÊ¾ASPÊµ¼ÊµÄ×´Ì¬¡£´ËÊ±,ÎÞÂÛ´Ó³µ»ú»¹ÊÇAPPµã»÷½øÈëASP,Á½¸ö½çÃæ¾ùÍ¬²½ÏÔÊ¾Ïà¹ØÐÅÏ¢(Íø¹Ø¼ÓÃÜ·¢ËÍ¸øRFBT)
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_asp_mode_select;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_cross_parking_mode_set;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_asp_switch;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_apa_mode_select;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_rear_foglamp_set;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_auto_head_li_set;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_body_colour_set;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_avmdvr_replay_mode_req;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_wheel_hub_set;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_license_number_set;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_license_number;

    /**
     * ¸ÃÐÅºÅÊÇ¶Ô³µÅÆÉèÖÃµÄÐ£Ñé£¬·Ç¸ÃÖ¡±¨ÎÄµÄÐ£Ñé
     * G
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_license_number_check_sum;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_apa_theme_change;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_update_req;
};

/**
 * Signals in message GW_3C4.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_3_c4_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_enter_tunnel_info;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_road_curvature;

    /**
     * Range: 0..60 (0..600 m)
     * Scale: 10
     * Offset: 0
     */
    uint8_t hu_tunnel_distance;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_road_curvature_far;

    /**
     * Range: 0..63 (0..63 m)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_tunnel_length;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_nav_guigance_status;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_rolling_counter_3_b8;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_crc_check_3_b8;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_ramp_side;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_forward_road_type;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_lane_cnt;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_toll_info;

    /**
     * 
     *
     * Range: 0..60 (0..600 m)
     * Scale: 10
     * Offset: 0
     */
    uint8_t hu_toll_dis;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_road_traffic_flow;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_map_data_update_status;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_rolling_counter_3_c2;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_crc_check_3_c2;

    /**
     * 
     *
     * Range: 0..60 (0..600 m)
     * Scale: 10
     * Offset: 0
     */
    uint8_t hu_to_numchange_of_lanes_dist;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_lane_changtype;

    /**
     * 
     *
     * Range: 0..1023 (0..1023 1/m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_road_curvature_10m;

    /**
     * 
     *
     * Range: 0..1023 (0..1023 1/m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_road_curvature_20m;

    /**
     * 
     *
     * Range: 0..1023 (0..1023 1/m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_road_curvature_30m;

    /**
     * 
     *
     * Range: 0..1023 (0..1023 1/m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_road_curvature_40m;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_rolling_counter_3_c4_2;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_crc_check_3_c4_2;

    /**
     * 
     *
     * Range: 0..1023 (0..1023 1/m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_road_curvature_50m;

    /**
     * 
     *
     * Range: 0..1023 (0..1023 1/m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_road_curvature_60m;

    /**
     * 
     *
     * Range: 0..1023 (0..1023 1/m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_road_curvature_70m;

    /**
     * 
     *
     * Range: 0..1023 (0..1023 1/m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_road_curvature_80m;

    /**
     * 
     *
     * Range: 0..1023 (0..1023 1/m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_road_curvature_90m;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_rolling_counter_3_c6;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_crc_check_3_c6;

    /**
     * 
     *
     * Range: 0..1023 (0..1023 1/m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_road_curvature_100m;

    /**
     * 
     *
     * Range: 0..1023 (0..1023 1/m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_road_curvature_300m;

    /**
     * 
     *
     * Range: 0..1023 (0..1023 1/m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_road_curvature_400m;

    /**
     * 
     *
     * Range: 0..1023 (0..1023 1/m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_road_curvature_600m;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_map_match_status;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_rolling_counter_3_c7;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_crc_check_3_c7;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_rolling_counter_3_c4;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_crc_check_3_c4;
};

/**
 * Signals in message GW_3FD.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_3_fd_t {
    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_drive_mode;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_eps_torq_syn_status;

    /**
     * PHEVÊ¹ÓÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_drv_mod_sw_sts;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_eps_torque_mode;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_power_manage_level;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rear_foglamp_status_fb;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_aut_head_li_sts;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_front_windshield_warm_status;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_switch_dimmerlevel;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rolling_counter_3_fd;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_crc_check_3_fd;
};

/**
 * Signals in message GW_3FF.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_3_ff_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_music_play_request_signal;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_music_light_mode_select_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_follow_me_turnon;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_welcome_light_staus;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_musiclightfeedback;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_front_position_lamp_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_auto_headlight_sts;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_front_foglamp_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_position_lamp_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_front_foglamp_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_front_foglamp_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_low_beam_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_low_beam_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_right_day_lamp_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_left_day_lamp_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_turn_indicator_right_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_turn_indicator_left_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_position_lamp_switch_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lcm_drl_sts;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_follow_me_home_light_set_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_floor_lamp_status;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_high_beam_lamp_error;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rolling_counter_3_ff;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_crc_check_3_ff;
};

/**
 * Signals in message GW_51E.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_51_e_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_lf_temperature_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_rf_temperature_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_rr_temperature_warning;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_lr_temperature_warning;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_tire_position;

    /**
     * Range: 0..255 (-40..215 ¡ãC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t tpms_tire_temperature;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_lf_leakage_warning;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_rf_leakage_warning;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_rr_leakage_warning;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_lr_leakage_warning;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_suggestion;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_commendatorypressure;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_aerate_flag;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_rolling_counter_51_e;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_crc_check_51_e;
};

/**
 * Signals in message ACC_693.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_acc_693_t {
    /**
     * DTCÉÏ´«
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_dtc1_high_byte;

    /**
     * DTCÉÏ´«
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_dtc1_midd_byte;

    /**
     * DTCÉÏ´«
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_dtc1_low_byte;

    /**
     * DTCÉÏ´«
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_dtc1_status;

    /**
     * DTCÉÏ´«
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_dtc2_high_byte;

    /**
     * DTCÉÏ´«
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_dtc2_midd_byte;

    /**
     * DTCÉÏ´«
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_dtc2_low_byte;

    /**
     * DTCÉÏ´«
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_dtc2_status;
};

/**
 * Signals in message LAS_694.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_las_694_t {
    /**
     * DTCÉÏ´«
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_dtc1_high_byte;

    /**
     * DTCÉÏ´«
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_dtc1_midd_byte;

    /**
     * DTCÉÏ´«
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_dtc1_low_byte;

    /**
     * DTCÉÏ´«
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_dtc1_status;

    /**
     * DTCÉÏ´«
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_dtc2_high_byte;

    /**
     * DTCÉÏ´«
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_dtc2_midd_byte;

    /**
     * DTCÉÏ´«
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_dtc2_low_byte;

    /**
     * DTCÉÏ´«
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_dtc2_status;
};

/**
 * Signals in message LAS_452.
 *
 * Diag--VDC--ADAS1 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_las_452_t {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_message452;
};

/**
 * Signals in message GW_28C.
 *
 * GW×Ô·¢MFS_LIN_2 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_28_c_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_set_reduce_switch_signal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_res_plus_switch_signal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_cancle_switch_signal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_crusie_switch_signal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_eps_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_iac_cenable_switch_signal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_lim_switch_signal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_dist_switch_signal;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_hod_system_status;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_handsoff_detect_result;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_dist_plus_switch_signal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_dist_reduce_switch_signal;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_hod_calibrated_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_hod_lin_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_hod_app_status;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_handsoff_ability_detect;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_hod_senser_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_ers_reduce_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_ers_plus_switch;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_diag_info_sw_28_c;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_gearshift_plus_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_gearshift_reduce_switch;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_rolling_counter_28_c;

    /**
     * GW¶ÔLINµÄCRCÖØÐÂ¼ÆËã²¢·¢³ö
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_crc_check_28_c;
};

/**
 * Signals in message GW_331.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_331_t {
    /**
     * Indicates whether there is a failure or not
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_failure_lamp;

    /**
     * Not used for A phase
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_trans_temp_warning;

    /**
     * 1¡¢TCU sends this information when transmission sump oil temperature is overheated - 0x0-0x64=0%-100%£»0x65-0x7E= no use£»0x7F=Invalid£»
     * 2¡¢P2ÌØÓÐ
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_coolant_fan_request;

    /**
     * Transmission sump oil temperature
     * PEU uses it for rotor temperature estimation
     *
     * Range: 0..254 (-40..214 deg C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t tcu_trans_fluid_temp;

    /**
     * 1¡¢Used for rotor temperature estimation in PEU. This signal is for PEU to estimate rotar temperater.
     * 2¡¢P2ÌØÓÐ
     *
     * Range: 0..254 (-40..214 deg C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t tcu_k0_clutch_exit_oil_temp;

    /**
     * This difinition comes from platform team
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_gear_for_display;

    /**
     * 0x0-0x32=0-5£»0x33-0x3E=Reserved£»0x3F=Invalid. This signal is for PEU to estimate rotar temperater.
     *
     * Range: 0..50 (0..5 L/min)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t tcu_rotor_acutal_cooling_flow;

    /**
     * TCU communication to IP when driver does not follow release park procedure  correctly when Park is engaged in Auto position
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_park_rel_a_posn_ip_req;

    /**
     * TCU communication to IP when driver is unable to get drive , when Park is engaged in M Gate
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_park_rel_m_posn_ip_req;

    /**
     * TCU communication to IP when driver does not follow Park Engagement procedure  correctly
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_park_select_ip_req;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_esl_fault_ip_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_arc_fault_ip_req;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_powerplant_status_ip_req;

    /**
     * 1¡¢Normal= transmission works will;Fault level1(just store DTC)=Transmission some functions are fault but don't need to inform the driver;Fault level2(store DTC&warning)=Transmission some functions are fault and it should inform the driver;Fault level3(Limphome)=Transmission some functions are fault and will limit the torque;Fault level4(No DCT Shaft)= Transmission some functions are fault and it will lead to freeze shaft; Fault level5(Drive open)£»Transmission fully broken and it will lead clutchs fully open.
     * 2¡¢P2ÌØÓÐ
     * 3¡¢APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_trans_fault_level;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_rolling_counter_338;

    /**
     * CRCCheck_SAE_J1850_2001,multinomial is X8+X4+X3+X2+1
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_crc_check_338;
};

/**
 * Signals in message GW_1AF.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_1_af_t {
    /**
     * PEPS need this signal to control engine start. When gear box in P/N, TCU contrl the pin to LSD. If detected not to low in P/N or to low in D/R/S/M
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_stl_kfailure;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_actual_driving_gear_valid;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_shift_postion_valid;

    /**
     * RMU·¨¹æÒªÇó
     * Message relaying what the current engaged gear is (On DCT this will also be the gear on the shaft with the engaged clutch).
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_actual_driving_gear;

    /**
     * TCU receives driver demands gear from ESL and make decisition of actual drive mode based on current vehicle/transmission status.
     * PCU receives this signals to understand actual drive mode and estimate target gear
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_gear_shift_position;

    /**
     * Used for preselect gear estimation
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_actual_preselect_gear;

    /**
     * PCU uses it for regen, engine start while moving, etc.
     * PEU uses it for correlation check of resolver
     *
     * Range: 0..8190 (-10235..10240 Rpm)
     * Scale: 2.5
     * Offset: -10235
     */
    uint16_t tcu_input_shaft_speed;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_tho_state;

    /**
     * 
     *
     * Range: 0..254 (0..25.4 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t tcu_gear_ratio;

    /**
     * Manual mode switch signal
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_tip_switch_signal;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_rolling_counter_1_a8;

    /**
     * CRCCheck_SAE_J1850_2001,multinomial is X8+X4+X3+X2+1
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_crc_check_1_a8;
};

/**
 * Signals in message GW_320.
 *
 * GW×Ô·¢ 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_320_t {
    /**
     * ÓëGW_OTAmode·ÖÅäµ½Ò»¸öIDµÄÏàÁÚ×Ö½Ú
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_ot_amode_chks;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_dcan_diag_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_gateway_failure_flag;

    /**
     * ÓëGW_OTAmode·ÖÅäµ½1¸ö×Ö½Ú
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_ot_amode_cntr;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_ads_sec_oc_verify_failure_flag;

    /**
     * 
     *
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_reset_req;

    /**
     * ÓëGW_OTAmode_Cntr·ÖÅäµ½1¸ö×Ö½Ú
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_ot_amode;
};

/**
 * Signals in message LAS_39A.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_las_39_a_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_tsr_speed_limit_type;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_overspeed_visual_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_overspeed_sound_warning;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_overspeed_warning_enable_status;

    /**
     * Range: 0..57 (-10..47 km/h)
     * Scale: 1
     * Offset: -10
     */
    uint8_t las_overspeed_warning_offset;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_hma_light_distribution;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_hma_enable_status;

    /**
     * ÓÐLASÊ±ÓÉLAS·¢ËÍ£¬ÆäÓàÓÉAPA»òAVM·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_front_camera_calibration_status;

    /**
     * ÓÐLASÊ±ÓÉLAS·¢ËÍ£¬ÆäÓàÓÉAPA»òAVM·¢ËÍ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_front_camera_failure_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_tsr_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_overspeed_sound_warning_en_st;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_tsr_status;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_tsr_host_spd_limit;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_hma_status;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_tsr_host_spd_limit_units;

    /**
     * rolling counter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_rolling_counter_332;

    /**
     * 
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_crc_check_332;

    /**
     * rolling counter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_rolling_counter_3_d4;

    /**
     * 
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_crc_check_3_d4;

    /**
     * rolling counter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_rolling_counter_3_c0;

    /**
     * 
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_crc_check_3_c0;

    /**
     * rolling counter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_rolling_counter_37_d;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_crc_check_37_d;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_crosswalk_lng_range_h_lane;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_rd4_road_infor_available;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_rd2_road_infor_available;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_road_feature;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_rd4_long_distence;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_rd3_long_distence;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_rd2_long_distence;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_rd1_long_distence;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_rd3_road_infor_available;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_rd1_road_infor_available;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_rolling_counter_579;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_crc_check_579;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_39_a;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t acc_crc_check_39_a;
};

/**
 * Signals in message GW_310.
 *
 * Ô´¶ËINFO_AMP_30E,1 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_310_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amp_vol_speed_enable_set_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amp_head_spkniviset_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amp_head_spk_tel_set_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amp_head_spk_media_set_status;

    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amp_head_spk_vol_set_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amp_alarm_vol_set_status;

    /**
     * Range: 0..31 (-16..15 -)
     * Scale: 1
     * Offset: -16
     */
    uint8_t amp_lr_head_spk_balance_set_status;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amp_alarm_style_set_status;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amp_touch_vol_set_status;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amp_spk_channel_set_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amp_muteset_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amp_ip_enable_alarm_failure_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amp_all_alarm_failure_status;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amp_vol_speed_lev_set_status;
};

/**
 * Signals in message GW_3E8.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_3_e8_t {
    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..255 (0..255 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_soc;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..255 (0..127.5 Ah)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t bcm_sof_q;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..255 (0..15.9375 V)
     * Scale: 0.0625
     * Offset: 0
     */
    uint8_t bcm_sof_v1;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..255 (0..15.9375 V)
     * Scale: 0.0625
     * Offset: 0
     */
    uint8_t bcm_sof_v2;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..1023 (0..1023 min)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bcm_sof_t;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_soc_state;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_sof_q_state;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_sof_v1_state;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_sof_v2_state;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_sof_t_state;
};

/**
 * Signals in message GW_3E7.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_3_e7_t {
    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..15360 (3..18 V)
     * Scale: 0.0009765625
     * Offset: 3
     */
    uint16_t bcm_u_batt;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_i_range;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 7168..65535 (7168..65535 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bcm_i_batt;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..255 (-40..215 ¡ãC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bcm_t_batt;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..255 (0..0.99609 A)
     * Scale: 0.00390625
     * Offset: 0
     */
    uint8_t bcm_ibatt_quiescent;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_status_current;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_status_voltage;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_status_temp;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_error_calib;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_error_ident;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_resp_error;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_flag_inconsistency;
};

/**
 * Signals in message GW_38A.
 *
 * GW×Ô·¢ 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_38_a_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_down_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_up_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_right_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_left_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_dvr_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_mode_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_speech_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_ok_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_mute_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_vol_reduce_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_vol_plus_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_cust_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_answer_switch_signal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_hungup_switch_signal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_seek_reduce_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_seek_plus_switch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_we_chat_switch_signal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_avm_switch;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_mfs_diag_info_sw_38_a;
};

/**
 * Signals in message GW_249.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_249_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message GW_262.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_262_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_start_indicator_signal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_remote_apa_done_key_off_req;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_apa_engine0ff_feedback;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_apa_lock_feedback;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_apa_remote_parking_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_unallow_start_escl_error;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_apa_close_win_feedback;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_remote_control_ac_req;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_power_distribution_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_unallow_start_escl_lock;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_unallow_start_signal_not_pn;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_immo_failed_alarmsignal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_startup_button_signal;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_remote_start_feedback;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_apa_power_mirror_fold_feedback;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_engine_startup_inhibit_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_power_distribution_fault_bit;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_engine_startup_inhibit_fb;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_immo_feedback;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_remote_start_key_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_peps_fail_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_key_standby_position_indicator;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_apa_remote_parking_off;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_rolling_counter_262;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_crc_check_262;
};

/**
 * Signals in message GW_334.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_334_t {
    /**
     * 
     *
     * Range: 0..255 (0..127.5 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t dsm_left_mirror_up_down_sts;

    /**
     * 
     *
     * Range: 0..255 (0..127.5 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t dsm_left_mirror_left_right_sts;

    /**
     * 
     *
     * Range: 0..255 (0..127.5 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t dsm_right_mirror_left_right_sts;

    /**
     * 
     *
     * Range: 0..255 (0..127.5 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t dsm_right_mirror_up_down_sts;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dsm_rolling_counter_334;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dsm_crc_check_334;
};

/**
 * Signals in message GW_395.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_395_t {
    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_remote_engine_startup_req;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_engine_startup_inhibit;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_lock_command;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_vehicle_vedio_detect_req;

    /**
     * GW±¨ÎÄ×ª·¢£¨ÓÃÓÚ2GTBOX£©
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_car_remind;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_audio_request;

    /**
     * GW±¨ÎÄ×ª·¢ 4GTBOX²»·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_change_part_status;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_ese_updata_hu_wake_up_req;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_call_status;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_b_call_status;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..31 (0..31 degreeC)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_ac_temp_value_req;

    /**
     * GW±¨ÎÄ×ª·¢
     * 4GTBOX²»·¢ËÍ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_vehicle_status_demand_req;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_remote_start_run_time;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_vin_match_status;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_vin_req;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_search_car_req;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_rmote_trunk;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_rmote_roof;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_remote_ac_startup_req;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_remote_steer_wheel_hot_req;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_remote_driver_seat_hot_req;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_remote_passanger_seat_hot_req;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_remote_detect_req;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_remote_air_clean_req;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_remote_dis_req;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_remote_air_quality_inquire;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_remote_dr_ventilatie_req;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_remote_pa_ventilatie_req;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_remote_install_req;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_ap_amodule_enable;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_apa_maneuver_cancel;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_apa_maneuver_start;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_apa_maneuver_suspend;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_apapoc_mode_select;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_apa_fuction_selection;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_verticalbackward;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_verticalforward;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_apa_video_delay;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_apa_signal_delay;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_turn_right;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_turn_left;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_apa_remote_drive_req;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_signal_type;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_signal_strength;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_hzp_function_req;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_hzp_control_enable;

    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_avm_display_form;

    /**
     * 
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t t_box_messsage_counter_395;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t t_box_reset_flag_395;

    /**
     * 
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t t_box_authenticator_395;
};

/**
 * Signals in message GW_18A.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_18_a_t {
    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_ap_adriver_interruption;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcu_apa_shift_gear_request_enable;
};

/**
 * Signals in message GW_24A.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_24_a_t {
    /**
     * ACM½ÓÊÕÎªAT×¨ÓÃ
     * Ô­ÐÅºÅÃû³ÆESL_ShiftLeverPositon£¬CD569¡¢S202DAÊ¹ÓÃ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esl_shift_lever_positionrequest;

    /**
     * TCU½ÓÊÕÎªDCT×¨ÓÃ
     * ACM½ÓÊÕÎªAT×¨ÓÃ
     * Ô­ÐÅºÅÃû³ÆESL_UnLockButtonPosition£¬CD569¡¢S202DAÊ¹ÓÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esl_un_lock_button_position_status;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esl_epb_button_position_status;

    /**
     * ACM½ÓÊÕÎªAT×¨ÓÃ
     * Ô­ÐÅºÅÃû³ÆESL_DriveModePosition£¬CD569¡¢S202DAÊ¹ÓÃ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esl_drive_mode_request;

    /**
     * TCU½ÓÊÕÎªDCT×¨ÓÃ
     * ACM½ÓÊÕÎªAT×¨ÓÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esl_driver_park_request;

    /**
     * TCU½ÓÊÕÎªDCT×¨ÓÃ
     * ACM½ÓÊÕÎªAT×¨ÓÃ
     * Ô­ÐÅºÅÃû³ÆESL_ShiftLeverStatus£¬CD569¡¢S202DAÊ¹ÓÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esl_shift_lever_position_fault_sts;

    /**
     * TCU½ÓÊÕÎªDCT×¨ÓÃ
     * ACM½ÓÊÕÎªAT×¨ÓÃ
     * Ô­ÐÅºÅÃû³ÆESL_DriveModeStatus£¬CD569¡¢S202DAÊ¹ÓÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esl_drive_mode_fault_status;

    /**
     * TCU½ÓÊÕÎªDCT×¨ÓÃ
     * ACM½ÓÊÕÎªAT×¨ÓÃ
     * Ô­ÐÅºÅÃû³ÆESL_DriverParkButtonStatus£¬CD569¡¢S202DAÊ¹ÓÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esl_driver_park_button_fault_status;

    /**
     * TCU½ÓÊÕÎªDCT×¨ÓÃ
     * ACM½ÓÊÕÎªAT×¨ÓÃ
     * Ô­ÐÅºÅÃû³ÆESL_UnLockButtonStatus£¬CD569¡¢S202DAÊ¹ÓÃ
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esl_un_lock_button_fault_status;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esl_epb_button_fault_status;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esl_hall_status;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esl_reset_sts;

    /**
     * ¸ù¾ÝTCUÐèÇóÐÂÔö£¨HF140£©
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esl_tcugear_ref;

    /**
     * ACM½ÓÊÕÎªAT×¨ÓÃ
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esl_rolling_counter_24_a;

    /**
     * ACM½ÓÊÕÎªAT×¨ÓÃ
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esl_crc_check_24_a;
};

/**
 * Signals in message GW_25C.
 *
 * GW×Ô·¢ 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_25_c_t {
    /**
     * 
     *
     * Range: 0..4194303 (0..4194303 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t gw_trip_counter_25_c;

    /**
     * 
     *
     * Range: 0..16777215 (0..16777215 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t gw_reset_counter_25_c;

    /**
     * 
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t gw_authernticator_25_c;
};

/**
 * Signals in message GW_2D7.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_2_d7_t {
    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..360 (0..360 ¡ã)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_3_d_hor_angle_req;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_display_vision;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_av_mswitch;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_mode;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_avm_triggermethod;

    /**
     * GW±¨ÎÄ×ª·¢
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_screen_operate_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_dvr_driving_play_switch_status;
};

/**
 * Signals in message GW_341.
 *
 * Ô´¶ËHybridA_PCU_33B,1 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_341_t {
    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..65535 (-32768..32767 Nm)
     * Scale: 1
     * Offset: -32768
     */
    uint16_t pcu_pwr_tq_wh_min_total;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..65535 (-32768..32767 Nm)
     * Scale: 1
     * Offset: -32768
     */
    uint16_t pcu_pwr_tq_wh_max_total;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_pwr_tq_wh_min_vld;

    /**
     * ACC Ö÷¿ØÔòACC½ÓÊÕ£¬LAS Ö÷¿ØÔòLAS½ÓÊÕ
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_pwr_tq_wh_max_vld;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_acc_ped_shield;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_rolling_counter_341;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_crc_check_341;
};

/**
 * Signals in message GW_3D6.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_3_d6_t {
    /**
     * ÎÆ²¨·À¼Ð
     *
     * Range: 0..255 (0..127.5 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t slcm_rr_window_status;

    /**
     * ÎÆ²¨·À¼Ð
     *
     * Range: 0..255 (0..127.5 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t slcm_fr_window_status;
};

/**
 * Signals in message GW_3D8.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_3_d8_t {
    /**
     * ÎÆ²¨·À¼Ð
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t slcm_rl_win_motor;

    /**
     * ÎÆ²¨·À¼Ð
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t slcm_driver_win_motor;

    /**
     * ÎÆ²¨·À¼Ð
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t slcm_rl_window_switch;

    /**
     * ÎÆ²¨·À¼Ð
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t slcm_driver_window_switch;

    /**
     * ÎÆ²¨·À¼Ð
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t slcm_rl_window_ap_actice;

    /**
     * ÎÆ²¨·À¼Ð
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t slcm_driver_window_ap_actice;

    /**
     * ÎÆ²¨·À¼Ð
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t slcm_rl_window_initialized_sts;

    /**
     * ÎÆ²¨·À¼Ð
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t slcm_driver_window_initialized_sts;

    /**
     * ÎÆ²¨·À¼Ð
     *
     * Range: 0..255 (0..127.5 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t slcm_rl_window_status;

    /**
     * ÎÆ²¨·À¼Ð
     *
     * Range: 0..255 (0..127.5 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t slcm_driver_window_status;

    /**
     * ÎÆ²¨·À¼Ð
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t slcm_fail_status;
};

/**
 * Signals in message GW_3DE.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_3_de_t {
    /**
     * 
     *
     * Range: 0..255 (0..127.5 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t dsm_dsm_horizontal_position_sts;

    /**
     * 
     *
     * Range: 0..255 (0..127.5 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t dsm_dsm_front_end_position_sts;

    /**
     * 
     *
     * Range: 0..255 (0..127.5 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t dsm_dsm_vertical_position_sts;

    /**
     * 
     *
     * Range: 0..255 (0..127.5 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t dsm_dsm_backrest_position_sts;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dsm_rolling_counter_3_de;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dsm_crc_check_3_de;
};

/**
 * Signals in message GW_3EE.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_3_ee_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gw_saf_cert_sts;
};

/**
 * Signals in message GW_6B0.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_6_b0_t {
    /**
     * ×î´óÖµÊÇÎª×ªDBCÊ¹ÓÃ
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t gw_apa_authentication_status;
};

/**
 * Signals in message ACC_2D3.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_acc_2_d3_t {
    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_status_for_srs;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_active_for_srs;

    /**
     * ¸ºÊý´ú±íÏòºó£¬ÕýÊý´ú±íÏòÇ°£¬Ô­µãÎªÇ°À×´ï²¨Êø·¢Éä
     *
     * Range: 0..500 (-70..180 m)
     * Scale: 0.5
     * Offset: -70
     */
    uint16_t acc_aeb_target_lng_range_for_srs;

    /**
     * Ç°·½Ä¿±ê±È±¾³µ¿ìÎªÕý£¬Ç°·½Ä¿±ê±È±¾³µÂýÎª¸º
     *
     * Range: 0..500 (-250..250 km/h)
     * Scale: 1
     * Offset: -250
     */
    uint16_t acc_aeb_target_rel_speed_for_srs;

    /**
     * Åö×²Ê±¿ÌÎª0
     *
     * Range: 0..249 (0.01..2.5 s)
     * Scale: 0.01
     * Offset: 0.01
     */
    uint8_t acc_aeb_target_ttc_for_srs;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_target_type_for_srs;

    /**
     * 
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_aeb_target_prob_for_srs;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_282;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_checkr_282;

    /**
     * Ïò×óÎªÕý£¬ÏòÓÒÎª
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_aeb_target_lat_range_for_srs;

    /**
     * Ïò×óÎªÕý£¬ÏòÓÒÎª
     *
     * Range: 0..1023 (-64..63.875 m/s)
     * Scale: 0.125
     * Offset: -64
     */
    uint16_t acc_aeb_target_lat_rel_speed_for_srs;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_rolling_counter_283;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_crc_check_283;
};

/**
 * Signals in message ACC_301.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_acc_301_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_reset_sts;
};

/**
 * Signals in message LAS_30C.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_las_30_c_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t las_reset_sts;
};

/**
 * Signals in message GW_2E2.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_2_e2_t {
    /**
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj1_track_id;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj1_type;

    /**
     * Range: 0..1200 (0..12 m)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t rlr_elk_obj1_width;

    /**
     * Range: 0..511 (0..5.11 m)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t rlr_elk_obj1_height;

    /**
     * Range: 0..510 (0..25.5 m)
     * Scale: 0.05
     * Offset: 0
     */
    uint16_t rlr_elk_obj1_length;

    /**
     * Range: 0..628 (-3.14..3.14 rad)
     * Scale: 0.01
     * Offset: -3.14
     */
    uint16_t rlr_elk_obj1_heading_angle;

    /**
     * Range: 0..2047 (-128..127.875 m)
     * Scale: 0.125
     * Offset: -128
     */
    uint16_t rlr_elk_obj1_dy;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj1_ref_point_loc;

    /**
     * Range: 0..8191 (-256..255.938 m)
     * Scale: 0.0625
     * Offset: -256
     */
    uint16_t rlr_elk_obj1_dx;

    /**
     * Range: 0..1023 (-64..63.875 m/s)
     * Scale: 0.125
     * Offset: -64
     */
    uint16_t rlr_elk_obj1_rel_vy;

    /**
     * Range: 0..4095 (-128..127.938 m/s)
     * Scale: 0.0625
     * Offset: -128
     */
    uint16_t rlr_elk_obj1_rel_vx;

    /**
     * Range: 0..1023 (-16..15.9688 m/s2)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t rlr_elk_obj1_rel_ay;

    /**
     * Range: 0..511 (-16..15.9375 m/s2)
     * Scale: 0.0625
     * Offset: -16
     */
    uint16_t rlr_elk_obj1_rel_ax;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj1_location;

    /**
     * Range: 0..50 (0..100 %)
     * Scale: 2
     * Offset: 0
     */
    uint8_t rlr_elk_obj1_exist_prob;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj1_measured;

    /**
     * Range: 0..50 (0..100 %)
     * Scale: 2
     * Offset: 0
     */
    uint8_t rlr_elk_obj1_obstacle_prob;

    /**
     * Range: 0..2047 (-128..127.875 m)
     * Scale: 0.125
     * Offset: -128
     */
    uint16_t rlr_elk_obj1_ref_point_dy;

    /**
     * Range: 0..8191 (-256..255.938 m)
     * Scale: 0.0625
     * Offset: -256
     */
    uint16_t rlr_elk_obj1_ref_point_dx;

    /**
     * Range: 0..50 (0..100 %)
     * Scale: 2
     * Offset: 0
     */
    uint8_t rlr_elk_obj2_obstacle_prob;

    /**
     * Range: 0..2047 (-128..127.875 m)
     * Scale: 0.125
     * Offset: -128
     */
    uint16_t rlr_elk_obj2_ref_point_dy;

    /**
     * Range: 0..8191 (-256..255.938 m)
     * Scale: 0.0625
     * Offset: -256
     */
    uint16_t rlr_elk_obj2_ref_point_dx;

    /**
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj2_track_id;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj2_type;

    /**
     * Range: 0..1200 (0..12 m)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t rlr_elk_obj2_width;

    /**
     * Range: 0..511 (0..5.11 m)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t rlr_elk_obj2_height;

    /**
     * Range: 0..510 (0..25.5 m)
     * Scale: 0.05
     * Offset: 0
     */
    uint16_t rlr_elk_obj2_length;

    /**
     * Range: 0..628 (-3.14..3.14 rad)
     * Scale: 0.01
     * Offset: -3.14
     */
    uint16_t rlr_elk_obj2_heading_angle;

    /**
     * Range: 0..2047 (-128..127.875 m)
     * Scale: 0.125
     * Offset: -128
     */
    uint16_t rlr_elk_obj2_dy;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj2_ref_point_loc;

    /**
     * Range: 0..8191 (-256..255.938 m)
     * Scale: 0.0625
     * Offset: -256
     */
    uint16_t rlr_elk_obj2_dx;

    /**
     * Range: 0..1023 (-64..63.875 m/s)
     * Scale: 0.125
     * Offset: -64
     */
    uint16_t rlr_elk_obj2_rel_vy;

    /**
     * Range: 0..4095 (-128..127.938 m/s)
     * Scale: 0.0625
     * Offset: -128
     */
    uint16_t rlr_elk_obj2_rel_vx;

    /**
     * Range: 0..1023 (-16..15.9688 m/s2)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t rlr_elk_obj2_rel_ay;

    /**
     * Range: 0..511 (-16..15.9375 m/s2)
     * Scale: 0.0625
     * Offset: -16
     */
    uint16_t rlr_elk_obj2_rel_ax;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj2_location;

    /**
     * Range: 0..50 (0..100 %)
     * Scale: 2
     * Offset: 0
     */
    uint8_t rlr_elk_obj2_exist_prob;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj2_measured;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_rolling_counter_2_e2;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t rlr_crc_check_2_e2;
};

/**
 * Signals in message GW_2E3.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_2_e3_t {
    /**
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj3_track_id;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj3_type;

    /**
     * Range: 0..1200 (0..12 m)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t rlr_elk_obj3_width;

    /**
     * Range: 0..511 (0..5.11 m)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t rlr_elk_obj3_height;

    /**
     * Range: 0..510 (0..25.5 m)
     * Scale: 0.05
     * Offset: 0
     */
    uint16_t rlr_elk_obj3_length;

    /**
     * Range: 0..628 (-3.14..3.14 rad)
     * Scale: 0.01
     * Offset: -3.14
     */
    uint16_t rlr_elk_obj3_heading_angle;

    /**
     * Range: 0..2047 (-128..127.875 m)
     * Scale: 0.125
     * Offset: -128
     */
    uint16_t rlr_elk_obj3_dy;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj3_ref_point_loc;

    /**
     * Range: 0..8191 (-256..255.938 m)
     * Scale: 0.0625
     * Offset: -256
     */
    uint16_t rlr_elk_obj3_dx;

    /**
     * Range: 0..1023 (-64..63.875 m/s)
     * Scale: 0.125
     * Offset: -64
     */
    uint16_t rlr_elk_obj3_rel_vy;

    /**
     * Range: 0..4095 (-128..127.938 m/s)
     * Scale: 0.0625
     * Offset: -128
     */
    uint16_t rlr_elk_obj3_rel_vx;

    /**
     * Range: 0..1023 (-16..15.9688 m/s2)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t rlr_elk_obj3_rel_ay;

    /**
     * Range: 0..511 (-16..15.9375 m/s2)
     * Scale: 0.0625
     * Offset: -16
     */
    uint16_t rlr_elk_obj3_rel_ax;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj3_location;

    /**
     * Range: 0..50 (0..100 %)
     * Scale: 2
     * Offset: 0
     */
    uint8_t rlr_elk_obj3_exist_prob;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj3_measured;

    /**
     * Range: 0..50 (0..100 %)
     * Scale: 2
     * Offset: 0
     */
    uint8_t rlr_elk_obj3_obstacle_prob;

    /**
     * Range: 0..2047 (-128..127.875 m)
     * Scale: 0.125
     * Offset: -128
     */
    uint16_t rlr_elk_obj3_ref_point_dy;

    /**
     * Range: 0..8191 (-256..255.938 m)
     * Scale: 0.0625
     * Offset: -256
     */
    uint16_t rlr_elk_obj3_ref_point_dx;

    /**
     * Range: 0..50 (0..100 %)
     * Scale: 2
     * Offset: 0
     */
    uint8_t rlr_elk_obj4_obstacle_prob;

    /**
     * Range: 0..2047 (-128..127.875 m)
     * Scale: 0.125
     * Offset: -128
     */
    uint16_t rlr_elk_obj4_ref_point_dy;

    /**
     * Range: 0..8191 (-256..255.938 m)
     * Scale: 0.0625
     * Offset: -256
     */
    uint16_t rlr_elk_obj4_ref_point_dx;

    /**
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj4_track_id;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj4_type;

    /**
     * Range: 0..1200 (0..12 m)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t rlr_elk_obj4_width;

    /**
     * Range: 0..511 (0..5.11 m)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t rlr_elk_obj4_height;

    /**
     * Range: 0..510 (0..25.5 m)
     * Scale: 0.05
     * Offset: 0
     */
    uint16_t rlr_elk_obj4_length;

    /**
     * Range: 0..628 (-3.14..3.14 rad)
     * Scale: 0.01
     * Offset: -3.14
     */
    uint16_t rlr_elk_obj4_heading_angle;

    /**
     * Range: 0..2047 (-128..127.875 m)
     * Scale: 0.125
     * Offset: -128
     */
    uint16_t rlr_elk_obj4_dy;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj4_ref_point_loc;

    /**
     * Range: 0..8191 (-256..255.938 m)
     * Scale: 0.0625
     * Offset: -256
     */
    uint16_t rlr_elk_obj4_dx;

    /**
     * Range: 0..1023 (-64..63.875 m/s)
     * Scale: 0.125
     * Offset: -64
     */
    uint16_t rlr_elk_obj4_rel_vy;

    /**
     * Range: 0..4095 (-128..127.938 m/s)
     * Scale: 0.0625
     * Offset: -128
     */
    uint16_t rlr_elk_obj4_rel_vx;

    /**
     * Range: 0..1023 (-16..15.9688 m/s2)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t rlr_elk_obj4_rel_ay;

    /**
     * Range: 0..511 (-16..15.9375 m/s2)
     * Scale: 0.0625
     * Offset: -16
     */
    uint16_t rlr_elk_obj4_rel_ax;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj4_location;

    /**
     * Range: 0..50 (0..100 %)
     * Scale: 2
     * Offset: 0
     */
    uint8_t rlr_elk_obj4_exist_prob;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_elk_obj4_measured;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rlr_rolling_counter_2_e3;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t rlr_crc_check_2_e3;
};

/**
 * Signals in message GW_2C9.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_2_c9_t {
    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..1920 (0..1920 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_xlevel;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..1920 (0..1920 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hu_ylevel;

    /**
     * 513(ÖÜÆÚ)ºÍ514(ÊÂ¼þ)£¬µ±Ç°¶àÊýÏîÄ¿Ê¹ÓÃ514(ÊÂ¼þ)±¨ÎÄ¡£
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_interface_change_singnal;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_novice_response;
};

/**
 * Signals in message GW_761.
 *
 * CANFDÕï¶ÏÒÇÊ¹ÓÃ 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_761_t {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t diagnose_message761;
};

/**
 * Signals in message GW_57D.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_57_d_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hu_apa_on_off;
};

/**
 * Signals in message GW_518.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_518_t {
    /**
     * ÎÞÐ§ÖµÊÇÎª×ªDBC
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_car_mode;
};

/**
 * Signals in message GW_2AE.
 *
 * Ô´¶ËADASB_RLR/LCDAL_2AD,0 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_2_ae_t {
    /**
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lcdal_system_status;
};

/**
 * Signals in message LAS_3D9.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_las_3_d9_t {
    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target1_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target1_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target1_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target1_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target2_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target2_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target2_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target2_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target3_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target3_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target3_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target3_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target4_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target4_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target4_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target4_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target5_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target5_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target5_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target5_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target6_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target6_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target6_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target6_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target7_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target7_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target7_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target7_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target8_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target8_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target8_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target8_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target9_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target9_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target9_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target9_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target10_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target10_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target10_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target10_id;
};

/**
 * Signals in message LAS_3DB.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_las_3_db_t {
    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target11_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target11_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target11_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target11_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target12_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target12_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target12_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target12_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target13_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target13_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target13_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target13_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target14_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target14_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target14_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target14_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target15_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target15_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target15_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target15_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target16_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target16_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target16_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target16_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target17_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target17_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target17_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target17_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target18_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target18_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target18_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target18_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target19_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target19_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target19_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target19_id;

    /**
     * ×ÝÏò¾àÀëÏòÇ°ÎªÕý£¬ÏòºóÎª¸º
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1400 (-20..120 m)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t acc_obs_target20_lng_range;

    /**
     * ºáÏò¾àÀëÏò×óÎª¸º£¬ÏòÓÒÎªÕý
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..1000 (-50..50 m)
     * Scale: 0.1
     * Offset: -50
     */
    uint16_t acc_obs_target20_lat_range;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target20_type;

    /**
     * 800WÉãÏñÍ·Ê¹ÓÃ
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_obs_target20_id;
};

/**
 * Signals in message GW_371.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_371_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_drv_mod2;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_special_mode_set_fb;
};

/**
 * Signals in message GW_31C.
 *
 * Ô´¶ËHybridA_PCU/PDCU_3FC.6 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_31_c_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_power_output_sts;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pcu_vcu_rdy_sts;
};

/**
 * Signals in message GW_10A.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_10_a_t {
    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_fail_status;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_status;

    /**
     * Range: 0..31 (0..31 KN)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_achieved_clamp_force;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_switch_position;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_switch_position_valid;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_rwu_parking_active_for_acc;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_rwu_parking_avail_for_acc;

    /**
     * APAÅäÖÃ½ÓÊÕ·½ÎÞBDC
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_ap_arequest_available;

    /**
     * 
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_rolling_counter_10_a;

    /**
     * 
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_crc_check_10_a;
};

/**
 * Signals in message BDC_400.
 *
 * Diag--VDC--I/O 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_bdc_400_t {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_message400;
};

/**
 * Signals in message ACC_453.
 *
 * Diag--VDC--ADAS1 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_acc_453_t {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nm_message453;
};

/**
 * Signals in message GW_7DF.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_7_df_t {
    /**
     * Range: 1..1 (1..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t diagnose_message7_df;
};

/**
 * Signals in message GW_15D.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_15_d_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_imu_calibrated;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_rolling_counter_278;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esp_crc_check_278;
};

/**
 * Signals in message GW_10F.
 *
 * Ô´¶ËCHS_IBCU_1CB,0 
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_10_f_t {
    /**
     * Range: 0..3328 (-5..47 mm)
     * Scale: 0.015625
     * Offset: -5
     */
    uint16_t ibcu_s_output_rod_driver;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ibcu_s_output_rod_driver_q;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ibcu_s_output_rod_act_q;

    /**
     * Range: 0..3328 (-5..47 mm)
     * Scale: 0.015625
     * Offset: -5
     */
    uint16_t ibcu_s_output_rod_act;
};

/**
 * Signals in message GW_32A.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_32_a_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trm_connect_sts;
};

/**
 * Signals in message GW_3BE.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_3_be_t {
    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ats_current_driving_mode;
};

/**
 * Signals in message GW_37A.
 *
 *  
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_gw_37_a_t {
    /**
     * 
     *
     * Range: 0..9 (0..9 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vmc_ecas_mode;

    /**
     * 
     *
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vmc_ecdc_mode;

    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vmc_ecas_mode_val;

    /**
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vmc_ecas_mode_cha_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vmc_ctrl_level_fr_valid;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vmc_ctrl_level_fl_valid;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vmc_ecas_mode_frt_sts;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vmc_ecas_mode_rel_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vmc_ctrl_level_rr_valid;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vmc_ctrl_level_r_ly_valid;

    /**
     * 
     *
     * Range: 0..65534 (-327.67..327.67 mm)
     * Scale: 0.01
     * Offset: -327.67
     */
    uint16_t vmc_ctrl_level_fl;

    /**
     * 
     *
     * Range: 0..65534 (-327.67..327.67 mm)
     * Scale: 0.01
     * Offset: -327.67
     */
    uint16_t vmc_ctrl_level_fr;

    /**
     * Range: 0..65534 (-327.67..327.67 -)
     * Scale: 0.01
     * Offset: -327.67
     */
    uint16_t vmc_lvl_tar_rl;

    /**
     * Range: 0..65534 (-327.67..327.67 -)
     * Scale: 0.01
     * Offset: -327.67
     */
    uint16_t vmc_lvl_tar_rr;

    /**
     * 
     *
     * Range: 0..65534 (-327.67..327.67 mm)
     * Scale: 0.01
     * Offset: -327.67
     */
    uint16_t vmc_ctrl_level_rl;

    /**
     * 
     *
     * Range: 0..65534 (-327.67..327.67 mm)
     * Scale: 0.01
     * Offset: -327.67
     */
    uint16_t vmc_ctrl_level_rr;

    /**
     * Range: 0..65534 (-327.67..327.67 -)
     * Scale: 0.01
     * Offset: -327.67
     */
    uint16_t vmc_lvl_tar_fl;

    /**
     * Range: 0..65534 (-327.67..327.67 -)
     * Scale: 0.01
     * Offset: -327.67
     */
    uint16_t vmc_lvl_tar_fr;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vmc_rolling_counter_37_a;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vmc_crc_check_37_a;
};

/**
 * Pack message ACC_382.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_acc_382_pack(
    uint8_t *dst_p,
    const struct ecu_acc_382_t *src_p,
    size_t size);

/**
 * Unpack message ACC_382.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_acc_382_unpack(
    struct ecu_acc_382_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_382.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_acc_382_init(struct ecu_acc_382_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_rolling_counter_35_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_rolling_counter_35_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_rolling_counter_35_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_crc_check_35_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_crc_check_35_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_crc_check_35_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_rolling_counter_35_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_rolling_counter_35_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_rolling_counter_35_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_crc_check_35_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_crc_check_35_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_crc_check_35_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_lane_quality_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_lane_quality_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_lane_quality_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_lane_equation_c1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_lane_equation_c1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_lane_equation_c1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_lane_equation_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_lane_equation_c2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_lane_equation_c2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_lane_equation_c3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_lane_equation_c3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_lane_equation_c3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_lane_equation_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_lane_equation_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_lane_equation_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_rolling_counter_3_e6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_rolling_counter_3_e6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_rolling_counter_3_e6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_crc_check_3_e6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_crc_check_3_e6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_crc_check_3_e6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target1_detection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target1_detection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target1_detection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target1_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target1_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target1_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target1_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target1_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target1_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target1_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target1_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target1_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_target1_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target1_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target1_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_target1_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target1_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target1_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_target1_heading_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target1_heading_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target1_heading_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target1_zone_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target1_zone_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target1_zone_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target2_detection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target2_detection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target2_detection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target2_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target2_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target2_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target2_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target2_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target2_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_target2_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target2_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target2_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_target2_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target2_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target2_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target2_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target2_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target2_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_target2_heading_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target2_heading_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target2_heading_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target2_zone_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target2_zone_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target2_zone_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target3_detection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target3_detection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target3_detection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target3_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target3_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target3_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target3_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target3_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target3_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_target3_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target3_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target3_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_target3_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target3_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target3_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target3_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target3_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target3_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_target3_heading_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target3_heading_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target3_heading_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target3_zone_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target3_zone_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target3_zone_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target4_detection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target4_detection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target4_detection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target4_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target4_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target4_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target4_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target4_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target4_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_target4_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target4_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target4_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_target4_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target4_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target4_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target4_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target4_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target4_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_target4_heading_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target4_heading_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target4_heading_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target4_zone_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target4_zone_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target4_zone_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target5_detection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target5_detection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target5_detection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target5_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target5_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target5_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target5_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target5_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target5_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_target5_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target5_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target5_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_target5_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target5_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target5_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target5_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target5_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target5_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_target5_heading_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target5_heading_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target5_heading_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_382_acc_target5_zone_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_target5_zone_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_target5_zone_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_382_acc_tar_veh_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_382_acc_tar_veh_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_382_acc_tar_veh_lng_range_is_in_range(uint16_t value);

/**
 * Pack message GW_2A4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_2_a4_pack(
    uint8_t *dst_p,
    const struct ecu_gw_2_a4_t *src_p,
    size_t size);

/**
 * Unpack message GW_2A4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_2_a4_unpack(
    struct ecu_gw_2_a4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_2A4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_2_a4_init(struct ecu_gw_2_a4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_a4_lcdar_bsd_lca_sound_war_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_a4_lcdar_bsd_lca_sound_war_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_a4_lcdar_bsd_lca_sound_war_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_a4_lcdar_left_rcta_alert_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_a4_lcdar_left_rcta_alert_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_a4_lcdar_left_rcta_alert_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_a4_lcdar_system_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_a4_lcdar_system_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_a4_lcdar_system_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_a4_lcdar_rcta_alert_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_a4_lcdar_rcta_alert_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_a4_lcdar_rcta_alert_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_a4_lcdar_rctb_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_a4_lcdar_rctb_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_a4_lcdar_rctb_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_a4_lcdar_rctb_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_a4_lcdar_rctb_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_a4_lcdar_rctb_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_a4_lcdar_rctb_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_a4_lcdar_rctb_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_a4_lcdar_rctb_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_a4_lcdar_left_elk_o_alert_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_a4_lcdar_left_elk_o_alert_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_a4_lcdar_left_elk_o_alert_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_a4_lcdar_elk_o_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_a4_lcdar_elk_o_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_a4_lcdar_elk_o_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_a4_lcdar_elk_o_alert_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_a4_lcdar_elk_o_alert_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_a4_lcdar_elk_o_alert_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_a4_lcdar_rctb_target_decel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_a4_lcdar_rctb_target_decel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_a4_lcdar_rctb_target_decel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_a4_lcdar_rolling_counter_2_af_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_a4_lcdar_rolling_counter_2_af_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_a4_lcdar_rolling_counter_2_af_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_a4_lcdar_crc_check_2_af_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_a4_lcdar_crc_check_2_af_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_a4_lcdar_crc_check_2_af_is_in_range(uint8_t value);

/**
 * Pack message GW_765.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_765_pack(
    uint8_t *dst_p,
    const struct ecu_gw_765_t *src_p,
    size_t size);

/**
 * Unpack message GW_765.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_765_unpack(
    struct ecu_gw_765_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_765.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_765_init(struct ecu_gw_765_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_765_diagnose_message765_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_765_diagnose_message765_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_765_diagnose_message765_is_in_range(uint8_t value);

/**
 * Pack message ACC_76D.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_acc_76_d_pack(
    uint8_t *dst_p,
    const struct ecu_acc_76_d_t *src_p,
    size_t size);

/**
 * Unpack message ACC_76D.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_acc_76_d_unpack(
    struct ecu_acc_76_d_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_76D.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_acc_76_d_init(struct ecu_acc_76_d_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_76_d_diagnose_message76_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_76_d_diagnose_message76_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_76_d_diagnose_message76_d_is_in_range(uint8_t value);

/**
 * Pack message GW_791.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_791_pack(
    uint8_t *dst_p,
    const struct ecu_gw_791_t *src_p,
    size_t size);

/**
 * Unpack message GW_791.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_791_unpack(
    struct ecu_gw_791_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_791.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_791_init(struct ecu_gw_791_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_791_diagnose_message791_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_791_diagnose_message791_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_791_diagnose_message791_is_in_range(uint8_t value);

/**
 * Pack message ACC_799.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_acc_799_pack(
    uint8_t *dst_p,
    const struct ecu_acc_799_t *src_p,
    size_t size);

/**
 * Unpack message ACC_799.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_acc_799_unpack(
    struct ecu_acc_799_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_799.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_acc_799_init(struct ecu_acc_799_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_799_diagnose_message799_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_799_diagnose_message799_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_799_diagnose_message799_is_in_range(uint8_t value);

/**
 * Pack message GW_752.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_752_pack(
    uint8_t *dst_p,
    const struct ecu_gw_752_t *src_p,
    size_t size);

/**
 * Unpack message GW_752.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_752_unpack(
    struct ecu_gw_752_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_752.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_752_init(struct ecu_gw_752_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_752_diagnose_message752_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_752_diagnose_message752_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_752_diagnose_message752_is_in_range(uint8_t value);

/**
 * Pack message LAS_75A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_las_75_a_pack(
    uint8_t *dst_p,
    const struct ecu_las_75_a_t *src_p,
    size_t size);

/**
 * Unpack message LAS_75A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_las_75_a_unpack(
    struct ecu_las_75_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LAS_75A.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_las_75_a_init(struct ecu_las_75_a_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_75_a_diagnose_message75_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_75_a_diagnose_message75_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_75_a_diagnose_message75_a_is_in_range(uint8_t value);

/**
 * Pack message GW_763.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_763_pack(
    uint8_t *dst_p,
    const struct ecu_gw_763_t *src_p,
    size_t size);

/**
 * Unpack message GW_763.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_763_unpack(
    struct ecu_gw_763_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_763.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_763_init(struct ecu_gw_763_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_763_diagnose_message763_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_763_diagnose_message763_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_763_diagnose_message763_is_in_range(uint8_t value);

/**
 * Pack message LAS_76B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_las_76_b_pack(
    uint8_t *dst_p,
    const struct ecu_las_76_b_t *src_p,
    size_t size);

/**
 * Unpack message LAS_76B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_las_76_b_unpack(
    struct ecu_las_76_b_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LAS_76B.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_las_76_b_init(struct ecu_las_76_b_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_76_b_diagnose_message76_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_76_b_diagnose_message76_b_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_76_b_diagnose_message76_b_is_in_range(uint8_t value);

/**
 * Pack message LAS_592.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_las_592_pack(
    uint8_t *dst_p,
    const struct ecu_las_592_t *src_p,
    size_t size);

/**
 * Unpack message LAS_592.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_las_592_unpack(
    struct ecu_las_592_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LAS_592.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_las_592_init(struct ecu_las_592_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_592_las_wake_up_byte4_bit1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_592_las_wake_up_byte4_bit1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_592_las_wake_up_byte4_bit1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_592_las_wake_up_byte4_bit0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_592_las_wake_up_byte4_bit0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_592_las_wake_up_byte4_bit0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_592_las_not_sleep_byte7_bit1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_592_las_not_sleep_byte7_bit1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_592_las_not_sleep_byte7_bit1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_592_las_not_sleep_byte7_bit0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_592_las_not_sleep_byte7_bit0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_592_las_not_sleep_byte7_bit0_is_in_range(uint8_t value);

/**
 * Pack message ACC_594.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_acc_594_pack(
    uint8_t *dst_p,
    const struct ecu_acc_594_t *src_p,
    size_t size);

/**
 * Unpack message ACC_594.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_acc_594_unpack(
    struct ecu_acc_594_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_594.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_acc_594_init(struct ecu_acc_594_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_594_fr_wake_up_byte4_bit1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_594_fr_wake_up_byte4_bit1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_594_fr_wake_up_byte4_bit1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_594_fr_wake_up_byte4_bit0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_594_fr_wake_up_byte4_bit0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_594_fr_wake_up_byte4_bit0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_594_fr_not_sleep_byte7_bit1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_594_fr_not_sleep_byte7_bit1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_594_fr_not_sleep_byte7_bit1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_594_fr_not_sleep_byte7_bit0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_594_fr_not_sleep_byte7_bit0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_594_fr_not_sleep_byte7_bit0_is_in_range(uint8_t value);

/**
 * Pack message GW_50.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_50_pack(
    uint8_t *dst_p,
    const struct ecu_gw_50_t *src_p,
    size_t size);

/**
 * Unpack message GW_50.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_50_unpack(
    struct ecu_gw_50_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_50.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_50_init(struct ecu_gw_50_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_50_srs_crash_output_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_50_srs_crash_output_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_50_srs_crash_output_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_50_srs_crash_output_status_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_50_srs_crash_output_status_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_50_srs_crash_output_status_check_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_50_srs_driver_buckle_switch_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_50_srs_driver_buckle_switch_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_50_srs_driver_buckle_switch_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_50_srs_passenger_buckle_switch_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_50_srs_passenger_buckle_switch_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_50_srs_passenger_buckle_switch_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_50_srs_left_rear_buckle_switch_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_50_srs_left_rear_buckle_switch_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_50_srs_left_rear_buckle_switch_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_50_srs_warning_lamp_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_50_srs_warning_lamp_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_50_srs_warning_lamp_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_50_srs_pad_indication_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_50_srs_pad_indication_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_50_srs_pad_indication_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_50_srs_middle_rear_buckle_switch_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_50_srs_middle_rear_buckle_switch_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_50_srs_middle_rear_buckle_switch_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_50_srs_front_psg_occupancy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_50_srs_front_psg_occupancy_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_50_srs_front_psg_occupancy_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_50_srs_right_rear_buckle_switch_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_50_srs_right_rear_buckle_switch_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_50_srs_right_rear_buckle_switch_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_50_srs_rolling_counter_id050_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_50_srs_rolling_counter_id050_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_50_srs_rolling_counter_id050_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_50_srs_crc_check_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_50_srs_crc_check_50_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_50_srs_crc_check_50_is_in_range(uint8_t value);

/**
 * Pack message GW_170.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_170_pack(
    uint8_t *dst_p,
    const struct ecu_gw_170_t *src_p,
    size_t size);

/**
 * Unpack message GW_170.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_170_unpack(
    struct ecu_gw_170_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_170.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_170_init(struct ecu_gw_170_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_170_eps_actual_motor_torq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_170_eps_actual_motor_torq_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_170_eps_actual_motor_torq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_170_eps_max_safety_torsion_bar_torq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_170_eps_max_safety_torsion_bar_torq_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_170_eps_max_safety_torsion_bar_torq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_170_eps_min_safety_torsion_bar_torq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_170_eps_min_safety_torsion_bar_torq_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_170_eps_min_safety_torsion_bar_torq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_170_eps_actual_torsion_bar_torq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_170_eps_actual_torsion_bar_torq_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_170_eps_actual_torsion_bar_torq_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_170_eps_fault_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_170_eps_fault_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_170_eps_fault_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_170_eps_rolling_counter_170_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_170_eps_rolling_counter_170_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_170_eps_rolling_counter_170_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_170_eps_crc_check_170_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_170_eps_crc_check_170_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_170_eps_crc_check_170_is_in_range(uint8_t value);

/**
 * Pack message GW_180.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_180_pack(
    uint8_t *dst_p,
    const struct ecu_gw_180_t *src_p,
    size_t size);

/**
 * Unpack message GW_180.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_180_unpack(
    struct ecu_gw_180_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_180.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_180_init(struct ecu_gw_180_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ecu_gw_180_sas_steering_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_180_sas_steering_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_180_sas_steering_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_180_sas_steering_angle_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_180_sas_steering_angle_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_180_sas_steering_angle_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_180_sas_steering_angle_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_180_sas_steering_angle_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_180_sas_steering_angle_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_180_sas_sas_failure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_180_sas_sas_failure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_180_sas_sas_failure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_180_sas_calibrated_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_180_sas_calibrated_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_180_sas_calibrated_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_180_sas_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_180_sas_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_180_sas_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_180_sas_crc_check_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_180_sas_crc_check_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_180_sas_crc_check_is_in_range(uint8_t value);

/**
 * Pack message ACC_244.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_acc_244_pack(
    uint8_t *dst_p,
    const struct ecu_acc_244_t *src_p,
    size_t size);

/**
 * Unpack message ACC_244.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_acc_244_unpack(
    struct ecu_acc_244_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_244.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_acc_244_init(struct ecu_acc_244_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_acc_target_acceleration_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_acc_target_acceleration_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_acc_target_acceleration_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_lka_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_lka_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_lka_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_ldw_vibration_warning_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_ldw_vibration_warning_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_ldw_vibration_warning_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_ldw_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_ldw_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_ldw_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_emergency_data_rrd_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_emergency_data_rrd_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_emergency_data_rrd_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_ldw_shake_lev_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_ldw_shake_lev_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_ldw_shake_lev_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_dec_to_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_dec_to_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_dec_to_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_text_info_for_driver_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_text_info_for_driver_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_text_info_for_driver_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_cdd_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_cdd_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_cdd_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_driveoff_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_driveoff_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_driveoff_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_acc_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_acc_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_acc_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_rolling_counter_24_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_rolling_counter_24_e_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_rolling_counter_24_e_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_crc_check_24_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_crc_check_24_e_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_crc_check_24_e_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_244_acc_aeb_target_deceleration_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_aeb_target_deceleration_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_aeb_target_deceleration_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_aeb_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_aeb_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_aeb_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_ab_alevel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_ab_alevel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_ab_alevel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_aba_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_aba_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_aba_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_aw_blevel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_aw_blevel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_aw_blevel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_awb_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_awb_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_awb_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_prefill_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_prefill_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_prefill_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_fcw_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_fcw_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_fcw_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_fcw_latent_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_fcw_latent_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_fcw_latent_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_fcw_pre_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_fcw_pre_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_fcw_pre_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_aeb_vehilce_hold_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_aeb_vehilce_hold_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_aeb_vehilce_hold_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_244_acc_acc_trq_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_acc_trq_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_acc_trq_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_acc_trq_req_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_acc_trq_req_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_acc_trq_req_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_aeb_ctrl_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_aeb_ctrl_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_aeb_ctrl_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_rolling_counter_25_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_rolling_counter_25_e_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_rolling_counter_25_e_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_crc_check_25_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_crc_check_25_e_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_crc_check_25_e_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_lng_take_over_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_lng_take_over_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_lng_take_over_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_lat_takeover_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_lat_takeover_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_lat_takeover_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_acc_hands_on_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_acc_hands_on_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_acc_hands_on_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_ads_eomto_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_ads_eomto_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_ads_eomto_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_244_ads_rolling_counter_244_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_ads_rolling_counter_244_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_ads_rolling_counter_244_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_244_ads_crc_check_244_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_244_ads_crc_check_244_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_244_ads_crc_check_244_is_in_range(uint16_t value);

/**
 * Pack message GW_278.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_278_pack(
    uint8_t *dst_p,
    const struct ecu_gw_278_t *src_p,
    size_t size);

/**
 * Unpack message GW_278.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_278_unpack(
    struct ecu_gw_278_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_278.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_278_init(struct ecu_gw_278_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_278_esp_lat_accel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_278_esp_lat_accel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_278_esp_lat_accel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_278_esp_long_accel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_278_esp_long_accel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_278_esp_long_accel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_278_esp_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_278_esp_yaw_rate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_278_esp_yaw_rate_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_278_esp_yaw_rate_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_278_esp_yaw_rate_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_278_esp_yaw_rate_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_278_esp_rolling_counter_278_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_278_esp_rolling_counter_278_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_278_esp_rolling_counter_278_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_278_esp_crc_check_278_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_278_esp_crc_check_278_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_278_esp_crc_check_278_is_in_range(uint8_t value);

/**
 * Pack message GW_298.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_298_pack(
    uint8_t *dst_p,
    const struct ecu_gw_298_t *src_p,
    size_t size);

/**
 * Unpack message GW_298.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_298_unpack(
    struct ecu_gw_298_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_298.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_298_init(struct ecu_gw_298_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_trunk_request_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_trunk_request_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_trunk_request_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_key_learning_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_key_learning_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_key_learning_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_easy_open_orginal_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_easy_open_orginal_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_easy_open_orginal_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_remote_failed_alarm_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_remote_failed_alarm_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_remote_failed_alarm_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_search_car_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_search_car_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_search_car_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_luggage_unlock_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_luggage_unlock_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_luggage_unlock_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_key_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_key_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_key_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_key_authentication_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_key_authentication_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_key_authentication_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_easy_open_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_easy_open_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_easy_open_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_welcomelamp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_welcomelamp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_welcomelamp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_smart_trunk_ulock_remind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_smart_trunk_ulock_remind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_smart_trunk_ulock_remind_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_unlock_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_unlock_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_unlock_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_lock_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_lock_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_lock_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_lock_key_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_lock_key_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_lock_key_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_bcm_trunk_unlock_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_bcm_trunk_unlock_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_bcm_trunk_unlock_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_smart_welcome_light_staus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_smart_welcome_light_staus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_smart_welcome_light_staus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_trunk_key_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_trunk_key_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_trunk_key_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_peps_un_lock_key_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_peps_un_lock_key_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_peps_un_lock_key_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_bcm_driver_door_lock_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_bcm_driver_door_lock_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_bcm_driver_door_lock_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_bcm_passenger_door_lock_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_bcm_passenger_door_lock_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_bcm_passenger_door_lock_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_bcm_left_rear_door_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_bcm_left_rear_door_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_bcm_left_rear_door_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_bcm_rolling_counter_298_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_bcm_rolling_counter_298_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_bcm_rolling_counter_298_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_298_bcm_crc_check_298_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_298_bcm_crc_check_298_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_298_bcm_crc_check_298_is_in_range(uint8_t value);

/**
 * Pack message ACC_307.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_acc_307_pack(
    uint8_t *dst_p,
    const struct ecu_acc_307_t *src_p,
    size_t size);

/**
 * Unpack message ACC_307.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_acc_307_unpack(
    struct ecu_acc_307_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_307.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_acc_307_init(struct ecu_acc_307_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_set_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_set_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_set_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_obj_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_obj_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_obj_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_accep_brequest_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_accep_brequest_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_accep_brequest_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_distance_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_distance_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_distance_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_time_gap_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_time_gap_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_time_gap_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_fcw_setting_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_fcw_setting_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_fcw_setting_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_aeb_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_aeb_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_aeb_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_iacc_suspend_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_iacc_suspend_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_iacc_suspend_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_rolling_counter_35_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_rolling_counter_35_e_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_rolling_counter_35_e_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_crc_check_35_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_crc_check_35_e_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_crc_check_35_e_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_307_acc_acc_target_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_acc_target_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_acc_target_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_aeb_feature_config_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_aeb_feature_config_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_aeb_feature_config_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_f_radar_calibration_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_f_radar_calibration_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_f_radar_calibration_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_307_acc_acc_target_rel_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_acc_target_rel_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_acc_target_rel_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_rolling_counter_322_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_rolling_counter_322_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_rolling_counter_322_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_crc_check_322_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_crc_check_322_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_crc_check_322_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_rolling_counter_344_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_rolling_counter_344_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_rolling_counter_344_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_crc_check_344_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_crc_check_344_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_crc_check_344_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_csl_set_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_csl_set_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_csl_set_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_aeb_target_selected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_aeb_target_selected_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_aeb_target_selected_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_csla_enable_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_csla_enable_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_csla_enable_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_rolling_counter_35_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_rolling_counter_35_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_rolling_counter_35_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_crc_check_35_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_crc_check_35_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_crc_check_35_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_target6_detection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_target6_detection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_target6_detection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_target6_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_target6_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_target6_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_target6_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_target6_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_target6_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_target6_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_target6_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_target6_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_307_acc_target6_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_target6_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_target6_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_307_acc_target6_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_target6_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_target6_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_307_acc_target6_heading_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_target6_heading_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_target6_heading_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_target6_zone_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_target6_zone_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_target6_zone_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_target7_detection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_target7_detection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_target7_detection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_target7_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_target7_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_target7_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_target7_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_target7_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_target7_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_target7_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_target7_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_target7_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_307_acc_target7_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_target7_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_target7_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_307_acc_target7_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_target7_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_target7_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_307_acc_target7_heading_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_target7_heading_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_target7_heading_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_target7_zone_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_target7_zone_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_target7_zone_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_ll_lane_dis_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_ll_lane_dis_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_ll_lane_dis_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_rr_lane_dis_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_rr_lane_dis_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_rr_lane_dis_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_l_lane_distance_fus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_l_lane_distance_fus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_l_lane_distance_fus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_r_lane_distance_fus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_r_lane_distance_fus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_r_lane_distance_fus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_307_acc_vehicle_start_remind_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_307_acc_vehicle_start_remind_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_307_acc_vehicle_start_remind_sts_is_in_range(uint8_t value);

/**
 * Pack message ACC_312.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_acc_312_pack(
    uint8_t *dst_p,
    const struct ecu_acc_312_t *src_p,
    size_t size);

/**
 * Unpack message ACC_312.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_acc_312_unpack(
    struct ecu_acc_312_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_312.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_acc_312_init(struct ecu_acc_312_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_312_acc_selflearning_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_312_acc_selflearning_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_312_acc_selflearning_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_312_acc_aeb_target_prob_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_312_acc_aeb_target_prob_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_312_acc_aeb_target_prob_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_312_acc_aeb_target_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_312_acc_aeb_target_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_312_acc_aeb_target_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_312_acc_aeb_target_detection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_312_acc_aeb_target_detection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_312_acc_aeb_target_detection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_312_acc_aeb_target_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_312_acc_aeb_target_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_312_acc_aeb_target_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_312_acc_rolling_counter_3_e4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_312_acc_rolling_counter_3_e4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_312_acc_rolling_counter_3_e4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_312_acc_crc_check_3_e4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_312_acc_crc_check_3_e4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_312_acc_crc_check_3_e4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_312_ads_eom_warnning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_312_ads_eom_warnning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_312_ads_eom_warnning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_312_ads_ads_voice_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_312_ads_ads_voice_request_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_312_ads_ads_voice_request_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_312_ads_nda_audio_war_enable_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_312_ads_nda_audio_war_enable_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_312_ads_nda_audio_war_enable_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_312_acc_driver_window_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_312_acc_driver_window_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_312_acc_driver_window_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_312_acc_selflearning_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_312_acc_selflearning_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_312_acc_selflearning_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_312_ads_rolling_counter_3_d7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_312_ads_rolling_counter_3_d7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_312_ads_rolling_counter_3_d7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_312_ads_crc_check_3_d7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_312_ads_crc_check_3_d7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_312_ads_crc_check_3_d7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_312_acc_aeb_target_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_312_acc_aeb_target_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_312_acc_aeb_target_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_312_acc_aeb_target_four_wheel_prob_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_312_acc_aeb_target_four_wheel_prob_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_312_acc_aeb_target_four_wheel_prob_is_in_range(uint8_t value);

/**
 * Pack message GW_340.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_340_pack(
    uint8_t *dst_p,
    const struct ecu_gw_340_t *src_p,
    size_t size);

/**
 * Unpack message GW_340.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_340_unpack(
    struct ecu_gw_340_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_340.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_340_init(struct ecu_gw_340_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_340_ac_fr_blow_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_340_ac_fr_blow_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_340_ac_fr_blow_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_340_ac_pr_air_merge_port_opening_ratio_vd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_340_ac_pr_air_merge_port_opening_ratio_vd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_340_ac_pr_air_merge_port_opening_ratio_vd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_340_ac_rr_req_wind_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_340_ac_rr_req_wind_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_340_ac_rr_req_wind_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_340_ac_rr_air_merge_port_opening_ratio_vd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_340_ac_rr_air_merge_port_opening_ratio_vd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_340_ac_rr_air_merge_port_opening_ratio_vd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_340_ac_rr_air_merge_port_opening_ratio_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_340_ac_rr_air_merge_port_opening_ratio_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_340_ac_rr_air_merge_port_opening_ratio_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_340_ac_rr_req_wind_level_vd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_340_ac_rr_req_wind_level_vd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_340_ac_rr_req_wind_level_vd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_340_ac_dr_air_merge_port_opening_ratio_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_340_ac_dr_air_merge_port_opening_ratio_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_340_ac_dr_air_merge_port_opening_ratio_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_340_ac_pr_air_merge_port_opening_ratio_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_340_ac_pr_air_merge_port_opening_ratio_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_340_ac_pr_air_merge_port_opening_ratio_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_340_ac_dr_air_merge_port_opening_ratio_vd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_340_ac_dr_air_merge_port_opening_ratio_vd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_340_ac_dr_air_merge_port_opening_ratio_vd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_340_ac_ac_on_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_340_ac_ac_on_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_340_ac_ac_on_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_340_ac_evaporator_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_340_ac_evaporator_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_340_ac_evaporator_temp_is_in_range(uint8_t value);

/**
 * Pack message GW_347.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_347_pack(
    uint8_t *dst_p,
    const struct ecu_gw_347_t *src_p,
    size_t size);

/**
 * Unpack message GW_347.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_347_unpack(
    struct ecu_gw_347_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_347.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_347_init(struct ecu_gw_347_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_347_tpms_signal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_347_tpms_signal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_347_tpms_signal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_347_bcm_tire_presure_signal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_347_bcm_tire_presure_signal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_347_bcm_tire_presure_signal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_347_tpms_rf_pressure_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_347_tpms_rf_pressure_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_347_tpms_rf_pressure_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_347_tpms_lr_pressure_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_347_tpms_lr_pressure_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_347_tpms_lr_pressure_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_347_tpms_lf_tyre_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_347_tpms_lf_tyre_pressure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_347_tpms_lf_tyre_pressure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_347_tpms_rf_tyre_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_347_tpms_rf_tyre_pressure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_347_tpms_rf_tyre_pressure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_347_tpms_rr_tyre_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_347_tpms_rr_tyre_pressure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_347_tpms_rr_tyre_pressure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_347_tpms_lr_tyre_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_347_tpms_lr_tyre_pressure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_347_tpms_lr_tyre_pressure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_347_tpms_rr_pressure_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_347_tpms_rr_pressure_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_347_tpms_rr_pressure_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_347_tpms_lf_pressure_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_347_tpms_lf_pressure_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_347_tpms_lf_pressure_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_347_tpms_system_failure_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_347_tpms_system_failure_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_347_tpms_system_failure_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_347_bcm_rolling_counter_347_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_347_bcm_rolling_counter_347_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_347_bcm_rolling_counter_347_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_347_bcm_crc_check_347_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_347_bcm_crc_check_347_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_347_bcm_crc_check_347_is_in_range(uint8_t value);

/**
 * Pack message GW_365.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_365_pack(
    uint8_t *dst_p,
    const struct ecu_gw_365_t *src_p,
    size_t size);

/**
 * Unpack message GW_365.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_365_unpack(
    struct ecu_gw_365_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_365.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_365_init(struct ecu_gw_365_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_distraction_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_distraction_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_distraction_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_driver_head_detect_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_driver_head_detect_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_driver_head_detect_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_drowsiness_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_drowsiness_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_drowsiness_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_ims_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_ims_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_ims_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_eye_detect_satus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_eye_detect_satus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_eye_detect_satus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_eye_gaze_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_eye_gaze_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_eye_gaze_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_driver_eye_detect_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_driver_eye_detect_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_driver_eye_detect_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_driver_eye_closestatus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_driver_eye_closestatus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_driver_eye_closestatus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_phone_call_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_phone_call_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_phone_call_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_driver_eyes_fov_area_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_driver_eyes_fov_area_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_driver_eyes_fov_area_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_driver_eye_confidence_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_driver_eye_confidence_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_driver_eye_confidence_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_rolling_counter_356_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_rolling_counter_356_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_rolling_counter_356_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_crc_check_356_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_crc_check_356_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_crc_check_356_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_head_detect_sts_pitch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_head_detect_sts_pitch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_head_detect_sts_pitch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_head_detect_sts_roll_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_head_detect_sts_roll_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_head_detect_sts_roll_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_head_detect_sts_yaw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_head_detect_sts_yaw_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_head_detect_sts_yaw_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_brow_offset_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_brow_offset_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_brow_offset_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_jaw_offset_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_jaw_offset_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_jaw_offset_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_rolling_counter_360_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_rolling_counter_360_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_rolling_counter_360_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_crc_check_360_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_crc_check_360_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_crc_check_360_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_driver_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_driver_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_driver_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_id_update_remind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_id_update_remind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_id_update_remind_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_drowsiness_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_drowsiness_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_drowsiness_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_drowsiness_sens_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_drowsiness_sens_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_drowsiness_sens_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_drowsiness_set_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_drowsiness_set_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_drowsiness_set_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_distraction_set_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_distraction_set_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_distraction_set_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_distraction_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_distraction_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_distraction_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_365_dms_xlocation_eye_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_dms_xlocation_eye_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_dms_xlocation_eye_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_365_dms_ylocation_eye_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_dms_ylocation_eye_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_dms_ylocation_eye_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_365_dms_zlocation_eye_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_dms_zlocation_eye_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_dms_zlocation_eye_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_rolling_counter_3_a7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_rolling_counter_3_a7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_rolling_counter_3_a7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_365_ims_crc_check_3_a7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_365_ims_crc_check_3_a7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_365_ims_crc_check_3_a7_is_in_range(uint8_t value);

/**
 * Pack message GW_366.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_366_pack(
    uint8_t *dst_p,
    const struct ecu_gw_366_t *src_p,
    size_t size);

/**
 * Unpack message GW_366.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_366_unpack(
    struct ecu_gw_366_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_366.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_366_init(struct ecu_gw_366_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_366_ac_work_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_366_ac_work_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_366_ac_work_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_366_ac_fr_req_wind_level_vd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_366_ac_fr_req_wind_level_vd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_366_ac_fr_req_wind_level_vd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_366_ac_ptc_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_366_ac_ptc_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_366_ac_ptc_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_366_ac_environmental_temp_vd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_366_ac_environmental_temp_vd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_366_ac_environmental_temp_vd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_366_ac_environmental_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_366_ac_environmental_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_366_ac_environmental_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_366_ac_fr_req_wind_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_366_ac_fr_req_wind_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_366_ac_fr_req_wind_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_366_ac_ac_pre_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_366_ac_ac_pre_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_366_ac_ac_pre_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_366_ac_ac_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_366_ac_ac_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_366_ac_ac_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_366_ac_ac_req_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_366_ac_ac_req_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_366_ac_ac_req_valid_is_in_range(uint8_t value);

/**
 * Pack message GW_387.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_387_pack(
    uint8_t *dst_p,
    const struct ecu_gw_387_t *src_p,
    size_t size);

/**
 * Unpack message GW_387.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_387_unpack(
    struct ecu_gw_387_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_387.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_387_init(struct ecu_gw_387_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_drive_mode_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_drive_mode_feedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_drive_mode_feedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_drive_mode_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_drive_mode_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_drive_mode_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_ble_key_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_ble_key_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_ble_key_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_driving_mode_memory_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_driving_mode_memory_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_driving_mode_memory_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_drive_mode_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_drive_mode_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_drive_mode_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_welcome_light_mode_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_welcome_light_mode_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_welcome_light_mode_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_rainfall_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_rainfall_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_rainfall_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_eps_torque_mode_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_eps_torque_mode_feedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_eps_torque_mode_feedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_theme_change_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_theme_change_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_theme_change_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_front_wash_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_front_wash_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_front_wash_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_front_wiper_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_front_wiper_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_front_wiper_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_rls_light_switch_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_rls_light_switch_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_rls_light_switch_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_buzzer_warning_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_buzzer_warning_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_buzzer_warning_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_light_sensor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_light_sensor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_light_sensor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_statusrainsensor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_statusrainsensor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_statusrainsensor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_statuslowbeam_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_statuslowbeam_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_statuslowbeam_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_system_failure_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_system_failure_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_system_failure_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_rear_wiper_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_rear_wiper_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_rear_wiper_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_save_energy_set_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_save_energy_set_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_save_energy_set_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_rolling_counter_387_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_rolling_counter_387_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_rolling_counter_387_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_387_bcm_crc_check_387_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_387_bcm_crc_check_387_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_387_bcm_crc_check_387_is_in_range(uint8_t value);

/**
 * Pack message GW_390.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_390_pack(
    uint8_t *dst_p,
    const struct ecu_gw_390_t *src_p,
    size_t size);

/**
 * Unpack message GW_390.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_390_unpack(
    struct ecu_gw_390_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_390.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_390_init(struct ecu_gw_390_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_390_bcm_pms_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_390_bcm_pms_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_390_bcm_pms_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_390_bcm_low_power_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_390_bcm_low_power_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_390_bcm_low_power_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_390_bcm_soh_life_percent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_390_bcm_soh_life_percent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_390_bcm_soh_life_percent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_390_bcm_bsn_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_390_bcm_bsn_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_390_bcm_bsn_level_is_in_range(uint8_t value);

/**
 * Pack message GW_396.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_396_pack(
    uint8_t *dst_p,
    const struct ecu_gw_396_t *src_p,
    size_t size);

/**
 * Unpack message GW_396.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_396_unpack(
    struct ecu_gw_396_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_396.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_396_init(struct ecu_gw_396_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_sunroof_pos_vit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_sunroof_pos_vit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_sunroof_pos_vit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_sunroof_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_sunroof_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_sunroof_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_sunshade_pos_vit_fl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_sunshade_pos_vit_fl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_sunshade_pos_vit_fl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_sunroof_pos_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_sunroof_pos_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_sunroof_pos_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_sunroof_rain_set_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_sunroof_rain_set_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_sunroof_rain_set_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_sunshade_movement_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_sunshade_movement_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_sunshade_movement_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_sunroof_movement_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_sunroof_movement_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_sunroof_movement_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_lock_auto_cls_win_set_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_lock_auto_cls_win_set_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_lock_auto_cls_win_set_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_sunroof_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_sunroof_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_sunroof_motor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_remote_window_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_remote_window_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_remote_window_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_win_open_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_win_open_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_win_open_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_win_down_cfg_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_win_down_cfg_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_win_down_cfg_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_win_up_cfg_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_win_up_cfg_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_win_up_cfg_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_remote_window_up_set_staus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_remote_window_up_set_staus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_remote_window_up_set_staus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_remote_window_down_set_staus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_remote_window_down_set_staus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_remote_window_down_set_staus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_auto_close_window_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_auto_close_window_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_auto_close_window_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_aeration_hint_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_aeration_hint_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_aeration_hint_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_sunroof_ap_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_sunroof_ap_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_sunroof_ap_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_peps_remote_window_up_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_peps_remote_window_up_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_peps_remote_window_up_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_peps_remote_window_down_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_peps_remote_window_down_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_peps_remote_window_down_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_396_bcm_sunroof_intialized_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_396_bcm_sunroof_intialized_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_396_bcm_sunroof_intialized_is_in_range(uint8_t value);

/**
 * Pack message GW_507.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_507_pack(
    uint8_t *dst_p,
    const struct ecu_gw_507_t *src_p,
    size_t size);

/**
 * Unpack message GW_507.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_507_unpack(
    struct ecu_gw_507_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_507.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_507_init(struct ecu_gw_507_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_parking_mode_select_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_parking_mode_select_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_parking_mode_select_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_las_mode_selection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_las_mode_selection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_las_mode_selection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_fcta_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_fcta_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_fcta_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_rcta_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_rcta_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_rcta_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_rcw_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_rcw_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_rcw_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_tsr_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_tsr_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_tsr_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_las_warning_mode_selection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_las_warning_mode_selection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_las_warning_mode_selection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_ldw_shake_lev_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_ldw_shake_lev_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_ldw_shake_lev_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_fatigue_dection_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_fatigue_dection_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_fatigue_dection_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_rctb_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_rctb_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_rctb_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_sea_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_sea_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_sea_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_overspeed_sound_war_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_overspeed_sound_war_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_overspeed_sound_war_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_iacc_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_iacc_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_iacc_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_lock_ctrl_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_lock_ctrl_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_lock_ctrl_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_audio_warning_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_audio_warning_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_audio_warning_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_hzp_recomend_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_hzp_recomend_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_hzp_recomend_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_overspeed_warning_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_overspeed_warning_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_overspeed_warning_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_hzp_on_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_hzp_on_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_hzp_on_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_parking_resume_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_parking_resume_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_parking_resume_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_uls_fkp_activation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_uls_fkp_activation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_uls_fkp_activation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_fctb_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_fctb_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_fctb_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_uls_bsd_activation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_uls_bsd_activation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_uls_bsd_activation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_parking_confirm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_parking_confirm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_parking_confirm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_remote_distance_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_remote_distance_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_remote_distance_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_tjp_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_tjp_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_tjp_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_slot_voice_select_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_slot_voice_select_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_slot_voice_select_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_obstacle_safe_distance_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_obstacle_safe_distance_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_obstacle_safe_distance_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_dvr_replay_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_dvr_replay_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_dvr_replay_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_recordingcycle_setting_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_recordingcycle_setting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_recordingcycle_setting_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_dvr_format_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_dvr_format_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_dvr_format_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_top_look_down_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_top_look_down_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_top_look_down_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_dvr_vedio_seek_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_dvr_vedio_seek_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_dvr_vedio_seek_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_hma_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_hma_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_hma_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_avm_calibration_confirm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_avm_calibration_confirm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_avm_calibration_confirm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_dvr_print_screen_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_dvr_print_screen_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_dvr_print_screen_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_dvr_replay_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_dvr_replay_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_dvr_replay_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_dvr_enable_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_dvr_enable_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_dvr_enable_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_dvr_tape_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_dvr_tape_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_dvr_tape_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_language_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_language_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_language_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_turn_light_avm_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_turn_light_avm_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_turn_light_avm_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_radar_avm_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_radar_avm_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_radar_avm_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_dvr_replay_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_dvr_replay_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_dvr_replay_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_resolution_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_resolution_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_resolution_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_dvr_distort_correct_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_dvr_distort_correct_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_dvr_distort_correct_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_507_hu_dvr_video_play_user_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_dvr_video_play_user_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_dvr_video_play_user_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_avm_calibration_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_avm_calibration_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_avm_calibration_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_mod_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_mod_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_mod_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_dvr_emergency_record_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_dvr_emergency_record_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_dvr_emergency_record_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_ramp_avm_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_ramp_avm_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_ramp_avm_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_dvr_browse_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_dvr_browse_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_dvr_browse_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_shoot_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_shoot_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_shoot_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_transparent_car_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_transparent_car_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_transparent_car_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_cruise_control_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_cruise_control_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_cruise_control_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_auto_brake_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_auto_brake_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_auto_brake_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_park_voice_int_set_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_park_voice_int_set_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_park_voice_int_set_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_acc_obj_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_acc_obj_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_acc_obj_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_vc_cruise_set_distance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_vc_cruise_set_distance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_vc_cruise_set_distance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_vc_cruise_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_vc_cruise_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_vc_cruise_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_vc_cruise_set_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_vc_cruise_set_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_vc_cruise_set_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_tutorialmodel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_tutorialmodel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_tutorialmodel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_front_radar_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_front_radar_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_front_radar_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_apa_active3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_apa_active3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_apa_active3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_apa_active2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_apa_active2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_apa_active2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_nda_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_nda_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_nda_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_fcw_setting_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_fcw_setting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_fcw_setting_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_bsdlca_setting_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_bsdlca_setting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_bsdlca_setting_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_full_speed_panoramic_select_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_full_speed_panoramic_select_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_full_speed_panoramic_select_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_door_open_warning_select_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_door_open_warning_select_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_door_open_warning_select_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_nda_audio_war_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_nda_audio_war_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_nda_audio_war_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_nda_nav_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_nda_nav_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_nda_nav_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_nda_set_spd_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_nda_set_spd_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_nda_set_spd_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_overspeed_warning_offset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_overspeed_warning_offset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_overspeed_warning_offset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_507_hu_lane_change_style_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_507_hu_lane_change_style_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_507_hu_lane_change_style_is_in_range(uint8_t value);

/**
 * Pack message GW_516.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_516_pack(
    uint8_t *dst_p,
    const struct ecu_gw_516_t *src_p,
    size_t size);

/**
 * Unpack message GW_516.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_516_unpack(
    struct ecu_gw_516_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_516.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_516_init(struct ecu_gw_516_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_516_hu_current_location_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_current_location_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_current_location_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ecu_gw_516_hu_current_location_longitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_current_location_longitude_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_current_location_longitude_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ecu_gw_516_hu_current_location_latitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_current_location_latitude_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_current_location_latitude_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_516_hu_local_time_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_local_time_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_local_time_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_516_hu_air_humidity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_air_humidity_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_air_humidity_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_516_hu_local_time_month_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_local_time_month_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_local_time_month_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_516_hu_air_humidity_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_air_humidity_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_air_humidity_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_516_hu_local_time_date_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_local_time_date_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_local_time_date_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_516_hu_local_time_hour_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_local_time_hour_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_local_time_hour_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_516_hu_local_time_minute_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_local_time_minute_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_local_time_minute_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_516_hu_local_time_system_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_local_time_system_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_local_time_system_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_516_hu_local_time_second_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_local_time_second_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_local_time_second_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_516_hu_local_time_year_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_local_time_year_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_local_time_year_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_516_hu_maintain_remind_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_maintain_remind_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_maintain_remind_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_516_hu_leave_maintain_day_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_leave_maintain_day_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_leave_maintain_day_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ecu_gw_516_hu_leave_maintain_mileage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_leave_maintain_mileage_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_leave_maintain_mileage_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_516_hu_current_locationstd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_516_hu_current_locationstd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_516_hu_current_locationstd_is_in_range(uint16_t value);

/**
 * Pack message GW_530.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_530_pack(
    uint8_t *dst_p,
    const struct ecu_gw_530_t *src_p,
    size_t size);

/**
 * Unpack message GW_530.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_530_unpack(
    struct ecu_gw_530_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_530.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_530_init(struct ecu_gw_530_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_530_ip_engine_off_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_530_ip_engine_off_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_530_ip_engine_off_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ecu_gw_530_ip_total_odometer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_530_ip_total_odometer_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_530_ip_total_odometer_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_530_ip_fuel_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_530_ip_fuel_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_530_ip_fuel_level_is_in_range(uint8_t value);

/**
 * Pack message GW_187.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_187_pack(
    uint8_t *dst_p,
    const struct ecu_gw_187_t *src_p,
    size_t size);

/**
 * Unpack message GW_187.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_187_unpack(
    struct ecu_gw_187_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_187.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_187_init(struct ecu_gw_187_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_esp_abs_active_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_esp_abs_active_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_esp_abs_active_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_esp_gear_hold_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_esp_gear_hold_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_esp_gear_hold_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_esp_gear_hold_request_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_esp_gear_hold_request_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_esp_gear_hold_request_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_esp_tcs_fail_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_esp_tcs_fail_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_esp_tcs_fail_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_esp_abs_fail_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_esp_abs_fail_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_esp_abs_fail_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_esp_ebd_fail_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_esp_ebd_fail_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_esp_ebd_fail_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_esp_esp_function_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_esp_esp_function_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_esp_esp_function_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_esp_esp_active_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_esp_esp_active_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_esp_esp_active_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_187_esp_torq_incwhl_front_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_esp_torq_incwhl_front_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_esp_torq_incwhl_front_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_ibcu_brake_fluid_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_ibcu_brake_fluid_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_ibcu_brake_fluid_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_ep_bi_clear_diagnostic_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_ep_bi_clear_diagnostic_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_ep_bi_clear_diagnostic_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_esp_eng_torq_dec_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_esp_eng_torq_dec_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_esp_eng_torq_dec_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_esp_eng_torq_inc_front_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_esp_eng_torq_inc_front_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_esp_eng_torq_inc_front_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_esp_vehicle_speed_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_esp_vehicle_speed_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_esp_vehicle_speed_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_187_esp_vehicle_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_esp_vehicle_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_esp_vehicle_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_ep_bi_mil_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_ep_bi_mil_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_ep_bi_mil_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_esp_adbf_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_esp_adbf_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_esp_adbf_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_esp_rolling_counter_187_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_esp_rolling_counter_187_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_esp_rolling_counter_187_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_187_esp_crc_check_187_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_187_esp_crc_check_187_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_187_esp_crc_check_187_is_in_range(uint8_t value);

/**
 * Pack message GW_197.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_197_pack(
    uint8_t *dst_p,
    const struct ecu_gw_197_t *src_p,
    size_t size);

/**
 * Unpack message GW_197.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_197_unpack(
    struct ecu_gw_197_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_197.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_197_init(struct ecu_gw_197_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_197_epb_clutch_sensor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_197_epb_clutch_sensor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_197_epb_clutch_sensor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_197_esp_rolling_counter_197_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_197_esp_rolling_counter_197_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_197_esp_rolling_counter_197_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_197_esp_crc_check_197_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_197_esp_crc_check_197_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_197_esp_crc_check_197_is_in_range(uint8_t value);

/**
 * Pack message GW_194.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_194_pack(
    uint8_t *dst_p,
    const struct ecu_gw_194_t *src_p,
    size_t size);

/**
 * Unpack message GW_194.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_194_unpack(
    struct ecu_gw_194_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_194.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_194_init(struct ecu_gw_194_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_194_ems_eng_spd_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_194_ems_eng_spd_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_194_ems_eng_spd_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_194_ems_eng_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_194_ems_eng_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_194_ems_eng_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_194_ems_idle_ctrl_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_194_ems_idle_ctrl_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_194_ems_idle_ctrl_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_194_ems_eng_run_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_194_ems_eng_run_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_194_ems_eng_run_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_194_ems_eng_fu_pump_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_194_ems_eng_fu_pump_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_194_ems_eng_fu_pump_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_194_ems_eng_stop_inhb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_194_ems_eng_stop_inhb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_194_ems_eng_stop_inhb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_194_ems_eng_strt_success_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_194_ems_eng_strt_success_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_194_ems_eng_strt_success_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_194_ems_eng_fu_cut_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_194_ems_eng_fu_cut_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_194_ems_eng_fu_cut_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_194_ems_eng_tq_flywh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_194_ems_eng_tq_flywh_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_194_ems_eng_tq_flywh_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_194_ems_eng_tq_flywh_failr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_194_ems_eng_tq_flywh_failr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_194_ems_eng_tq_flywh_failr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_194_ems_eng_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_194_ems_eng_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_194_ems_eng_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_194_ems_ignkl15_posn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_194_ems_ignkl15_posn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_194_ems_ignkl15_posn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_194_ems_rolling_counter_194_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_194_ems_rolling_counter_194_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_194_ems_rolling_counter_194_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_194_ems_crc_check_194_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_194_ems_crc_check_194_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_194_ems_crc_check_194_is_in_range(uint8_t value);

/**
 * Pack message GW_17D.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_17_d_pack(
    uint8_t *dst_p,
    const struct ecu_gw_17_d_t *src_p,
    size_t size);

/**
 * Unpack message GW_17D.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_17_d_unpack(
    struct ecu_gw_17_d_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_17D.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_17_d_init(struct ecu_gw_17_d_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_act_hv_pwr_cns_ext_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_act_hv_pwr_cns_ext_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_act_hv_pwr_cns_ext_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_soc_disp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_soc_disp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_soc_disp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_veh_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_veh_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_veh_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_bms_oper_mod_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_bms_oper_mod_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_bms_oper_mod_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_chrg_allwd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_chrg_allwd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_chrg_allwd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_batt_intr_heat_allwd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_batt_intr_heat_allwd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_batt_intr_heat_allwd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_chrg_unlck_i_lim_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_chrg_unlck_i_lim_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_chrg_unlck_i_lim_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_chm_asignal_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_chm_asignal_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_chm_asignal_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_chrg_i_req_lim_fac_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_chrg_i_req_lim_fac_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_chrg_i_req_lim_fac_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_chrg_susp_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_chrg_susp_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_chrg_susp_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_veh_spd_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_veh_spd_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_veh_spd_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_veh_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_veh_spd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_veh_spd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_191_cyc_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_191_cyc_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_191_cyc_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_crcid191_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_crcid191_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_crcid191_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_real_acc_pedl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_real_acc_pedl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_real_acc_pedl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_real_acc_pedl_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_real_acc_pedl_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_real_acc_pedl_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_k3_clu_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_k3_clu_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_k3_clu_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_flywh_tq_trans_load_act_invld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_flywh_tq_trans_load_act_invld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_flywh_tq_trans_load_act_invld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_flywh_tq_trans_load_act_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_flywh_tq_trans_load_act_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_flywh_tq_trans_load_act_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_d_pcu_eng_tar_idle_spd_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_eng_tar_idle_spd_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_eng_tar_idle_spd_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_eng_strt_mod_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_eng_strt_mod_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_eng_strt_mod_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_spd_ctrl_mod_select_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_spd_ctrl_mod_select_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_spd_ctrl_mod_select_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_clr_diagc_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_clr_diagc_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_clr_diagc_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_mil_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_mil_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_mil_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_tar_gear_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_tar_gear_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_tar_gear_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_tar_gear_req_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_tar_gear_req_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_tar_gear_req_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_r_gearbox_actual_driving_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_r_gearbox_actual_driving_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_r_gearbox_actual_driving_gear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_d_pcu_trsm_tar_idle_spd_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_trsm_tar_idle_spd_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_trsm_tar_idle_spd_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_rolling_counter_1_c6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_rolling_counter_1_c6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_rolling_counter_1_c6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_crc_check_1_c6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_crc_check_1_c6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_crc_check_1_c6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_pt_sts_chrg_crp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_pt_sts_chrg_crp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_pt_sts_chrg_crp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_eng_tq_flywh_req_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_eng_tq_flywh_req_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_eng_tq_flywh_req_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_d_pcu_eng_tq_flywh_fast_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_eng_tq_flywh_fast_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_eng_tq_flywh_fast_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_d_pcu_eng_tq_flywh_slow_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_eng_tq_flywh_slow_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_eng_tq_flywh_slow_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_brk_pedl_sts1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_brk_pedl_sts1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_brk_pedl_sts1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_fu_cut_off_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_fu_cut_off_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_fu_cut_off_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_eng_tq_flywh_allwd_max_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_eng_tq_flywh_allwd_max_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_eng_tq_flywh_allwd_max_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_d_pcu_eng_tq_flywh_allwd_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_eng_tq_flywh_allwd_max_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_eng_tq_flywh_allwd_max_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_brk_pedl_sts2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_brk_pedl_sts2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_brk_pedl_sts2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_eng_ign_ag_intv_enbl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_eng_ign_ag_intv_enbl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_eng_ign_ag_intv_enbl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_ems_surge_damper_ena_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_ems_surge_damper_ena_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_ems_surge_damper_ena_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_strt_inhb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_strt_inhb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_strt_inhb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_strt_trq_ctl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_strt_trq_ctl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_strt_trq_ctl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_eng_stp_ord_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_eng_stp_ord_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_eng_stp_ord_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_eng_strt_ord_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_eng_strt_ord_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_eng_strt_ord_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_rolling_counter_1_e1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_rolling_counter_1_e1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_rolling_counter_1_e1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_crc_check_1_e1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_crc_check_1_e1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_crc_check_1_e1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_d_pcu_pwr_indcd_real_tq_front_whl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_pwr_indcd_real_tq_front_whl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_pwr_indcd_real_tq_front_whl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_d_pcu_pwr_indcd_drvr_req_tq_whl_front_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_pwr_indcd_drvr_req_tq_whl_front_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_pwr_indcd_drvr_req_tq_whl_front_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_front_mot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_front_mot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_front_mot_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_esp_tq_req_avl_front_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_esp_tq_req_avl_front_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_esp_tq_req_avl_front_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_ecgp_ovrd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_ecgp_ovrd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_ecgp_ovrd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_qecacc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_qecacc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_qecacc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_acc_req_possible_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_acc_req_possible_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_acc_req_possible_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_eng_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_eng_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_eng_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_eng_clutch_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_eng_clutch_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_eng_clutch_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_pwr_indcd_real_tq_whl_failr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_pwr_indcd_real_tq_whl_failr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_pwr_indcd_real_tq_whl_failr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_front_mot_sts_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_front_mot_sts_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_front_mot_sts_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_eng_sts_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_eng_sts_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_eng_sts_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_eng_clutch_sts_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_eng_clutch_sts_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_eng_clutch_sts_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_rear_mot_sts_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_rear_mot_sts_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_rear_mot_sts_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_start_stop_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_start_stop_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_start_stop_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_start_stop_active_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_start_stop_active_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_start_stop_active_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_rolling_counter_211_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_rolling_counter_211_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_rolling_counter_211_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_crc_check_211_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_crc_check_211_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_crc_check_211_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_d_pcu_mb_regen_whl_front_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_mb_regen_whl_front_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_mb_regen_whl_front_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_d_pcu_mb_regen_max_front_whl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_mb_regen_max_front_whl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_mb_regen_max_front_whl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_mb_regen_max_front_whl_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_mb_regen_max_front_whl_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_mb_regen_max_front_whl_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_mb_regen_max_whl_qlfr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_mb_regen_max_whl_qlfr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_mb_regen_max_whl_qlfr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_apa_torq_request_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_apa_torq_request_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_apa_torq_request_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_acc_pedl_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_acc_pedl_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_acc_pedl_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_acc_pedl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_acc_pedl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_acc_pedl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_pwr_train_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_pwr_train_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_pwr_train_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_apa_request_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_apa_request_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_apa_request_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_rolling_counter_1_a6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_rolling_counter_1_a6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_rolling_counter_1_a6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_crc_check_1_a6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_crc_check_1_a6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_crc_check_1_a6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_d_pcu_mb_regen_max_whl_total_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_mb_regen_max_whl_total_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_mb_regen_max_whl_total_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_d_pcu_mb_regen_whl_rear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_mb_regen_whl_rear_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_mb_regen_whl_rear_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_d_pcu_mb_regen_max_rear_whl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_mb_regen_max_rear_whl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_mb_regen_max_rear_whl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_rolling_counter_1_be_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_rolling_counter_1_be_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_rolling_counter_1_be_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_crc_check_1_be_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_crc_check_1_be_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_crc_check_1_be_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_d_pcu_pwr_indcd_real_tq_rear_whl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_pwr_indcd_real_tq_rear_whl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_pwr_indcd_real_tq_rear_whl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_d_pcu_pwr_indcd_drvr_req_tq_whl_rear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_pwr_indcd_drvr_req_tq_whl_rear_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_pwr_indcd_drvr_req_tq_whl_rear_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_esp_tq_req_avl_rear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_esp_tq_req_avl_rear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_esp_tq_req_avl_rear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_rear_mot_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_rear_mot_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_rear_mot_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_rolling_counter_1_c4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_rolling_counter_1_c4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_rolling_counter_1_c4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_crc_check_1_c4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_crc_check_1_c4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_crc_check_1_c4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_d_pcu_rolling_counter_17_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_rolling_counter_17_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_rolling_counter_17_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_d_pcu_crc_check_17_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_d_pcu_crc_check_17_d_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_d_pcu_crc_check_17_d_is_in_range(uint16_t value);

/**
 * Pack message GW_17E.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_17_e_pack(
    uint8_t *dst_p,
    const struct ecu_gw_17_e_t *src_p,
    size_t size);

/**
 * Unpack message GW_17E.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_17_e_unpack(
    struct ecu_gw_17_e_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_17E.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_17_e_init(struct ecu_gw_17_e_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_e_eps_measured_torsion_bar_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_e_eps_measured_torsion_bar_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_e_eps_measured_torsion_bar_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_e_eps_pinionang_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_e_eps_pinionang_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_e_eps_pinionang_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_e_eps_pinionang_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_e_eps_pinionang_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_e_eps_pinionang_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_17_e_eps_handwheel_relang_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_e_eps_handwheel_relang_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_e_eps_handwheel_relang_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_e_eps_measured_torsion_bar_torq_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_e_eps_measured_torsion_bar_torq_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_e_eps_measured_torsion_bar_torq_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_e_eps_handwheel_relang_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_e_eps_handwheel_relang_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_e_eps_handwheel_relang_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_e_eps_lat_ctrl_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_e_eps_lat_ctrl_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_e_eps_lat_ctrl_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_e_eps_lat_ctrl_availability_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_e_eps_lat_ctrl_availability_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_e_eps_lat_ctrl_availability_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_e_eps_rolling_counter_17_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_e_eps_rolling_counter_17_e_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_e_eps_rolling_counter_17_e_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_17_e_eps_crc_check_17_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_17_e_eps_crc_check_17_e_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_17_e_eps_crc_check_17_e_is_in_range(uint8_t value);

/**
 * Pack message ACC_1BA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_acc_1_ba_pack(
    uint8_t *dst_p,
    const struct ecu_acc_1_ba_t *src_p,
    size_t size);

/**
 * Unpack message ACC_1BA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_acc_1_ba_unpack(
    struct ecu_acc_1_ba_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_1BA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_acc_1_ba_init(struct ecu_acc_1_ba_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_1_ba_acc_motor_torque_max_limit_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_1_ba_acc_motor_torque_max_limit_request_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_1_ba_acc_motor_torque_max_limit_request_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_1_ba_acc_motor_torque_min_limit_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_1_ba_acc_motor_torque_min_limit_request_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_1_ba_acc_motor_torque_min_limit_request_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_1_ba_acc_lat_ang_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_1_ba_acc_lat_ang_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_1_ba_acc_lat_ang_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_1_ba_acc_lat_ang_req_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_1_ba_acc_lat_ang_req_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_1_ba_acc_lat_ang_req_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_1_ba_acc_rolling_counter_1_ba_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_1_ba_acc_rolling_counter_1_ba_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_1_ba_acc_rolling_counter_1_ba_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_1_ba_acc_crc_check_1_ba_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_1_ba_acc_crc_check_1_ba_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_1_ba_acc_crc_check_1_ba_0_is_in_range(uint8_t value);

/**
 * Pack message GW_20B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_20_b_pack(
    uint8_t *dst_p,
    const struct ecu_gw_20_b_t *src_p,
    size_t size);

/**
 * Unpack message GW_20B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_20_b_unpack(
    struct ecu_gw_20_b_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_20B.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_20_b_init(struct ecu_gw_20_b_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_wheel_speed_fr_valid_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_wheel_speed_fr_valid_data_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_wheel_speed_fr_valid_data_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_wheel_speed_fr_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_wheel_speed_fr_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_wheel_speed_fr_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_20_b_wheel_speed_fr_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_wheel_speed_fr_data_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_wheel_speed_fr_data_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_wheel_speed_fl_valid_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_wheel_speed_fl_valid_data_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_wheel_speed_fl_valid_data_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_wheel_speed_fl_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_wheel_speed_fl_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_wheel_speed_fl_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_20_b_wheel_speed_fl_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_wheel_speed_fl_data_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_wheel_speed_fl_data_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_abs_tod_fast_open_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_abs_tod_fast_open_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_abs_tod_fast_open_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_20_b_esp_tod_torque_max_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_tod_torque_max_limit_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_tod_torque_max_limit_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_rolling_counter_206_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_rolling_counter_206_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_rolling_counter_206_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_crc_check_206_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_crc_check_206_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_crc_check_206_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_wheel_speed_rr_valid_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_wheel_speed_rr_valid_data_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_wheel_speed_rr_valid_data_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_wheel_speed_rr_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_wheel_speed_rr_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_wheel_speed_rr_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_20_b_wheel_speed_rr_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_wheel_speed_rr_data_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_wheel_speed_rr_data_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_wheel_speed_rl_valid_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_wheel_speed_rl_valid_data_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_wheel_speed_rl_valid_data_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_wheel_speed_rl_direction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_wheel_speed_rl_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_wheel_speed_rl_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_20_b_wheel_speed_rl_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_wheel_speed_rl_data_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_wheel_speed_rl_data_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_20_b_esp_vehicle_speed_reference_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_vehicle_speed_reference_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_vehicle_speed_reference_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_urgency_brake_alarm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_urgency_brake_alarm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_urgency_brake_alarm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_ecd_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_ecd_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_ecd_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_ecd_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_ecd_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_ecd_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_rolling_counter_208_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_rolling_counter_208_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_rolling_counter_208_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_crc_check_208_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_crc_check_208_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_crc_check_208_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_mas_cyl_brake_pressure_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_mas_cyl_brake_pressure_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_mas_cyl_brake_pressure_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_auto_hold_standby_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_auto_hold_standby_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_auto_hold_standby_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_brake_light_on_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_brake_light_on_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_brake_light_on_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_20_b_esp_mas_cyl_brake_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_mas_cyl_brake_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_mas_cyl_brake_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_wheel_speed_fl_pulse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_wheel_speed_fl_pulse_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_wheel_speed_fl_pulse_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_wheel_speed_fr_pulse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_wheel_speed_fr_pulse_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_wheel_speed_fr_pulse_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_wheel_speed_rr_pulse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_wheel_speed_rr_pulse_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_wheel_speed_rr_pulse_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_wheel_speed_rl_pulse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_wheel_speed_rl_pulse_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_wheel_speed_rl_pulse_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_auto_hold_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_auto_hold_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_auto_hold_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_auto_hold_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_auto_hold_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_auto_hold_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_hhc_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_hhc_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_hhc_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_hhc_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_hhc_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_hhc_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_rolling_counter_258_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_rolling_counter_258_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_rolling_counter_258_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_crc_check_258_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_crc_check_258_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_crc_check_258_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_brake_force_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_brake_force_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_brake_force_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_ab_aactive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_ab_aactive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_ab_aactive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_ab_aavailable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_ab_aavailable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_ab_aavailable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_prefill_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_prefill_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_prefill_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_prefill_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_prefill_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_prefill_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_aeb_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_aeb_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_aeb_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_ae_bdec_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_ae_bdec_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_ae_bdec_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_aw_bactive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_aw_bactive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_aw_bactive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_aw_bavailable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_aw_bavailable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_aw_bavailable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_brake_over_heat_brake_disc_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_brake_over_heat_brake_disc_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_brake_over_heat_brake_disc_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_cdd_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_cdd_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_cdd_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_cdd_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_cdd_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_cdd_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_vehicle_standstill_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_vehicle_standstill_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_vehicle_standstill_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_vdc_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_vdc_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_vdc_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_tcs_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_tcs_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_tcs_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_only_abs_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_only_abs_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_only_abs_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_qdcacc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_qdcacc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_qdcacc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_cdd_active_apa_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_cdd_active_apa_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_cdd_active_apa_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_cdd_available_apa_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_cdd_available_apa_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_cdd_available_apa_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_increase_pressure_req_ok_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_increase_pressure_req_ok_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_increase_pressure_req_ok_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_hdc_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_hdc_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_hdc_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_hbb_active_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_hbb_active_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_hbb_active_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_cdp_parking_active_for_acc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_cdp_parking_active_for_acc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_cdp_parking_active_for_acc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_cdp_parking_avail_for_acc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_cdp_parking_avail_for_acc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_cdp_parking_avail_for_acc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_ibcu_brake_disc_high_temp_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_ibcu_brake_disc_high_temp_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_ibcu_brake_disc_high_temp_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_prefillfor_apa_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_prefillfor_apa_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_prefillfor_apa_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_prefillfor_apa_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_prefillfor_apa_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_prefillfor_apa_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_ibcu_brk_pedopl_sts_gb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_ibcu_brk_pedopl_sts_gb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_ibcu_brk_pedopl_sts_gb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_ibcu_brk_pedl_sts_gb_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_ibcu_brk_pedl_sts_gb_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_ibcu_brk_pedl_sts_gb_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_ibcu_precheck_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_ibcu_precheck_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_ibcu_precheck_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_rolling_counter_277_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_rolling_counter_277_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_rolling_counter_277_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_crc_check_277_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_crc_check_277_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_crc_check_277_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_20_b_esp_rolling_counter_20_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_rolling_counter_20_b_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_rolling_counter_20_b_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_20_b_esp_crc_check_20_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_20_b_esp_crc_check_20_b_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_20_b_esp_crc_check_20_b_is_in_range(uint16_t value);

/**
 * Pack message GW_24F.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_24_f_pack(
    uint8_t *dst_p,
    const struct ecu_gw_24_f_t *src_p,
    size_t size);

/**
 * Unpack message GW_24F.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_24_f_unpack(
    struct ecu_gw_24_f_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_24F.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_24_f_init(struct ecu_gw_24_f_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_f_eps_elect_power_consumption_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_f_eps_elect_power_consumption_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_f_eps_elect_power_consumption_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_f_eps_apa_abortfeedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_f_eps_apa_abortfeedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_f_eps_apa_abortfeedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_f_eps_mode_switch_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_f_eps_mode_switch_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_f_eps_mode_switch_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_f_eps_apa_epas_failed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_f_eps_apa_epas_failed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_f_eps_apa_epas_failed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_f_eps_torq_sensor_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_f_eps_torq_sensor_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_f_eps_torq_sensor_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_f_eps_steering_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_f_eps_steering_torque_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_f_eps_steering_torque_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_f_eps_ldw_shake_lev_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_f_eps_ldw_shake_lev_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_f_eps_ldw_shake_lev_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_f_eps_apa_control_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_f_eps_apa_control_feedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_f_eps_apa_control_feedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_f_eps_iacc_abortreason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_f_eps_iacc_abortreason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_f_eps_iacc_abortreason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_f_eps_system_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_f_eps_system_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_f_eps_system_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_f_eps_eps_failed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_f_eps_eps_failed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_f_eps_eps_failed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_f_eps_torque_assist_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_f_eps_torque_assist_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_f_eps_torque_assist_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_f_eps_concuss_availability_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_f_eps_concuss_availability_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_f_eps_concuss_availability_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_f_eps_rolling_counter_24_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_f_eps_rolling_counter_24_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_f_eps_rolling_counter_24_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_f_eps_crc_check_24_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_f_eps_crc_check_24_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_f_eps_crc_check_24_f_is_in_range(uint8_t value);

/**
 * Pack message GW_28B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_28_b_pack(
    uint8_t *dst_p,
    const struct ecu_gw_28_b_t *src_p,
    size_t size);

/**
 * Unpack message GW_28B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_28_b_unpack(
    struct ecu_gw_28_b_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_28B.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_28_b_init(struct ecu_gw_28_b_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_low_beam_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_low_beam_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_low_beam_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_high_beam_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_high_beam_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_high_beam_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_turn_light_switch_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_turn_light_switch_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_turn_light_switch_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_mirror_adjust_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_mirror_adjust_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_mirror_adjust_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_lock_trigger_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_lock_trigger_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_lock_trigger_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_driver_door_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_driver_door_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_driver_door_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_turn_indicator_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_turn_indicator_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_turn_indicator_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_turn_indicator_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_turn_indicator_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_turn_indicator_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_hood_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_hood_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_hood_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_peps_start_controlsignal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_peps_start_controlsignal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_peps_start_controlsignal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_trunk_release_trigger_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_trunk_release_trigger_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_trunk_release_trigger_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_peps_remote_start_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_peps_remote_start_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_peps_remote_start_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_emergencylightstatus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_emergencylightstatus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_emergencylightstatus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_power_status_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_power_status_feedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_power_status_feedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_rear_defrosterstatus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_rear_defrosterstatus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_rear_defrosterstatus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_unlock_trigger_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_unlock_trigger_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_unlock_trigger_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_refuel_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_refuel_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_refuel_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_peps_shift_forbid_rq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_peps_shift_forbid_rq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_peps_shift_forbid_rq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_key_alarm_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_key_alarm_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_key_alarm_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_rolling_counter_28_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_rolling_counter_28_b_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_rolling_counter_28_b_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_b_bcm_crc_check_28_b_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_b_bcm_crc_check_28_b_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_b_bcm_crc_check_28_b_is_in_range(uint8_t value);

/**
 * Pack message GW_2D1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_2_d1_pack(
    uint8_t *dst_p,
    const struct ecu_gw_2_d1_t *src_p,
    size_t size);

/**
 * Unpack message GW_2D1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_2_d1_unpack(
    struct ecu_gw_2_d1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_2D1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_2_d1_init(struct ecu_gw_2_d1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_d1_peps_luggage_unlock_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_d1_peps_luggage_unlock_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_d1_peps_luggage_unlock_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_d1_bcm_reverse_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_d1_bcm_reverse_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_d1_bcm_reverse_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_d1_bcm_brake_lamp_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_d1_bcm_brake_lamp_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_d1_bcm_brake_lamp_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_d1_bcm_trunk_door_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_d1_bcm_trunk_door_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_d1_bcm_trunk_door_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_d1_bcm_right_rear_door_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_d1_bcm_right_rear_door_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_d1_bcm_right_rear_door_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_d1_bcm_passenger_door_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_d1_bcm_passenger_door_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_d1_bcm_passenger_door_status_is_in_range(uint8_t value);

/**
 * Pack message GW_2DE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_2_de_pack(
    uint8_t *dst_p,
    const struct ecu_gw_2_de_t *src_p,
    size_t size);

/**
 * Unpack message GW_2DE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_2_de_unpack(
    struct ecu_gw_2_de_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_2DE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_2_de_init(struct ecu_gw_2_de_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_de_ip_driver_lcdaled_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_de_ip_driver_lcdaled_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_de_ip_driver_lcdaled_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_de_ip_passenger_lcdaled_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_de_ip_passenger_lcdaled_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_de_ip_passenger_lcdaled_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_de_ip_dis_fail_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_de_ip_dis_fail_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_de_ip_dis_fail_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_de_ip_q_dash_acc_fail_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_de_ip_q_dash_acc_fail_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_de_ip_q_dash_acc_fail_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_de_ip_rolling_counter_2_de_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_de_ip_rolling_counter_2_de_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_de_ip_rolling_counter_2_de_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_de_ip_crc_check_2_de_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_de_ip_crc_check_2_de_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_de_ip_crc_check_2_de_is_in_range(uint8_t value);

/**
 * Pack message GW_2E6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_2_e6_pack(
    uint8_t *dst_p,
    const struct ecu_gw_2_e6_t *src_p,
    size_t size);

/**
 * Unpack message GW_2E6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_2_e6_unpack(
    struct ecu_gw_2_e6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_2E6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_2_e6_init(struct ecu_gw_2_e6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_engine_intake_air_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_engine_intake_air_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_engine_intake_air_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_coolt_t_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_coolt_t_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_coolt_t_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_lo_batt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_lo_batt_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_lo_batt_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_catalyst_warm_up_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_catalyst_warm_up_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_catalyst_warm_up_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_general_denominator_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_general_denominator_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_general_denominator_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_general_deno_status_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_general_deno_status_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_general_deno_status_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_first_ignition_cycle_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_first_ignition_cycle_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_first_ignition_cycle_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_warm_up_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_warm_up_cycle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_warm_up_cycle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_driving_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_driving_cycle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_driving_cycle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_eng_t_coolt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_eng_t_coolt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_eng_t_coolt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_lo_batt_u_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_lo_batt_u_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_lo_batt_u_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_coolreq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_coolreq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_coolreq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_altitude_factor_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_altitude_factor_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_altitude_factor_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_altitude_factor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_altitude_factor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_altitude_factor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_sec_ignition_cycles_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_sec_ignition_cycles_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_sec_ignition_cycles_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_ignition_cycles_counter_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_ignition_cycles_counter_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_ignition_cycles_counter_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_rolling_counter_2_e6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_rolling_counter_2_e6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_rolling_counter_2_e6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e6_ems_crc_check_2_e6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e6_ems_crc_check_2_e6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e6_ems_crc_check_2_e6_is_in_range(uint8_t value);

/**
 * Pack message ACC_31A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_acc_31_a_pack(
    uint8_t *dst_p,
    const struct ecu_acc_31_a_t *src_p,
    size_t size);

/**
 * Unpack message ACC_31A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_acc_31_a_unpack(
    struct ecu_acc_31_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_31A.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_acc_31_a_init(struct ecu_acc_31_a_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_31_a_acc_aeb_target_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_aeb_target_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_aeb_target_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_31_a_acc_aeb_target_rel_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_aeb_target_rel_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_aeb_target_rel_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_31_a_acc_aeb_target_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_aeb_target_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_aeb_target_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_elk_alert_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_elk_alert_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_elk_alert_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_aeb_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_aeb_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_aeb_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_aeb_text_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_aeb_text_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_aeb_text_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_aeb_targetmode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_aeb_targetmode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_aeb_targetmode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_voiceinfo_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_voiceinfo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_voiceinfo_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_f_radar_failure_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_f_radar_failure_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_f_radar_failure_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_rolling_counter_36_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_rolling_counter_36_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_rolling_counter_36_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_crc_check_36_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_crc_check_36_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_crc_check_36_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_r_lane_marker_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_r_lane_marker_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_r_lane_marker_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_las_mode_selection_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_las_mode_selection_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_las_mode_selection_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_iacchwa_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_iacchwa_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_iacchwa_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_las_warning_mode_selection_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_las_warning_mode_selection_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_las_warning_mode_selection_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_host_lane_right_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_host_lane_right_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_host_lane_right_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_host_lane_left_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_host_lane_left_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_host_lane_left_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_l_lane_marker_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_l_lane_marker_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_l_lane_marker_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_road_curvature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_road_curvature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_road_curvature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_road_curvature_near_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_road_curvature_near_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_road_curvature_near_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_road_curvature_far_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_road_curvature_far_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_road_curvature_far_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_lane_change_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_lane_change_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_lane_change_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_rolling_counter_30_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_rolling_counter_30_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_rolling_counter_30_a_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_crc_check_30_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_crc_check_30_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_crc_check_30_a_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_iacchwa_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_iacchwa_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_iacchwa_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_iacchwa_text_info_for_driver_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_iacchwa_text_info_for_driver_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_iacchwa_text_info_for_driver_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_driver_hands_off_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_driver_hands_off_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_driver_hands_off_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_target_based_lateral_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_target_based_lateral_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_target_based_lateral_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_emergency_lighting_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_emergency_lighting_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_emergency_lighting_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_ll_lane_detection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_ll_lane_detection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_ll_lane_detection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_adc_ecas_mode_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_adc_ecas_mode_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_adc_ecas_mode_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_rr_lane_detection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_rr_lane_detection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_rr_lane_detection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_high_beam_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_high_beam_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_high_beam_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_rolling_counter_30_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_rolling_counter_30_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_rolling_counter_30_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_crc_check_30_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_crc_check_30_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_crc_check_30_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_elk_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_elk_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_elk_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_elk_intervention_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_elk_intervention_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_elk_intervention_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_elk_enable_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_elk_enable_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_elk_enable_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ecu_acc_31_a_acc_lat_path_heading_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_lat_path_heading_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_lat_path_heading_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_lng_take_over_req_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_lng_take_over_req_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_lng_take_over_req_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_rolling_counter_367_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_rolling_counter_367_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_rolling_counter_367_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_31_a_acc_crc_check_367_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_crc_check_367_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_crc_check_367_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_31_a_acc_aeb_target_lat_rel_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_31_a_acc_aeb_target_lat_rel_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_31_a_acc_aeb_target_lat_rel_speed_is_in_range(uint16_t value);

/**
 * Pack message GW_355.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_355_pack(
    uint8_t *dst_p,
    const struct ecu_gw_355_t *src_p,
    size_t size);

/**
 * Unpack message GW_355.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_355_unpack(
    struct ecu_gw_355_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_355.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_355_init(struct ecu_gw_355_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_355_ems_cruise_switch_on_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_355_ems_cruise_switch_on_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_355_ems_cruise_switch_on_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_355_ems_cruise_switch_resume_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_355_ems_cruise_switch_resume_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_355_ems_cruise_switch_resume_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_355_ems_cruise_switch_cancel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_355_ems_cruise_switch_cancel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_355_ems_cruise_switch_cancel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_355_ems_cruise_switch_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_355_ems_cruise_switch_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_355_ems_cruise_switch_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_355_ems_cruise_distance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_355_ems_cruise_distance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_355_ems_cruise_distance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_355_ems_rolling_counter_355_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_355_ems_rolling_counter_355_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_355_ems_rolling_counter_355_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_355_ems_crc_check_355_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_355_ems_crc_check_355_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_355_ems_crc_check_355_is_in_range(uint8_t value);

/**
 * Pack message GW_3AF.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_3_af_pack(
    uint8_t *dst_p,
    const struct ecu_gw_3_af_t *src_p,
    size_t size);

/**
 * Unpack message GW_3AF.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_3_af_unpack(
    struct ecu_gw_3_af_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_3AF.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_3_af_init(struct ecu_gw_3_af_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_af_hu_slope_gradient_10m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_slope_gradient_10m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_slope_gradient_10m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_af_hu_slope_gradient_20m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_slope_gradient_20m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_slope_gradient_20m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_af_hu_slope_gradient_30m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_slope_gradient_30m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_slope_gradient_30m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_af_hu_slope_gradient_40m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_slope_gradient_40m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_slope_gradient_40m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_af_hu_slope_gradient_50m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_slope_gradient_50m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_slope_gradient_50m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_af_hu_slope_gradient_100m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_slope_gradient_100m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_slope_gradient_100m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_interval_velocity_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_interval_velocity_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_interval_velocity_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_interval_velocity_dis_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_interval_velocity_dis_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_interval_velocity_dis_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_accident_prone_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_accident_prone_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_accident_prone_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_accident_prone_distance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_accident_prone_distance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_accident_prone_distance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_bridge_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_bridge_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_bridge_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_bridge_dis_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_bridge_dis_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_bridge_dis_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_service_road_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_service_road_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_service_road_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_weather_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_weather_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_weather_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_nav_country_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_nav_country_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_nav_country_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_nav_speed_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_nav_speed_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_nav_speed_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_enter_ramp_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_enter_ramp_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_enter_ramp_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_nav_speed_limit_units_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_nav_speed_limit_units_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_nav_speed_limit_units_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_nav_speed_limit_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_nav_speed_limit_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_nav_speed_limit_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_ramp_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_ramp_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_ramp_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_nav_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_nav_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_nav_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_enter_curve_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_enter_curve_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_enter_curve_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_nav_current_road_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_nav_current_road_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_nav_current_road_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_nav_speed_limit_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_nav_speed_limit_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_nav_speed_limit_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_curve_distance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_curve_distance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_curve_distance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_af_hu_ramp_distance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_ramp_distance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_ramp_distance_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_novice_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_novice_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_novice_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_rolling_counter_3_af_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_rolling_counter_3_af_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_rolling_counter_3_af_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_crc_check_3_af_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_crc_check_3_af_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_crc_check_3_af_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_speed_limit_distance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_speed_limit_distance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_speed_limit_distance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_rolling_counter_3_bb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_rolling_counter_3_bb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_rolling_counter_3_bb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_crc_check_3_bb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_crc_check_3_bb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_crc_check_3_bb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_service_road_dis_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_service_road_dis_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_service_road_dis_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_lane_type_id1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_lane_type_id1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_lane_type_id1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_lane_type_id2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_lane_type_id2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_lane_type_id2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_lane_type_id3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_lane_type_id3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_lane_type_id3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_lane_type_id4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_lane_type_id4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_lane_type_id4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_lane_type_id5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_lane_type_id5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_lane_type_id5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_lane_type_id6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_lane_type_id6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_lane_type_id6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_ehp_heart_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_ehp_heart_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_ehp_heart_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_ehr_heart_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_ehr_heart_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_ehr_heart_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_adas_posn_pathldx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_adas_posn_pathldx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_adas_posn_pathldx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_af_hu_adas_posn_offset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_adas_posn_offset_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_adas_posn_offset_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_af_hu_rolling_counter_3_af_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_rolling_counter_3_af_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_rolling_counter_3_af_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_af_hu_crc_check_3_af_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_af_hu_crc_check_3_af_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_af_hu_crc_check_3_af_is_in_range(uint16_t value);

/**
 * Pack message GW_3B3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_3_b3_pack(
    uint8_t *dst_p,
    const struct ecu_gw_3_b3_t *src_p,
    size_t size);

/**
 * Unpack message GW_3B3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_3_b3_unpack(
    struct ecu_gw_3_b3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_3B3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_3_b3_init(struct ecu_gw_3_b3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_b3_bcm_door_handle_time_difference_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_b3_bcm_door_handle_time_difference_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_b3_bcm_door_handle_time_difference_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_b3_bcm_passenge_door_handle_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_b3_bcm_passenge_door_handle_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_b3_bcm_passenge_door_handle_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_b3_bcm_right_rear_door_handle_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_b3_bcm_right_rear_door_handle_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_b3_bcm_right_rear_door_handle_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_b3_bcm_rear_foglamp_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_b3_bcm_rear_foglamp_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_b3_bcm_rear_foglamp_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_b3_bcm_brake_lamp_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_b3_bcm_brake_lamp_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_b3_bcm_brake_lamp_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_b3_bcm_right_rear_foglamp_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_b3_bcm_right_rear_foglamp_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_b3_bcm_right_rear_foglamp_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_b3_bcm_left_rear_foglamp_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_b3_bcm_left_rear_foglamp_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_b3_bcm_left_rear_foglamp_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_b3_bcm_rear_position_lamp_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_b3_bcm_rear_position_lamp_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_b3_bcm_rear_position_lamp_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_b3_lcm_reverse_light_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_b3_lcm_reverse_light_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_b3_lcm_reverse_light_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_b3_bcm_reverse_lamp_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_b3_bcm_reverse_lamp_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_b3_bcm_reverse_lamp_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_b3_bcm_chm_lamp_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_b3_bcm_chm_lamp_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_b3_bcm_chm_lamp_error_is_in_range(uint8_t value);

/**
 * Pack message GW_3BD.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_3_bd_pack(
    uint8_t *dst_p,
    const struct ecu_gw_3_bd_t *src_p,
    size_t size);

/**
 * Unpack message GW_3BD.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_3_bd_unpack(
    struct ecu_gw_3_bd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_3BD.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_3_bd_init(struct ecu_gw_3_bd_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_csla_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_csla_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_csla_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_hwa_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_hwa_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_hwa_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_irlc_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_irlc_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_irlc_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_elk_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_elk_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_elk_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_lane_change_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_lane_change_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_lane_change_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_ess_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_ess_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_ess_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_tla_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_tla_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_tla_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_ads_road_voice_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_ads_road_voice_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_ads_road_voice_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_ads_rescue_confirm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_ads_rescue_confirm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_ads_rescue_confirm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_udlc_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_udlc_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_udlc_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_transparent_value_car_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_transparent_value_car_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_transparent_value_car_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_3_davm_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_3_davm_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_3_davm_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_ads_lane_change_voice_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_ads_lane_change_voice_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_ads_lane_change_voice_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_ads_safe_voice_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_ads_safe_voice_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_ads_safe_voice_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_rolling_counter_394_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_rolling_counter_394_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_rolling_counter_394_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_crc_check_394_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_crc_check_394_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_crc_check_394_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_avm_map_display_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_avm_map_display_feedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_avm_map_display_feedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_rebroadcast_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_rebroadcast_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_rebroadcast_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_360_av_mdetection_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_360_av_mdetection_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_360_av_mdetection_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_real_time_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_real_time_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_real_time_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_bd_hu_dvr_edit_selected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_dvr_edit_selected_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_dvr_edit_selected_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_vision_angle_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_vision_angle_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_vision_angle_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_navi_icon_number_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_navi_icon_number_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_navi_icon_number_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_auto_view_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_auto_view_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_auto_view_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_sd_capacity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_sd_capacity_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_sd_capacity_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_seeoffanimation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_seeoffanimation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_seeoffanimation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_tuid_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_tuid_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_tuid_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_register_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_register_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_register_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_surronding_monitor_done_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_surronding_monitor_done_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_surronding_monitor_done_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_bcall_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_bcall_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_bcall_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_dvr_error_record_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_dvr_error_record_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_dvr_error_record_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_dvr_system_imprint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_dvr_system_imprint_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_dvr_system_imprint_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ecu_gw_3_bd_hu_navi_distance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_navi_distance_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_navi_distance_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_navi_icon_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_navi_icon_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_navi_icon_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_vc_vr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_vc_vr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_vc_vr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_hud_pos_adjust_inc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_hud_pos_adjust_inc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_hud_pos_adjust_inc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_hud_pos_adjust_dec_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_hud_pos_adjust_dec_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_hud_pos_adjust_dec_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_bd_hu_compass_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_compass_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_compass_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_apa_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_apa_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_apa_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_remote_disp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_remote_disp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_remote_disp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_laeb_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_laeb_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_laeb_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_current_media_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_current_media_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_current_media_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_apa_remote_disp_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_apa_remote_disp_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_apa_remote_disp_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_rads_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_rads_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_rads_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_language_sync_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_language_sync_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_language_sync_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_asp_remind_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_asp_remind_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_asp_remind_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_pac_mode_select_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_pac_mode_select_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_pac_mode_select_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_ext_remote_detect_upload_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_ext_remote_detect_upload_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_ext_remote_detect_upload_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_asp_mode_select_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_asp_mode_select_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_asp_mode_select_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_cross_parking_mode_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_cross_parking_mode_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_cross_parking_mode_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_asp_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_asp_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_asp_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_apa_mode_select_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_apa_mode_select_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_apa_mode_select_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_rear_foglamp_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_rear_foglamp_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_rear_foglamp_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_auto_head_li_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_auto_head_li_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_auto_head_li_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_body_colour_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_body_colour_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_body_colour_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_avmdvr_replay_mode_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_avmdvr_replay_mode_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_avmdvr_replay_mode_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_wheel_hub_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_wheel_hub_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_wheel_hub_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_license_number_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_license_number_set_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_license_number_set_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_license_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_license_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_license_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_license_number_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_license_number_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_license_number_check_sum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_apa_theme_change_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_apa_theme_change_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_apa_theme_change_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_bd_hu_dvr_update_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_bd_hu_dvr_update_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_bd_hu_dvr_update_req_is_in_range(uint8_t value);

/**
 * Pack message GW_3C4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_3_c4_pack(
    uint8_t *dst_p,
    const struct ecu_gw_3_c4_t *src_p,
    size_t size);

/**
 * Unpack message GW_3C4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_3_c4_unpack(
    struct ecu_gw_3_c4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_3C4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_3_c4_init(struct ecu_gw_3_c4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_enter_tunnel_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_enter_tunnel_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_enter_tunnel_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_c4_hu_road_curvature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_road_curvature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_road_curvature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_tunnel_distance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_tunnel_distance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_tunnel_distance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_c4_hu_road_curvature_far_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_road_curvature_far_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_road_curvature_far_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_tunnel_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_tunnel_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_tunnel_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_nav_guigance_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_nav_guigance_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_nav_guigance_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_rolling_counter_3_b8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_rolling_counter_3_b8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_rolling_counter_3_b8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_crc_check_3_b8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_crc_check_3_b8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_crc_check_3_b8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_ramp_side_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_ramp_side_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_ramp_side_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_forward_road_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_forward_road_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_forward_road_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_lane_cnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_lane_cnt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_lane_cnt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_toll_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_toll_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_toll_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_toll_dis_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_toll_dis_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_toll_dis_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_road_traffic_flow_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_road_traffic_flow_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_road_traffic_flow_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_map_data_update_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_map_data_update_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_map_data_update_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_rolling_counter_3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_rolling_counter_3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_rolling_counter_3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_crc_check_3_c2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_crc_check_3_c2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_crc_check_3_c2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_to_numchange_of_lanes_dist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_to_numchange_of_lanes_dist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_to_numchange_of_lanes_dist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_lane_changtype_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_lane_changtype_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_lane_changtype_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_c4_hu_road_curvature_10m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_road_curvature_10m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_road_curvature_10m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_c4_hu_road_curvature_20m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_road_curvature_20m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_road_curvature_20m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_c4_hu_road_curvature_30m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_road_curvature_30m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_road_curvature_30m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_c4_hu_road_curvature_40m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_road_curvature_40m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_road_curvature_40m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_rolling_counter_3_c4_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_rolling_counter_3_c4_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_rolling_counter_3_c4_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_crc_check_3_c4_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_crc_check_3_c4_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_crc_check_3_c4_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_c4_hu_road_curvature_50m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_road_curvature_50m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_road_curvature_50m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_c4_hu_road_curvature_60m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_road_curvature_60m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_road_curvature_60m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_c4_hu_road_curvature_70m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_road_curvature_70m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_road_curvature_70m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_c4_hu_road_curvature_80m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_road_curvature_80m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_road_curvature_80m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_c4_hu_road_curvature_90m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_road_curvature_90m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_road_curvature_90m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_rolling_counter_3_c6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_rolling_counter_3_c6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_rolling_counter_3_c6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_crc_check_3_c6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_crc_check_3_c6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_crc_check_3_c6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_c4_hu_road_curvature_100m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_road_curvature_100m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_road_curvature_100m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_c4_hu_road_curvature_300m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_road_curvature_300m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_road_curvature_300m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_c4_hu_road_curvature_400m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_road_curvature_400m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_road_curvature_400m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_c4_hu_road_curvature_600m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_road_curvature_600m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_road_curvature_600m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_map_match_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_map_match_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_map_match_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_rolling_counter_3_c7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_rolling_counter_3_c7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_rolling_counter_3_c7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_crc_check_3_c7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_crc_check_3_c7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_crc_check_3_c7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_c4_hu_rolling_counter_3_c4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_rolling_counter_3_c4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_rolling_counter_3_c4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_c4_hu_crc_check_3_c4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_c4_hu_crc_check_3_c4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_c4_hu_crc_check_3_c4_is_in_range(uint16_t value);

/**
 * Pack message GW_3FD.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_3_fd_pack(
    uint8_t *dst_p,
    const struct ecu_gw_3_fd_t *src_p,
    size_t size);

/**
 * Unpack message GW_3FD.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_3_fd_unpack(
    struct ecu_gw_3_fd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_3FD.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_3_fd_init(struct ecu_gw_3_fd_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_fd_bcm_drive_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_fd_bcm_drive_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_fd_bcm_drive_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_fd_bcm_eps_torq_syn_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_fd_bcm_eps_torq_syn_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_fd_bcm_eps_torq_syn_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_fd_bcm_drv_mod_sw_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_fd_bcm_drv_mod_sw_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_fd_bcm_drv_mod_sw_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_fd_bcm_eps_torque_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_fd_bcm_eps_torque_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_fd_bcm_eps_torque_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_fd_bcm_power_manage_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_fd_bcm_power_manage_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_fd_bcm_power_manage_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_fd_bcm_rear_foglamp_status_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_fd_bcm_rear_foglamp_status_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_fd_bcm_rear_foglamp_status_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_fd_bcm_aut_head_li_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_fd_bcm_aut_head_li_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_fd_bcm_aut_head_li_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_fd_bcm_front_windshield_warm_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_fd_bcm_front_windshield_warm_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_fd_bcm_front_windshield_warm_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_fd_bcm_switch_dimmerlevel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_fd_bcm_switch_dimmerlevel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_fd_bcm_switch_dimmerlevel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_fd_bcm_rolling_counter_3_fd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_fd_bcm_rolling_counter_3_fd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_fd_bcm_rolling_counter_3_fd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_fd_bcm_crc_check_3_fd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_fd_bcm_crc_check_3_fd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_fd_bcm_crc_check_3_fd_is_in_range(uint8_t value);

/**
 * Pack message GW_3FF.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_3_ff_pack(
    uint8_t *dst_p,
    const struct ecu_gw_3_ff_t *src_p,
    size_t size);

/**
 * Unpack message GW_3FF.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_3_ff_unpack(
    struct ecu_gw_3_ff_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_3FF.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_3_ff_init(struct ecu_gw_3_ff_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_music_play_request_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_music_play_request_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_music_play_request_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_music_light_mode_select_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_music_light_mode_select_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_music_light_mode_select_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_follow_me_turnon_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_follow_me_turnon_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_follow_me_turnon_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_peps_welcome_light_staus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_peps_welcome_light_staus_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_peps_welcome_light_staus_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_musiclightfeedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_musiclightfeedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_musiclightfeedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_front_position_lamp_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_front_position_lamp_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_front_position_lamp_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_auto_headlight_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_auto_headlight_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_auto_headlight_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_front_foglamp_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_front_foglamp_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_front_foglamp_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_position_lamp_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_position_lamp_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_position_lamp_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_right_front_foglamp_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_right_front_foglamp_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_right_front_foglamp_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_left_front_foglamp_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_left_front_foglamp_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_left_front_foglamp_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_right_low_beam_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_right_low_beam_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_right_low_beam_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_left_low_beam_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_left_low_beam_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_left_low_beam_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_right_day_lamp_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_right_day_lamp_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_right_day_lamp_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_left_day_lamp_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_left_day_lamp_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_left_day_lamp_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_turn_indicator_right_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_turn_indicator_right_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_turn_indicator_right_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_turn_indicator_left_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_turn_indicator_left_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_turn_indicator_left_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_position_lamp_switch_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_position_lamp_switch_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_position_lamp_switch_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_lcm_drl_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_lcm_drl_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_lcm_drl_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_follow_me_home_light_set_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_follow_me_home_light_set_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_follow_me_home_light_set_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_floor_lamp_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_floor_lamp_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_floor_lamp_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_high_beam_lamp_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_high_beam_lamp_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_high_beam_lamp_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_rolling_counter_3_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_rolling_counter_3_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_rolling_counter_3_ff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ff_bcm_crc_check_3_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ff_bcm_crc_check_3_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ff_bcm_crc_check_3_ff_is_in_range(uint8_t value);

/**
 * Pack message GW_51E.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_51_e_pack(
    uint8_t *dst_p,
    const struct ecu_gw_51_e_t *src_p,
    size_t size);

/**
 * Unpack message GW_51E.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_51_e_unpack(
    struct ecu_gw_51_e_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_51E.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_51_e_init(struct ecu_gw_51_e_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_51_e_tpms_lf_temperature_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_51_e_tpms_lf_temperature_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_51_e_tpms_lf_temperature_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_51_e_tpms_rf_temperature_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_51_e_tpms_rf_temperature_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_51_e_tpms_rf_temperature_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_51_e_tpms_rr_temperature_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_51_e_tpms_rr_temperature_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_51_e_tpms_rr_temperature_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_51_e_tpms_lr_temperature_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_51_e_tpms_lr_temperature_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_51_e_tpms_lr_temperature_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_51_e_tpms_tire_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_51_e_tpms_tire_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_51_e_tpms_tire_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_51_e_tpms_tire_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_51_e_tpms_tire_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_51_e_tpms_tire_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_51_e_tpms_lf_leakage_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_51_e_tpms_lf_leakage_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_51_e_tpms_lf_leakage_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_51_e_tpms_rf_leakage_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_51_e_tpms_rf_leakage_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_51_e_tpms_rf_leakage_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_51_e_tpms_rr_leakage_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_51_e_tpms_rr_leakage_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_51_e_tpms_rr_leakage_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_51_e_tpms_lr_leakage_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_51_e_tpms_lr_leakage_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_51_e_tpms_lr_leakage_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_51_e_tpms_suggestion_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_51_e_tpms_suggestion_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_51_e_tpms_suggestion_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_51_e_tpms_commendatorypressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_51_e_tpms_commendatorypressure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_51_e_tpms_commendatorypressure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_51_e_tpms_aerate_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_51_e_tpms_aerate_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_51_e_tpms_aerate_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_51_e_bcm_rolling_counter_51_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_51_e_bcm_rolling_counter_51_e_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_51_e_bcm_rolling_counter_51_e_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_51_e_bcm_crc_check_51_e_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_51_e_bcm_crc_check_51_e_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_51_e_bcm_crc_check_51_e_is_in_range(uint8_t value);

/**
 * Pack message ACC_693.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_acc_693_pack(
    uint8_t *dst_p,
    const struct ecu_acc_693_t *src_p,
    size_t size);

/**
 * Unpack message ACC_693.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_acc_693_unpack(
    struct ecu_acc_693_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_693.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_acc_693_init(struct ecu_acc_693_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_693_acc_dtc1_high_byte_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_693_acc_dtc1_high_byte_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_693_acc_dtc1_high_byte_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_693_acc_dtc1_midd_byte_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_693_acc_dtc1_midd_byte_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_693_acc_dtc1_midd_byte_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_693_acc_dtc1_low_byte_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_693_acc_dtc1_low_byte_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_693_acc_dtc1_low_byte_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_693_acc_dtc1_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_693_acc_dtc1_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_693_acc_dtc1_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_693_acc_dtc2_high_byte_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_693_acc_dtc2_high_byte_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_693_acc_dtc2_high_byte_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_693_acc_dtc2_midd_byte_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_693_acc_dtc2_midd_byte_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_693_acc_dtc2_midd_byte_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_693_acc_dtc2_low_byte_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_693_acc_dtc2_low_byte_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_693_acc_dtc2_low_byte_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_693_acc_dtc2_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_693_acc_dtc2_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_693_acc_dtc2_status_is_in_range(uint8_t value);

/**
 * Pack message LAS_694.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_las_694_pack(
    uint8_t *dst_p,
    const struct ecu_las_694_t *src_p,
    size_t size);

/**
 * Unpack message LAS_694.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_las_694_unpack(
    struct ecu_las_694_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LAS_694.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_las_694_init(struct ecu_las_694_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_694_las_dtc1_high_byte_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_694_las_dtc1_high_byte_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_694_las_dtc1_high_byte_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_694_las_dtc1_midd_byte_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_694_las_dtc1_midd_byte_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_694_las_dtc1_midd_byte_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_694_las_dtc1_low_byte_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_694_las_dtc1_low_byte_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_694_las_dtc1_low_byte_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_694_las_dtc1_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_694_las_dtc1_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_694_las_dtc1_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_694_las_dtc2_high_byte_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_694_las_dtc2_high_byte_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_694_las_dtc2_high_byte_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_694_las_dtc2_midd_byte_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_694_las_dtc2_midd_byte_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_694_las_dtc2_midd_byte_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_694_las_dtc2_low_byte_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_694_las_dtc2_low_byte_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_694_las_dtc2_low_byte_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_694_las_dtc2_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_694_las_dtc2_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_694_las_dtc2_status_is_in_range(uint8_t value);

/**
 * Pack message LAS_452.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_las_452_pack(
    uint8_t *dst_p,
    const struct ecu_las_452_t *src_p,
    size_t size);

/**
 * Unpack message LAS_452.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_las_452_unpack(
    struct ecu_las_452_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LAS_452.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_las_452_init(struct ecu_las_452_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_452_nm_message452_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_452_nm_message452_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_452_nm_message452_is_in_range(uint8_t value);

/**
 * Pack message GW_28C.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_28_c_pack(
    uint8_t *dst_p,
    const struct ecu_gw_28_c_t *src_p,
    size_t size);

/**
 * Unpack message GW_28C.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_28_c_unpack(
    struct ecu_gw_28_c_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_28C.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_28_c_init(struct ecu_gw_28_c_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_set_reduce_switch_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_set_reduce_switch_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_set_reduce_switch_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_res_plus_switch_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_res_plus_switch_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_res_plus_switch_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_cancle_switch_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_cancle_switch_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_cancle_switch_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_crusie_switch_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_crusie_switch_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_crusie_switch_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_eps_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_eps_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_eps_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_iac_cenable_switch_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_iac_cenable_switch_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_iac_cenable_switch_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_lim_switch_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_lim_switch_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_lim_switch_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_dist_switch_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_dist_switch_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_dist_switch_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_hod_system_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_hod_system_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_hod_system_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_handsoff_detect_result_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_handsoff_detect_result_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_handsoff_detect_result_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_dist_plus_switch_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_dist_plus_switch_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_dist_plus_switch_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_dist_reduce_switch_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_dist_reduce_switch_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_dist_reduce_switch_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_hod_calibrated_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_hod_calibrated_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_hod_calibrated_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_hod_lin_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_hod_lin_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_hod_lin_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_hod_app_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_hod_app_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_hod_app_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_handsoff_ability_detect_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_handsoff_ability_detect_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_handsoff_ability_detect_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_hod_senser_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_hod_senser_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_hod_senser_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_ers_reduce_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_ers_reduce_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_ers_reduce_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_ers_plus_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_ers_plus_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_ers_plus_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_diag_info_sw_28_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_diag_info_sw_28_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_diag_info_sw_28_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_gearshift_plus_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_gearshift_plus_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_gearshift_plus_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_gearshift_reduce_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_gearshift_reduce_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_gearshift_reduce_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_rolling_counter_28_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_rolling_counter_28_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_rolling_counter_28_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_28_c_gw_mfs_crc_check_28_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_28_c_gw_mfs_crc_check_28_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_28_c_gw_mfs_crc_check_28_c_is_in_range(uint8_t value);

/**
 * Pack message GW_331.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_331_pack(
    uint8_t *dst_p,
    const struct ecu_gw_331_t *src_p,
    size_t size);

/**
 * Unpack message GW_331.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_331_unpack(
    struct ecu_gw_331_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_331.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_331_init(struct ecu_gw_331_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_331_tcu_failure_lamp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_331_tcu_failure_lamp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_331_tcu_failure_lamp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_331_tcu_trans_temp_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_331_tcu_trans_temp_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_331_tcu_trans_temp_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_331_tcu_coolant_fan_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_331_tcu_coolant_fan_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_331_tcu_coolant_fan_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_331_tcu_trans_fluid_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_331_tcu_trans_fluid_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_331_tcu_trans_fluid_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_331_tcu_k0_clutch_exit_oil_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_331_tcu_k0_clutch_exit_oil_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_331_tcu_k0_clutch_exit_oil_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_331_tcu_gear_for_display_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_331_tcu_gear_for_display_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_331_tcu_gear_for_display_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_331_tcu_rotor_acutal_cooling_flow_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_331_tcu_rotor_acutal_cooling_flow_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_331_tcu_rotor_acutal_cooling_flow_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_331_tcu_park_rel_a_posn_ip_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_331_tcu_park_rel_a_posn_ip_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_331_tcu_park_rel_a_posn_ip_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_331_tcu_park_rel_m_posn_ip_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_331_tcu_park_rel_m_posn_ip_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_331_tcu_park_rel_m_posn_ip_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_331_tcu_park_select_ip_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_331_tcu_park_select_ip_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_331_tcu_park_select_ip_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_331_tcu_esl_fault_ip_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_331_tcu_esl_fault_ip_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_331_tcu_esl_fault_ip_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_331_tcu_arc_fault_ip_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_331_tcu_arc_fault_ip_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_331_tcu_arc_fault_ip_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_331_tcu_powerplant_status_ip_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_331_tcu_powerplant_status_ip_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_331_tcu_powerplant_status_ip_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_331_tcu_trans_fault_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_331_tcu_trans_fault_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_331_tcu_trans_fault_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_331_tcu_rolling_counter_338_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_331_tcu_rolling_counter_338_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_331_tcu_rolling_counter_338_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_331_tcu_crc_check_338_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_331_tcu_crc_check_338_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_331_tcu_crc_check_338_is_in_range(uint8_t value);

/**
 * Pack message GW_1AF.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_1_af_pack(
    uint8_t *dst_p,
    const struct ecu_gw_1_af_t *src_p,
    size_t size);

/**
 * Unpack message GW_1AF.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_1_af_unpack(
    struct ecu_gw_1_af_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_1AF.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_1_af_init(struct ecu_gw_1_af_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_1_af_tcu_stl_kfailure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_1_af_tcu_stl_kfailure_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_1_af_tcu_stl_kfailure_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_1_af_tcu_actual_driving_gear_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_1_af_tcu_actual_driving_gear_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_1_af_tcu_actual_driving_gear_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_1_af_tcu_shift_postion_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_1_af_tcu_shift_postion_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_1_af_tcu_shift_postion_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_1_af_tcu_actual_driving_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_1_af_tcu_actual_driving_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_1_af_tcu_actual_driving_gear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_1_af_tcu_gear_shift_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_1_af_tcu_gear_shift_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_1_af_tcu_gear_shift_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_1_af_tcu_actual_preselect_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_1_af_tcu_actual_preselect_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_1_af_tcu_actual_preselect_gear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_1_af_tcu_input_shaft_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_1_af_tcu_input_shaft_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_1_af_tcu_input_shaft_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_1_af_tcu_tho_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_1_af_tcu_tho_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_1_af_tcu_tho_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_1_af_tcu_gear_ratio_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_1_af_tcu_gear_ratio_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_1_af_tcu_gear_ratio_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_1_af_tcu_tip_switch_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_1_af_tcu_tip_switch_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_1_af_tcu_tip_switch_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_1_af_tcu_rolling_counter_1_a8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_1_af_tcu_rolling_counter_1_a8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_1_af_tcu_rolling_counter_1_a8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_1_af_tcu_crc_check_1_a8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_1_af_tcu_crc_check_1_a8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_1_af_tcu_crc_check_1_a8_is_in_range(uint8_t value);

/**
 * Pack message GW_320.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_320_pack(
    uint8_t *dst_p,
    const struct ecu_gw_320_t *src_p,
    size_t size);

/**
 * Unpack message GW_320.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_320_unpack(
    struct ecu_gw_320_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_320.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_320_init(struct ecu_gw_320_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_320_gw_ot_amode_chks_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_320_gw_ot_amode_chks_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_320_gw_ot_amode_chks_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_320_gw_dcan_diag_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_320_gw_dcan_diag_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_320_gw_dcan_diag_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_320_gw_gateway_failure_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_320_gw_gateway_failure_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_320_gw_gateway_failure_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_320_gw_ot_amode_cntr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_320_gw_ot_amode_cntr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_320_gw_ot_amode_cntr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_320_gw_ads_sec_oc_verify_failure_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_320_gw_ads_sec_oc_verify_failure_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_320_gw_ads_sec_oc_verify_failure_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_320_gw_reset_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_320_gw_reset_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_320_gw_reset_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_320_gw_ot_amode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_320_gw_ot_amode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_320_gw_ot_amode_is_in_range(uint8_t value);

/**
 * Pack message LAS_39A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_las_39_a_pack(
    uint8_t *dst_p,
    const struct ecu_las_39_a_t *src_p,
    size_t size);

/**
 * Unpack message LAS_39A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_las_39_a_unpack(
    struct ecu_las_39_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LAS_39A.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_las_39_a_init(struct ecu_las_39_a_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_tsr_speed_limit_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_tsr_speed_limit_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_tsr_speed_limit_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_overspeed_visual_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_overspeed_visual_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_overspeed_visual_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_overspeed_sound_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_overspeed_sound_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_overspeed_sound_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_overspeed_warning_enable_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_overspeed_warning_enable_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_overspeed_warning_enable_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_overspeed_warning_offset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_overspeed_warning_offset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_overspeed_warning_offset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_hma_light_distribution_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_hma_light_distribution_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_hma_light_distribution_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_hma_enable_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_hma_enable_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_hma_enable_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_front_camera_calibration_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_front_camera_calibration_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_front_camera_calibration_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_front_camera_failure_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_front_camera_failure_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_front_camera_failure_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_tsr_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_tsr_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_tsr_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_overspeed_sound_warning_en_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_overspeed_sound_warning_en_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_overspeed_sound_warning_en_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_tsr_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_tsr_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_tsr_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_tsr_host_spd_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_tsr_host_spd_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_tsr_host_spd_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_hma_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_hma_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_hma_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_tsr_host_spd_limit_units_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_tsr_host_spd_limit_units_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_tsr_host_spd_limit_units_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_rolling_counter_332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_rolling_counter_332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_rolling_counter_332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_crc_check_332_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_crc_check_332_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_crc_check_332_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_rolling_counter_3_d4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_rolling_counter_3_d4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_rolling_counter_3_d4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_crc_check_3_d4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_crc_check_3_d4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_crc_check_3_d4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_rolling_counter_3_c0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_rolling_counter_3_c0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_rolling_counter_3_c0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_crc_check_3_c0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_crc_check_3_c0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_crc_check_3_c0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_rolling_counter_37_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_rolling_counter_37_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_rolling_counter_37_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_crc_check_37_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_crc_check_37_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_crc_check_37_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_crosswalk_lng_range_h_lane_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_crosswalk_lng_range_h_lane_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_crosswalk_lng_range_h_lane_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_rd4_road_infor_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_rd4_road_infor_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_rd4_road_infor_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_rd2_road_infor_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_rd2_road_infor_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_rd2_road_infor_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_road_feature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_road_feature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_road_feature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_rd4_long_distence_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_rd4_long_distence_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_rd4_long_distence_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_rd3_long_distence_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_rd3_long_distence_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_rd3_long_distence_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_rd2_long_distence_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_rd2_long_distence_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_rd2_long_distence_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_rd1_long_distence_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_rd1_long_distence_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_rd1_long_distence_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_rd3_road_infor_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_rd3_road_infor_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_rd3_road_infor_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_rd1_road_infor_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_rd1_road_infor_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_rd1_road_infor_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_rolling_counter_579_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_rolling_counter_579_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_rolling_counter_579_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_las_crc_check_579_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_las_crc_check_579_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_las_crc_check_579_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_39_a_acc_rolling_counter_39_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_acc_rolling_counter_39_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_acc_rolling_counter_39_a_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_39_a_acc_crc_check_39_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_39_a_acc_crc_check_39_a_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_39_a_acc_crc_check_39_a_is_in_range(uint16_t value);

/**
 * Pack message GW_310.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_310_pack(
    uint8_t *dst_p,
    const struct ecu_gw_310_t *src_p,
    size_t size);

/**
 * Unpack message GW_310.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_310_unpack(
    struct ecu_gw_310_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_310.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_310_init(struct ecu_gw_310_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_310_amp_vol_speed_enable_set_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_310_amp_vol_speed_enable_set_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_310_amp_vol_speed_enable_set_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_310_amp_head_spkniviset_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_310_amp_head_spkniviset_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_310_amp_head_spkniviset_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_310_amp_head_spk_tel_set_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_310_amp_head_spk_tel_set_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_310_amp_head_spk_tel_set_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_310_amp_head_spk_media_set_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_310_amp_head_spk_media_set_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_310_amp_head_spk_media_set_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_310_amp_head_spk_vol_set_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_310_amp_head_spk_vol_set_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_310_amp_head_spk_vol_set_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_310_amp_alarm_vol_set_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_310_amp_alarm_vol_set_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_310_amp_alarm_vol_set_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_310_amp_lr_head_spk_balance_set_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_310_amp_lr_head_spk_balance_set_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_310_amp_lr_head_spk_balance_set_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_310_amp_alarm_style_set_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_310_amp_alarm_style_set_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_310_amp_alarm_style_set_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_310_amp_touch_vol_set_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_310_amp_touch_vol_set_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_310_amp_touch_vol_set_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_310_amp_spk_channel_set_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_310_amp_spk_channel_set_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_310_amp_spk_channel_set_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_310_amp_muteset_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_310_amp_muteset_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_310_amp_muteset_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_310_amp_ip_enable_alarm_failure_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_310_amp_ip_enable_alarm_failure_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_310_amp_ip_enable_alarm_failure_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_310_amp_all_alarm_failure_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_310_amp_all_alarm_failure_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_310_amp_all_alarm_failure_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_310_amp_vol_speed_lev_set_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_310_amp_vol_speed_lev_set_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_310_amp_vol_speed_lev_set_status_is_in_range(uint8_t value);

/**
 * Pack message GW_3E8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_3_e8_pack(
    uint8_t *dst_p,
    const struct ecu_gw_3_e8_t *src_p,
    size_t size);

/**
 * Unpack message GW_3E8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_3_e8_unpack(
    struct ecu_gw_3_e8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_3E8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_3_e8_init(struct ecu_gw_3_e8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e8_bcm_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e8_bcm_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e8_bcm_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e8_bcm_sof_q_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e8_bcm_sof_q_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e8_bcm_sof_q_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e8_bcm_sof_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e8_bcm_sof_v1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e8_bcm_sof_v1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e8_bcm_sof_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e8_bcm_sof_v2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e8_bcm_sof_v2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_e8_bcm_sof_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e8_bcm_sof_t_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e8_bcm_sof_t_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e8_bcm_soc_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e8_bcm_soc_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e8_bcm_soc_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e8_bcm_sof_q_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e8_bcm_sof_q_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e8_bcm_sof_q_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e8_bcm_sof_v1_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e8_bcm_sof_v1_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e8_bcm_sof_v1_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e8_bcm_sof_v2_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e8_bcm_sof_v2_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e8_bcm_sof_v2_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e8_bcm_sof_t_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e8_bcm_sof_t_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e8_bcm_sof_t_state_is_in_range(uint8_t value);

/**
 * Pack message GW_3E7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_3_e7_pack(
    uint8_t *dst_p,
    const struct ecu_gw_3_e7_t *src_p,
    size_t size);

/**
 * Unpack message GW_3E7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_3_e7_unpack(
    struct ecu_gw_3_e7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_3E7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_3_e7_init(struct ecu_gw_3_e7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_e7_bcm_u_batt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e7_bcm_u_batt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e7_bcm_u_batt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e7_bcm_i_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e7_bcm_i_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e7_bcm_i_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_3_e7_bcm_i_batt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e7_bcm_i_batt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e7_bcm_i_batt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e7_bcm_t_batt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e7_bcm_t_batt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e7_bcm_t_batt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e7_bcm_ibatt_quiescent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e7_bcm_ibatt_quiescent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e7_bcm_ibatt_quiescent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e7_bcm_status_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e7_bcm_status_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e7_bcm_status_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e7_bcm_status_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e7_bcm_status_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e7_bcm_status_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e7_bcm_status_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e7_bcm_status_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e7_bcm_status_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e7_bcm_error_calib_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e7_bcm_error_calib_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e7_bcm_error_calib_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e7_bcm_error_ident_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e7_bcm_error_ident_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e7_bcm_error_ident_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e7_bcm_resp_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e7_bcm_resp_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e7_bcm_resp_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_e7_bcm_flag_inconsistency_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_e7_bcm_flag_inconsistency_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_e7_bcm_flag_inconsistency_is_in_range(uint8_t value);

/**
 * Pack message GW_38A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_38_a_pack(
    uint8_t *dst_p,
    const struct ecu_gw_38_a_t *src_p,
    size_t size);

/**
 * Unpack message GW_38A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_38_a_unpack(
    struct ecu_gw_38_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_38A.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_38_a_init(struct ecu_gw_38_a_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_down_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_down_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_down_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_up_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_up_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_up_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_right_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_right_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_right_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_left_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_left_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_left_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_dvr_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_dvr_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_dvr_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_mode_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_mode_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_mode_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_speech_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_speech_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_speech_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_ok_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_ok_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_ok_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_mute_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_mute_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_mute_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_vol_reduce_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_vol_reduce_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_vol_reduce_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_vol_plus_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_vol_plus_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_vol_plus_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_cust_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_cust_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_cust_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_answer_switch_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_answer_switch_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_answer_switch_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_hungup_switch_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_hungup_switch_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_hungup_switch_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_seek_reduce_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_seek_reduce_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_seek_reduce_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_seek_plus_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_seek_plus_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_seek_plus_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_we_chat_switch_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_we_chat_switch_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_we_chat_switch_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_avm_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_avm_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_avm_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_38_a_gw_mfs_diag_info_sw_38_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_38_a_gw_mfs_diag_info_sw_38_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_38_a_gw_mfs_diag_info_sw_38_a_is_in_range(uint8_t value);

/**
 * Pack message GW_249.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_249_pack(
    uint8_t *dst_p,
    const struct ecu_gw_249_t *src_p,
    size_t size);

/**
 * Unpack message GW_249.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_249_unpack(
    struct ecu_gw_249_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_249.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_249_init(struct ecu_gw_249_t *msg_p);

/**
 * Pack message GW_262.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_262_pack(
    uint8_t *dst_p,
    const struct ecu_gw_262_t *src_p,
    size_t size);

/**
 * Unpack message GW_262.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_262_unpack(
    struct ecu_gw_262_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_262.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_262_init(struct ecu_gw_262_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_start_indicator_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_start_indicator_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_start_indicator_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_remote_apa_done_key_off_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_remote_apa_done_key_off_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_remote_apa_done_key_off_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_apa_engine0ff_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_apa_engine0ff_feedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_apa_engine0ff_feedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_apa_lock_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_apa_lock_feedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_apa_lock_feedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_apa_remote_parking_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_apa_remote_parking_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_apa_remote_parking_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_unallow_start_escl_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_unallow_start_escl_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_unallow_start_escl_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_apa_close_win_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_apa_close_win_feedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_apa_close_win_feedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_remote_control_ac_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_remote_control_ac_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_remote_control_ac_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_power_distribution_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_power_distribution_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_power_distribution_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_unallow_start_escl_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_unallow_start_escl_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_unallow_start_escl_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_unallow_start_signal_not_pn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_unallow_start_signal_not_pn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_unallow_start_signal_not_pn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_immo_failed_alarmsignal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_immo_failed_alarmsignal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_immo_failed_alarmsignal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_startup_button_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_startup_button_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_startup_button_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_remote_start_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_remote_start_feedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_remote_start_feedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_apa_power_mirror_fold_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_apa_power_mirror_fold_feedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_apa_power_mirror_fold_feedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_engine_startup_inhibit_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_engine_startup_inhibit_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_engine_startup_inhibit_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_power_distribution_fault_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_power_distribution_fault_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_power_distribution_fault_bit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_engine_startup_inhibit_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_engine_startup_inhibit_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_engine_startup_inhibit_fb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_immo_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_immo_feedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_immo_feedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_remote_start_key_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_remote_start_key_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_remote_start_key_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_peps_fail_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_peps_fail_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_peps_fail_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_key_standby_position_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_key_standby_position_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_key_standby_position_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_apa_remote_parking_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_apa_remote_parking_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_apa_remote_parking_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_rolling_counter_262_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_rolling_counter_262_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_rolling_counter_262_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_262_peps_crc_check_262_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_262_peps_crc_check_262_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_262_peps_crc_check_262_is_in_range(uint8_t value);

/**
 * Pack message GW_334.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_334_pack(
    uint8_t *dst_p,
    const struct ecu_gw_334_t *src_p,
    size_t size);

/**
 * Unpack message GW_334.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_334_unpack(
    struct ecu_gw_334_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_334.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_334_init(struct ecu_gw_334_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_334_dsm_left_mirror_up_down_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_334_dsm_left_mirror_up_down_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_334_dsm_left_mirror_up_down_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_334_dsm_left_mirror_left_right_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_334_dsm_left_mirror_left_right_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_334_dsm_left_mirror_left_right_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_334_dsm_right_mirror_left_right_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_334_dsm_right_mirror_left_right_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_334_dsm_right_mirror_left_right_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_334_dsm_right_mirror_up_down_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_334_dsm_right_mirror_up_down_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_334_dsm_right_mirror_up_down_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_334_dsm_rolling_counter_334_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_334_dsm_rolling_counter_334_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_334_dsm_rolling_counter_334_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_334_dsm_crc_check_334_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_334_dsm_crc_check_334_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_334_dsm_crc_check_334_is_in_range(uint8_t value);

/**
 * Pack message GW_395.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_395_pack(
    uint8_t *dst_p,
    const struct ecu_gw_395_t *src_p,
    size_t size);

/**
 * Unpack message GW_395.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_395_unpack(
    struct ecu_gw_395_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_395.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_395_init(struct ecu_gw_395_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_remote_engine_startup_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_remote_engine_startup_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_remote_engine_startup_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_engine_startup_inhibit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_engine_startup_inhibit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_engine_startup_inhibit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_lock_command_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_lock_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_lock_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_vehicle_vedio_detect_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_vehicle_vedio_detect_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_vehicle_vedio_detect_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_car_remind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_car_remind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_car_remind_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_audio_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_audio_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_audio_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_change_part_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_change_part_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_change_part_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_ese_updata_hu_wake_up_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_ese_updata_hu_wake_up_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_ese_updata_hu_wake_up_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_call_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_call_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_call_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_b_call_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_b_call_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_b_call_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_ac_temp_value_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_ac_temp_value_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_ac_temp_value_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_vehicle_status_demand_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_vehicle_status_demand_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_vehicle_status_demand_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_remote_start_run_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_remote_start_run_time_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_remote_start_run_time_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_vin_match_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_vin_match_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_vin_match_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_vin_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_vin_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_vin_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_search_car_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_search_car_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_search_car_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_rmote_trunk_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_rmote_trunk_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_rmote_trunk_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_rmote_roof_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_rmote_roof_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_rmote_roof_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_remote_ac_startup_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_remote_ac_startup_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_remote_ac_startup_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_remote_steer_wheel_hot_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_remote_steer_wheel_hot_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_remote_steer_wheel_hot_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_remote_driver_seat_hot_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_remote_driver_seat_hot_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_remote_driver_seat_hot_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_remote_passanger_seat_hot_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_remote_passanger_seat_hot_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_remote_passanger_seat_hot_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_remote_detect_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_remote_detect_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_remote_detect_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_remote_air_clean_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_remote_air_clean_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_remote_air_clean_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_remote_dis_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_remote_dis_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_remote_dis_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_remote_air_quality_inquire_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_remote_air_quality_inquire_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_remote_air_quality_inquire_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_remote_dr_ventilatie_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_remote_dr_ventilatie_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_remote_dr_ventilatie_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_remote_pa_ventilatie_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_remote_pa_ventilatie_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_remote_pa_ventilatie_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_remote_install_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_remote_install_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_remote_install_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_ap_amodule_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_ap_amodule_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_ap_amodule_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_apa_maneuver_cancel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_apa_maneuver_cancel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_apa_maneuver_cancel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_apa_maneuver_start_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_apa_maneuver_start_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_apa_maneuver_start_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_apa_maneuver_suspend_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_apa_maneuver_suspend_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_apa_maneuver_suspend_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_apapoc_mode_select_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_apapoc_mode_select_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_apapoc_mode_select_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_apa_fuction_selection_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_apa_fuction_selection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_apa_fuction_selection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_verticalbackward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_verticalbackward_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_verticalbackward_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_verticalforward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_verticalforward_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_verticalforward_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_apa_video_delay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_apa_video_delay_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_apa_video_delay_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_apa_signal_delay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_apa_signal_delay_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_apa_signal_delay_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_turn_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_turn_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_turn_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_turn_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_turn_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_turn_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_apa_remote_drive_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_apa_remote_drive_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_apa_remote_drive_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_signal_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_signal_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_signal_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_signal_strength_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_signal_strength_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_signal_strength_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_hzp_function_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_hzp_function_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_hzp_function_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_hzp_control_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_hzp_control_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_hzp_control_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_tbox_avm_display_form_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_tbox_avm_display_form_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_tbox_avm_display_form_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_t_box_messsage_counter_395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_t_box_messsage_counter_395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_t_box_messsage_counter_395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_395_t_box_reset_flag_395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_t_box_reset_flag_395_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_t_box_reset_flag_395_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_395_t_box_authenticator_395_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_395_t_box_authenticator_395_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_395_t_box_authenticator_395_is_in_range(uint16_t value);

/**
 * Pack message GW_18A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_18_a_pack(
    uint8_t *dst_p,
    const struct ecu_gw_18_a_t *src_p,
    size_t size);

/**
 * Unpack message GW_18A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_18_a_unpack(
    struct ecu_gw_18_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_18A.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_18_a_init(struct ecu_gw_18_a_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_18_a_tcu_ap_adriver_interruption_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_18_a_tcu_ap_adriver_interruption_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_18_a_tcu_ap_adriver_interruption_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_18_a_tcu_apa_shift_gear_request_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_18_a_tcu_apa_shift_gear_request_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_18_a_tcu_apa_shift_gear_request_enable_is_in_range(uint8_t value);

/**
 * Pack message GW_24A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_24_a_pack(
    uint8_t *dst_p,
    const struct ecu_gw_24_a_t *src_p,
    size_t size);

/**
 * Unpack message GW_24A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_24_a_unpack(
    struct ecu_gw_24_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_24A.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_24_a_init(struct ecu_gw_24_a_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_a_esl_shift_lever_positionrequest_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_a_esl_shift_lever_positionrequest_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_a_esl_shift_lever_positionrequest_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_a_esl_un_lock_button_position_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_a_esl_un_lock_button_position_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_a_esl_un_lock_button_position_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_a_esl_epb_button_position_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_a_esl_epb_button_position_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_a_esl_epb_button_position_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_a_esl_drive_mode_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_a_esl_drive_mode_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_a_esl_drive_mode_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_a_esl_driver_park_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_a_esl_driver_park_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_a_esl_driver_park_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_a_esl_shift_lever_position_fault_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_a_esl_shift_lever_position_fault_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_a_esl_shift_lever_position_fault_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_a_esl_drive_mode_fault_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_a_esl_drive_mode_fault_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_a_esl_drive_mode_fault_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_a_esl_driver_park_button_fault_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_a_esl_driver_park_button_fault_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_a_esl_driver_park_button_fault_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_a_esl_un_lock_button_fault_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_a_esl_un_lock_button_fault_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_a_esl_un_lock_button_fault_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_a_esl_epb_button_fault_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_a_esl_epb_button_fault_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_a_esl_epb_button_fault_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_a_esl_hall_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_a_esl_hall_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_a_esl_hall_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_a_esl_reset_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_a_esl_reset_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_a_esl_reset_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_a_esl_tcugear_ref_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_a_esl_tcugear_ref_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_a_esl_tcugear_ref_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_a_esl_rolling_counter_24_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_a_esl_rolling_counter_24_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_a_esl_rolling_counter_24_a_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_24_a_esl_crc_check_24_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_24_a_esl_crc_check_24_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_24_a_esl_crc_check_24_a_is_in_range(uint8_t value);

/**
 * Pack message GW_25C.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_25_c_pack(
    uint8_t *dst_p,
    const struct ecu_gw_25_c_t *src_p,
    size_t size);

/**
 * Unpack message GW_25C.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_25_c_unpack(
    struct ecu_gw_25_c_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_25C.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_25_c_init(struct ecu_gw_25_c_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ecu_gw_25_c_gw_trip_counter_25_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_25_c_gw_trip_counter_25_c_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_25_c_gw_trip_counter_25_c_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ecu_gw_25_c_gw_reset_counter_25_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_25_c_gw_reset_counter_25_c_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_25_c_gw_reset_counter_25_c_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_25_c_gw_authernticator_25_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_25_c_gw_authernticator_25_c_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_25_c_gw_authernticator_25_c_is_in_range(uint16_t value);

/**
 * Pack message GW_2D7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_2_d7_pack(
    uint8_t *dst_p,
    const struct ecu_gw_2_d7_t *src_p,
    size_t size);

/**
 * Unpack message GW_2D7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_2_d7_unpack(
    struct ecu_gw_2_d7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_2D7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_2_d7_init(struct ecu_gw_2_d7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_d7_hu_3_d_hor_angle_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_d7_hu_3_d_hor_angle_req_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_d7_hu_3_d_hor_angle_req_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_d7_hu_dvr_display_vision_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_d7_hu_dvr_display_vision_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_d7_hu_dvr_display_vision_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_d7_hu_av_mswitch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_d7_hu_av_mswitch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_d7_hu_av_mswitch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_d7_hu_dvr_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_d7_hu_dvr_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_d7_hu_dvr_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_d7_hu_avm_triggermethod_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_d7_hu_avm_triggermethod_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_d7_hu_avm_triggermethod_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_d7_hu_screen_operate_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_d7_hu_screen_operate_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_d7_hu_screen_operate_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_d7_hu_dvr_driving_play_switch_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_d7_hu_dvr_driving_play_switch_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_d7_hu_dvr_driving_play_switch_status_is_in_range(uint8_t value);

/**
 * Pack message GW_341.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_341_pack(
    uint8_t *dst_p,
    const struct ecu_gw_341_t *src_p,
    size_t size);

/**
 * Unpack message GW_341.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_341_unpack(
    struct ecu_gw_341_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_341.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_341_init(struct ecu_gw_341_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_341_pcu_pwr_tq_wh_min_total_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_341_pcu_pwr_tq_wh_min_total_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_341_pcu_pwr_tq_wh_min_total_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_341_pcu_pwr_tq_wh_max_total_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_341_pcu_pwr_tq_wh_max_total_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_341_pcu_pwr_tq_wh_max_total_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_341_pcu_pwr_tq_wh_min_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_341_pcu_pwr_tq_wh_min_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_341_pcu_pwr_tq_wh_min_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_341_pcu_pwr_tq_wh_max_vld_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_341_pcu_pwr_tq_wh_max_vld_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_341_pcu_pwr_tq_wh_max_vld_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_341_pcu_acc_ped_shield_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_341_pcu_acc_ped_shield_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_341_pcu_acc_ped_shield_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_341_pcu_rolling_counter_341_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_341_pcu_rolling_counter_341_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_341_pcu_rolling_counter_341_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_341_pcu_crc_check_341_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_341_pcu_crc_check_341_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_341_pcu_crc_check_341_is_in_range(uint8_t value);

/**
 * Pack message GW_3D6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_3_d6_pack(
    uint8_t *dst_p,
    const struct ecu_gw_3_d6_t *src_p,
    size_t size);

/**
 * Unpack message GW_3D6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_3_d6_unpack(
    struct ecu_gw_3_d6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_3D6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_3_d6_init(struct ecu_gw_3_d6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_d6_slcm_rr_window_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_d6_slcm_rr_window_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_d6_slcm_rr_window_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_d6_slcm_fr_window_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_d6_slcm_fr_window_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_d6_slcm_fr_window_status_is_in_range(uint8_t value);

/**
 * Pack message GW_3D8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_3_d8_pack(
    uint8_t *dst_p,
    const struct ecu_gw_3_d8_t *src_p,
    size_t size);

/**
 * Unpack message GW_3D8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_3_d8_unpack(
    struct ecu_gw_3_d8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_3D8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_3_d8_init(struct ecu_gw_3_d8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_d8_slcm_rl_win_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_d8_slcm_rl_win_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_d8_slcm_rl_win_motor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_d8_slcm_driver_win_motor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_d8_slcm_driver_win_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_d8_slcm_driver_win_motor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_d8_slcm_rl_window_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_d8_slcm_rl_window_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_d8_slcm_rl_window_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_d8_slcm_driver_window_switch_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_d8_slcm_driver_window_switch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_d8_slcm_driver_window_switch_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_d8_slcm_rl_window_ap_actice_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_d8_slcm_rl_window_ap_actice_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_d8_slcm_rl_window_ap_actice_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_d8_slcm_driver_window_ap_actice_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_d8_slcm_driver_window_ap_actice_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_d8_slcm_driver_window_ap_actice_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_d8_slcm_rl_window_initialized_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_d8_slcm_rl_window_initialized_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_d8_slcm_rl_window_initialized_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_d8_slcm_driver_window_initialized_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_d8_slcm_driver_window_initialized_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_d8_slcm_driver_window_initialized_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_d8_slcm_rl_window_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_d8_slcm_rl_window_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_d8_slcm_rl_window_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_d8_slcm_driver_window_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_d8_slcm_driver_window_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_d8_slcm_driver_window_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_d8_slcm_fail_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_d8_slcm_fail_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_d8_slcm_fail_status_is_in_range(uint8_t value);

/**
 * Pack message GW_3DE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_3_de_pack(
    uint8_t *dst_p,
    const struct ecu_gw_3_de_t *src_p,
    size_t size);

/**
 * Unpack message GW_3DE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_3_de_unpack(
    struct ecu_gw_3_de_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_3DE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_3_de_init(struct ecu_gw_3_de_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_de_dsm_dsm_horizontal_position_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_de_dsm_dsm_horizontal_position_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_de_dsm_dsm_horizontal_position_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_de_dsm_dsm_front_end_position_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_de_dsm_dsm_front_end_position_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_de_dsm_dsm_front_end_position_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_de_dsm_dsm_vertical_position_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_de_dsm_dsm_vertical_position_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_de_dsm_dsm_vertical_position_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_de_dsm_dsm_backrest_position_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_de_dsm_dsm_backrest_position_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_de_dsm_dsm_backrest_position_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_de_dsm_rolling_counter_3_de_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_de_dsm_rolling_counter_3_de_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_de_dsm_rolling_counter_3_de_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_de_dsm_crc_check_3_de_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_de_dsm_crc_check_3_de_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_de_dsm_crc_check_3_de_is_in_range(uint8_t value);

/**
 * Pack message GW_3EE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_3_ee_pack(
    uint8_t *dst_p,
    const struct ecu_gw_3_ee_t *src_p,
    size_t size);

/**
 * Unpack message GW_3EE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_3_ee_unpack(
    struct ecu_gw_3_ee_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_3EE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_3_ee_init(struct ecu_gw_3_ee_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_ee_gw_saf_cert_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_ee_gw_saf_cert_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_ee_gw_saf_cert_sts_is_in_range(uint8_t value);

/**
 * Pack message GW_6B0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_6_b0_pack(
    uint8_t *dst_p,
    const struct ecu_gw_6_b0_t *src_p,
    size_t size);

/**
 * Unpack message GW_6B0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_6_b0_unpack(
    struct ecu_gw_6_b0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_6B0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_6_b0_init(struct ecu_gw_6_b0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t ecu_gw_6_b0_gw_apa_authentication_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_6_b0_gw_apa_authentication_status_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_6_b0_gw_apa_authentication_status_is_in_range(uint64_t value);

/**
 * Pack message ACC_2D3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_acc_2_d3_pack(
    uint8_t *dst_p,
    const struct ecu_acc_2_d3_t *src_p,
    size_t size);

/**
 * Unpack message ACC_2D3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_acc_2_d3_unpack(
    struct ecu_acc_2_d3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_2D3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_acc_2_d3_init(struct ecu_acc_2_d3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_2_d3_acc_aeb_status_for_srs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_2_d3_acc_aeb_status_for_srs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_2_d3_acc_aeb_status_for_srs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_2_d3_acc_aeb_active_for_srs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_2_d3_acc_aeb_active_for_srs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_2_d3_acc_aeb_active_for_srs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_2_d3_acc_aeb_target_lng_range_for_srs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_2_d3_acc_aeb_target_lng_range_for_srs_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_2_d3_acc_aeb_target_lng_range_for_srs_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_2_d3_acc_aeb_target_rel_speed_for_srs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_2_d3_acc_aeb_target_rel_speed_for_srs_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_2_d3_acc_aeb_target_rel_speed_for_srs_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_2_d3_acc_aeb_target_ttc_for_srs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_2_d3_acc_aeb_target_ttc_for_srs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_2_d3_acc_aeb_target_ttc_for_srs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_2_d3_acc_aeb_target_type_for_srs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_2_d3_acc_aeb_target_type_for_srs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_2_d3_acc_aeb_target_type_for_srs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_2_d3_acc_aeb_target_prob_for_srs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_2_d3_acc_aeb_target_prob_for_srs_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_2_d3_acc_aeb_target_prob_for_srs_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_2_d3_acc_rolling_counter_282_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_2_d3_acc_rolling_counter_282_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_2_d3_acc_rolling_counter_282_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_2_d3_acc_crc_checkr_282_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_2_d3_acc_crc_checkr_282_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_2_d3_acc_crc_checkr_282_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_2_d3_acc_aeb_target_lat_range_for_srs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_2_d3_acc_aeb_target_lat_range_for_srs_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_2_d3_acc_aeb_target_lat_range_for_srs_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_acc_2_d3_acc_aeb_target_lat_rel_speed_for_srs_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_2_d3_acc_aeb_target_lat_rel_speed_for_srs_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_2_d3_acc_aeb_target_lat_rel_speed_for_srs_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_2_d3_acc_rolling_counter_283_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_2_d3_acc_rolling_counter_283_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_2_d3_acc_rolling_counter_283_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_2_d3_acc_crc_check_283_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_2_d3_acc_crc_check_283_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_2_d3_acc_crc_check_283_is_in_range(uint8_t value);

/**
 * Pack message ACC_301.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_acc_301_pack(
    uint8_t *dst_p,
    const struct ecu_acc_301_t *src_p,
    size_t size);

/**
 * Unpack message ACC_301.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_acc_301_unpack(
    struct ecu_acc_301_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_301.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_acc_301_init(struct ecu_acc_301_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_301_acc_reset_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_301_acc_reset_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_301_acc_reset_sts_is_in_range(uint8_t value);

/**
 * Pack message LAS_30C.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_las_30_c_pack(
    uint8_t *dst_p,
    const struct ecu_las_30_c_t *src_p,
    size_t size);

/**
 * Unpack message LAS_30C.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_las_30_c_unpack(
    struct ecu_las_30_c_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LAS_30C.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_las_30_c_init(struct ecu_las_30_c_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_30_c_las_reset_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_30_c_las_reset_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_30_c_las_reset_sts_is_in_range(uint8_t value);

/**
 * Pack message GW_2E2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_2_e2_pack(
    uint8_t *dst_p,
    const struct ecu_gw_2_e2_t *src_p,
    size_t size);

/**
 * Unpack message GW_2E2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_2_e2_unpack(
    struct ecu_gw_2_e2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_2E2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_2_e2_init(struct ecu_gw_2_e2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e2_rlr_elk_obj1_track_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_track_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_track_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e2_rlr_elk_obj1_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj1_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_width_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_width_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj1_height_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_height_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_height_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj1_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_length_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_length_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj1_heading_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_heading_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_heading_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj1_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e2_rlr_elk_obj1_ref_point_loc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_ref_point_loc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_ref_point_loc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj1_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj1_rel_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_rel_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_rel_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj1_rel_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_rel_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_rel_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj1_rel_ay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_rel_ay_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_rel_ay_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj1_rel_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_rel_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_rel_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e2_rlr_elk_obj1_location_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_location_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_location_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e2_rlr_elk_obj1_exist_prob_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_exist_prob_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_exist_prob_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e2_rlr_elk_obj1_measured_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_measured_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_measured_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e2_rlr_elk_obj1_obstacle_prob_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_obstacle_prob_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_obstacle_prob_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj1_ref_point_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_ref_point_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_ref_point_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj1_ref_point_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj1_ref_point_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj1_ref_point_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e2_rlr_elk_obj2_obstacle_prob_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_obstacle_prob_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_obstacle_prob_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj2_ref_point_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_ref_point_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_ref_point_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj2_ref_point_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_ref_point_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_ref_point_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e2_rlr_elk_obj2_track_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_track_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_track_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e2_rlr_elk_obj2_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj2_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_width_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_width_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj2_height_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_height_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_height_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj2_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_length_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_length_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj2_heading_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_heading_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_heading_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj2_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e2_rlr_elk_obj2_ref_point_loc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_ref_point_loc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_ref_point_loc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj2_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj2_rel_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_rel_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_rel_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj2_rel_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_rel_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_rel_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj2_rel_ay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_rel_ay_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_rel_ay_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_elk_obj2_rel_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_rel_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_rel_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e2_rlr_elk_obj2_location_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_location_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_location_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e2_rlr_elk_obj2_exist_prob_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_exist_prob_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_exist_prob_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e2_rlr_elk_obj2_measured_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_elk_obj2_measured_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_elk_obj2_measured_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e2_rlr_rolling_counter_2_e2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_rolling_counter_2_e2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_rolling_counter_2_e2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e2_rlr_crc_check_2_e2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e2_rlr_crc_check_2_e2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e2_rlr_crc_check_2_e2_is_in_range(uint16_t value);

/**
 * Pack message GW_2E3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_2_e3_pack(
    uint8_t *dst_p,
    const struct ecu_gw_2_e3_t *src_p,
    size_t size);

/**
 * Unpack message GW_2E3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_2_e3_unpack(
    struct ecu_gw_2_e3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_2E3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_2_e3_init(struct ecu_gw_2_e3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e3_rlr_elk_obj3_track_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_track_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_track_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e3_rlr_elk_obj3_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj3_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_width_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_width_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj3_height_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_height_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_height_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj3_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_length_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_length_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj3_heading_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_heading_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_heading_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj3_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e3_rlr_elk_obj3_ref_point_loc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_ref_point_loc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_ref_point_loc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj3_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj3_rel_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_rel_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_rel_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj3_rel_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_rel_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_rel_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj3_rel_ay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_rel_ay_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_rel_ay_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj3_rel_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_rel_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_rel_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e3_rlr_elk_obj3_location_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_location_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_location_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e3_rlr_elk_obj3_exist_prob_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_exist_prob_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_exist_prob_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e3_rlr_elk_obj3_measured_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_measured_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_measured_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e3_rlr_elk_obj3_obstacle_prob_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_obstacle_prob_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_obstacle_prob_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj3_ref_point_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_ref_point_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_ref_point_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj3_ref_point_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj3_ref_point_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj3_ref_point_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e3_rlr_elk_obj4_obstacle_prob_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_obstacle_prob_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_obstacle_prob_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj4_ref_point_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_ref_point_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_ref_point_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj4_ref_point_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_ref_point_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_ref_point_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e3_rlr_elk_obj4_track_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_track_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_track_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e3_rlr_elk_obj4_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj4_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_width_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_width_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj4_height_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_height_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_height_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj4_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_length_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_length_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj4_heading_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_heading_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_heading_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj4_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e3_rlr_elk_obj4_ref_point_loc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_ref_point_loc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_ref_point_loc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj4_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj4_rel_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_rel_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_rel_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj4_rel_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_rel_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_rel_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj4_rel_ay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_rel_ay_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_rel_ay_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_elk_obj4_rel_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_rel_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_rel_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e3_rlr_elk_obj4_location_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_location_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_location_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e3_rlr_elk_obj4_exist_prob_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_exist_prob_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_exist_prob_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e3_rlr_elk_obj4_measured_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_elk_obj4_measured_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_elk_obj4_measured_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_e3_rlr_rolling_counter_2_e3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_rolling_counter_2_e3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_rolling_counter_2_e3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_e3_rlr_crc_check_2_e3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_e3_rlr_crc_check_2_e3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_e3_rlr_crc_check_2_e3_is_in_range(uint16_t value);

/**
 * Pack message GW_2C9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_2_c9_pack(
    uint8_t *dst_p,
    const struct ecu_gw_2_c9_t *src_p,
    size_t size);

/**
 * Unpack message GW_2C9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_2_c9_unpack(
    struct ecu_gw_2_c9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_2C9.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_2_c9_init(struct ecu_gw_2_c9_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_c9_hu_xlevel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_c9_hu_xlevel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_c9_hu_xlevel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_2_c9_hu_ylevel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_c9_hu_ylevel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_c9_hu_ylevel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_c9_hu_interface_change_singnal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_c9_hu_interface_change_singnal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_c9_hu_interface_change_singnal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_c9_hu_novice_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_c9_hu_novice_response_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_c9_hu_novice_response_is_in_range(uint8_t value);

/**
 * Pack message GW_761.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_761_pack(
    uint8_t *dst_p,
    const struct ecu_gw_761_t *src_p,
    size_t size);

/**
 * Unpack message GW_761.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_761_unpack(
    struct ecu_gw_761_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_761.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_761_init(struct ecu_gw_761_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_761_diagnose_message761_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_761_diagnose_message761_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_761_diagnose_message761_is_in_range(uint8_t value);

/**
 * Pack message GW_57D.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_57_d_pack(
    uint8_t *dst_p,
    const struct ecu_gw_57_d_t *src_p,
    size_t size);

/**
 * Unpack message GW_57D.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_57_d_unpack(
    struct ecu_gw_57_d_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_57D.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_57_d_init(struct ecu_gw_57_d_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_57_d_hu_apa_on_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_57_d_hu_apa_on_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_57_d_hu_apa_on_off_is_in_range(uint8_t value);

/**
 * Pack message GW_518.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_518_pack(
    uint8_t *dst_p,
    const struct ecu_gw_518_t *src_p,
    size_t size);

/**
 * Unpack message GW_518.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_518_unpack(
    struct ecu_gw_518_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_518.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_518_init(struct ecu_gw_518_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_518_bcm_car_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_518_bcm_car_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_518_bcm_car_mode_is_in_range(uint8_t value);

/**
 * Pack message GW_2AE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_2_ae_pack(
    uint8_t *dst_p,
    const struct ecu_gw_2_ae_t *src_p,
    size_t size);

/**
 * Unpack message GW_2AE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_2_ae_unpack(
    struct ecu_gw_2_ae_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_2AE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_2_ae_init(struct ecu_gw_2_ae_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_2_ae_lcdal_system_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_2_ae_lcdal_system_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_2_ae_lcdal_system_status_is_in_range(uint8_t value);

/**
 * Pack message LAS_3D9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_las_3_d9_pack(
    uint8_t *dst_p,
    const struct ecu_las_3_d9_t *src_p,
    size_t size);

/**
 * Unpack message LAS_3D9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_las_3_d9_unpack(
    struct ecu_las_3_d9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LAS_3D9.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_las_3_d9_init(struct ecu_las_3_d9_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target1_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target1_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target1_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target1_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target1_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target1_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target1_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target1_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target1_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target1_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target1_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target1_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target2_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target2_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target2_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target2_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target2_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target2_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target2_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target2_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target2_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target2_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target2_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target2_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target3_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target3_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target3_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target3_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target3_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target3_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target3_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target3_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target3_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target3_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target3_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target3_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target4_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target4_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target4_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target4_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target4_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target4_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target4_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target4_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target4_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target4_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target4_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target4_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target5_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target5_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target5_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target5_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target5_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target5_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target5_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target5_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target5_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target5_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target5_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target5_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target6_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target6_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target6_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target6_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target6_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target6_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target6_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target6_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target6_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target6_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target6_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target6_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target7_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target7_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target7_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target7_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target7_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target7_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target7_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target7_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target7_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target7_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target7_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target7_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target8_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target8_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target8_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target8_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target8_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target8_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target8_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target8_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target8_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target8_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target8_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target8_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target9_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target9_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target9_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target9_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target9_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target9_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target9_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target9_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target9_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target9_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target9_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target9_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target10_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target10_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target10_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_d9_acc_obs_target10_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target10_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target10_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target10_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target10_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target10_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_d9_acc_obs_target10_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_d9_acc_obs_target10_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_d9_acc_obs_target10_id_is_in_range(uint8_t value);

/**
 * Pack message LAS_3DB.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_las_3_db_pack(
    uint8_t *dst_p,
    const struct ecu_las_3_db_t *src_p,
    size_t size);

/**
 * Unpack message LAS_3DB.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_las_3_db_unpack(
    struct ecu_las_3_db_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LAS_3DB.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_las_3_db_init(struct ecu_las_3_db_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target11_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target11_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target11_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target11_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target11_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target11_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target11_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target11_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target11_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target11_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target11_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target11_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target12_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target12_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target12_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target12_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target12_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target12_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target12_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target12_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target12_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target12_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target12_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target12_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target13_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target13_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target13_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target13_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target13_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target13_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target13_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target13_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target13_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target13_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target13_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target13_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target14_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target14_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target14_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target14_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target14_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target14_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target14_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target14_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target14_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target14_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target14_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target14_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target15_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target15_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target15_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target15_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target15_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target15_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target15_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target15_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target15_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target15_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target15_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target15_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target16_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target16_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target16_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target16_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target16_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target16_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target16_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target16_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target16_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target16_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target16_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target16_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target17_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target17_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target17_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target17_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target17_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target17_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target17_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target17_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target17_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target17_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target17_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target17_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target18_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target18_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target18_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target18_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target18_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target18_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target18_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target18_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target18_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target18_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target18_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target18_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target19_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target19_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target19_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target19_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target19_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target19_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target19_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target19_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target19_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target19_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target19_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target19_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target20_lng_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target20_lng_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target20_lng_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_las_3_db_acc_obs_target20_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target20_lat_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target20_lat_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target20_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target20_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target20_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_las_3_db_acc_obs_target20_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_las_3_db_acc_obs_target20_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_las_3_db_acc_obs_target20_id_is_in_range(uint8_t value);

/**
 * Pack message GW_371.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_371_pack(
    uint8_t *dst_p,
    const struct ecu_gw_371_t *src_p,
    size_t size);

/**
 * Unpack message GW_371.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_371_unpack(
    struct ecu_gw_371_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_371.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_371_init(struct ecu_gw_371_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_371_pcu_drv_mod2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_371_pcu_drv_mod2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_371_pcu_drv_mod2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_371_pcu_special_mode_set_fb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_371_pcu_special_mode_set_fb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_371_pcu_special_mode_set_fb_is_in_range(uint8_t value);

/**
 * Pack message GW_31C.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_31_c_pack(
    uint8_t *dst_p,
    const struct ecu_gw_31_c_t *src_p,
    size_t size);

/**
 * Unpack message GW_31C.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_31_c_unpack(
    struct ecu_gw_31_c_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_31C.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_31_c_init(struct ecu_gw_31_c_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_31_c_pcu_power_output_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_31_c_pcu_power_output_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_31_c_pcu_power_output_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_31_c_pcu_vcu_rdy_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_31_c_pcu_vcu_rdy_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_31_c_pcu_vcu_rdy_sts_is_in_range(uint8_t value);

/**
 * Pack message GW_10A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_10_a_pack(
    uint8_t *dst_p,
    const struct ecu_gw_10_a_t *src_p,
    size_t size);

/**
 * Unpack message GW_10A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_10_a_unpack(
    struct ecu_gw_10_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_10A.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_10_a_init(struct ecu_gw_10_a_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_10_a_epb_fail_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_10_a_epb_fail_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_10_a_epb_fail_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_10_a_epb_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_10_a_epb_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_10_a_epb_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_10_a_epb_achieved_clamp_force_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_10_a_epb_achieved_clamp_force_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_10_a_epb_achieved_clamp_force_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_10_a_epb_switch_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_10_a_epb_switch_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_10_a_epb_switch_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_10_a_epb_switch_position_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_10_a_epb_switch_position_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_10_a_epb_switch_position_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_10_a_esp_rwu_parking_active_for_acc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_10_a_esp_rwu_parking_active_for_acc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_10_a_esp_rwu_parking_active_for_acc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_10_a_esp_rwu_parking_avail_for_acc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_10_a_esp_rwu_parking_avail_for_acc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_10_a_esp_rwu_parking_avail_for_acc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_10_a_epb_ap_arequest_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_10_a_epb_ap_arequest_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_10_a_epb_ap_arequest_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_10_a_epb_rolling_counter_10_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_10_a_epb_rolling_counter_10_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_10_a_epb_rolling_counter_10_a_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_10_a_epb_crc_check_10_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_10_a_epb_crc_check_10_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_10_a_epb_crc_check_10_a_is_in_range(uint8_t value);

/**
 * Pack message BDC_400.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_bdc_400_pack(
    uint8_t *dst_p,
    const struct ecu_bdc_400_t *src_p,
    size_t size);

/**
 * Unpack message BDC_400.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_bdc_400_unpack(
    struct ecu_bdc_400_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BDC_400.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_bdc_400_init(struct ecu_bdc_400_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_bdc_400_nm_message400_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_bdc_400_nm_message400_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_bdc_400_nm_message400_is_in_range(uint8_t value);

/**
 * Pack message ACC_453.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_acc_453_pack(
    uint8_t *dst_p,
    const struct ecu_acc_453_t *src_p,
    size_t size);

/**
 * Unpack message ACC_453.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_acc_453_unpack(
    struct ecu_acc_453_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_453.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_acc_453_init(struct ecu_acc_453_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_acc_453_nm_message453_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_acc_453_nm_message453_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_acc_453_nm_message453_is_in_range(uint8_t value);

/**
 * Pack message GW_7DF.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_7_df_pack(
    uint8_t *dst_p,
    const struct ecu_gw_7_df_t *src_p,
    size_t size);

/**
 * Unpack message GW_7DF.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_7_df_unpack(
    struct ecu_gw_7_df_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_7DF.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_7_df_init(struct ecu_gw_7_df_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_7_df_diagnose_message7_df_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_7_df_diagnose_message7_df_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_7_df_diagnose_message7_df_is_in_range(uint8_t value);

/**
 * Pack message GW_15D.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_15_d_pack(
    uint8_t *dst_p,
    const struct ecu_gw_15_d_t *src_p,
    size_t size);

/**
 * Unpack message GW_15D.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_15_d_unpack(
    struct ecu_gw_15_d_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_15D.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_15_d_init(struct ecu_gw_15_d_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_15_d_esp_imu_calibrated_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_15_d_esp_imu_calibrated_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_15_d_esp_imu_calibrated_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_15_d_esp_rolling_counter_278_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_15_d_esp_rolling_counter_278_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_15_d_esp_rolling_counter_278_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_15_d_esp_crc_check_278_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_15_d_esp_crc_check_278_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_15_d_esp_crc_check_278_is_in_range(uint8_t value);

/**
 * Pack message GW_10F.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_10_f_pack(
    uint8_t *dst_p,
    const struct ecu_gw_10_f_t *src_p,
    size_t size);

/**
 * Unpack message GW_10F.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_10_f_unpack(
    struct ecu_gw_10_f_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_10F.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_10_f_init(struct ecu_gw_10_f_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_10_f_ibcu_s_output_rod_driver_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_10_f_ibcu_s_output_rod_driver_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_10_f_ibcu_s_output_rod_driver_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_10_f_ibcu_s_output_rod_driver_q_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_10_f_ibcu_s_output_rod_driver_q_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_10_f_ibcu_s_output_rod_driver_q_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_10_f_ibcu_s_output_rod_act_q_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_10_f_ibcu_s_output_rod_act_q_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_10_f_ibcu_s_output_rod_act_q_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_10_f_ibcu_s_output_rod_act_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_10_f_ibcu_s_output_rod_act_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_10_f_ibcu_s_output_rod_act_is_in_range(uint16_t value);

/**
 * Pack message GW_32A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_32_a_pack(
    uint8_t *dst_p,
    const struct ecu_gw_32_a_t *src_p,
    size_t size);

/**
 * Unpack message GW_32A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_32_a_unpack(
    struct ecu_gw_32_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_32A.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_32_a_init(struct ecu_gw_32_a_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_32_a_trm_connect_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_32_a_trm_connect_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_32_a_trm_connect_sts_is_in_range(uint8_t value);

/**
 * Pack message GW_3BE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_3_be_pack(
    uint8_t *dst_p,
    const struct ecu_gw_3_be_t *src_p,
    size_t size);

/**
 * Unpack message GW_3BE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_3_be_unpack(
    struct ecu_gw_3_be_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_3BE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_3_be_init(struct ecu_gw_3_be_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_3_be_ats_current_driving_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_3_be_ats_current_driving_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_3_be_ats_current_driving_mode_is_in_range(uint8_t value);

/**
 * Pack message GW_37A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_gw_37_a_pack(
    uint8_t *dst_p,
    const struct ecu_gw_37_a_t *src_p,
    size_t size);

/**
 * Unpack message GW_37A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_gw_37_a_unpack(
    struct ecu_gw_37_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GW_37A.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_gw_37_a_init(struct ecu_gw_37_a_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_37_a_vmc_ecas_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_ecas_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_ecas_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_37_a_vmc_ecdc_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_ecdc_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_ecdc_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_37_a_vmc_ecas_mode_val_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_ecas_mode_val_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_ecas_mode_val_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_37_a_vmc_ecas_mode_cha_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_ecas_mode_cha_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_ecas_mode_cha_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_37_a_vmc_ctrl_level_fr_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_ctrl_level_fr_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_ctrl_level_fr_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_37_a_vmc_ctrl_level_fl_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_ctrl_level_fl_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_ctrl_level_fl_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_37_a_vmc_ecas_mode_frt_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_ecas_mode_frt_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_ecas_mode_frt_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_37_a_vmc_ecas_mode_rel_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_ecas_mode_rel_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_ecas_mode_rel_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_37_a_vmc_ctrl_level_rr_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_ctrl_level_rr_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_ctrl_level_rr_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_37_a_vmc_ctrl_level_r_ly_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_ctrl_level_r_ly_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_ctrl_level_r_ly_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_37_a_vmc_ctrl_level_fl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_ctrl_level_fl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_ctrl_level_fl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_37_a_vmc_ctrl_level_fr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_ctrl_level_fr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_ctrl_level_fr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_37_a_vmc_lvl_tar_rl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_lvl_tar_rl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_lvl_tar_rl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_37_a_vmc_lvl_tar_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_lvl_tar_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_lvl_tar_rr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_37_a_vmc_ctrl_level_rl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_ctrl_level_rl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_ctrl_level_rl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_37_a_vmc_ctrl_level_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_ctrl_level_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_ctrl_level_rr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_37_a_vmc_lvl_tar_fl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_lvl_tar_fl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_lvl_tar_fl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_37_a_vmc_lvl_tar_fr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_lvl_tar_fr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_lvl_tar_fr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_gw_37_a_vmc_rolling_counter_37_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_rolling_counter_37_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_rolling_counter_37_a_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_gw_37_a_vmc_crc_check_37_a_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_gw_37_a_vmc_crc_check_37_a_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_gw_37_a_vmc_crc_check_37_a_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
